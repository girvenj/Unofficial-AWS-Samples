AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates the following:
    1. (1) VPC w/ (2) public subnets in (2) AZs
    2. (1) Amazon EC2 Instance Role (Used for all EC2 Instances)
    3. (2) Security Groups
      a. (1) Onprem Domain Controller SG
      b. (1) Domain Member SG
    4. (1) Amazon Route 53 Outbound Resolver w/ rules for self-managed AD and AWS Managed Microsoft AD
    5. (1) AWS Managed Microsoft AD (MAD Enterprise)
    6. (3) Amazon EC2 Instances (All t3.large, 60Gb (C:) GP3, 10GB (D:))
      a. (1) Joined to MAD w/ PKI, AD Mgmt tools, and SQL Mgmt tool installed
      b. (1) Self-managed AD domain controller w/ AD trust w/ MAD
      c. (1) Joined to self-managed AD w/ PKI and AD Mgmt tools
    7.	Opt: (1) Single AZ Amazon RDS SQL Server 2019 Instance w/ Service role & Subnet Group joined to MAD (db.t3.xlarge and 20GB GP2)
    8.	Opt: (1) Single AZ Amazon FSX for Windows Server joined to MAD (32GB SSD and 16 MB/s Tcap)
    9.	Opt: (1) Single AZ Amazon FSX for Windows Server joined to self-managed AD (32GB SSD and 16 MB/s Tcap)
Parameters:
  AMI:
    Default: /aws/service/ami-windows-latest/TPM-Windows_Server-2022-English-Full-Base
    Description: System Manager parameter value for latest Windows Server AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  CreateChildDomain:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy a child domain as part of the On-Premises domain
    Type: String
  DeployMadPki:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy Enterpise Ca with AWS Managed Microsoft AD
    Type: String
  DeployOnpremPki:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy Enterpise Ca with On-Premises AD
    Type: String
  IntegrateFsxMad:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy & Integrate Amazon FSX for Windows with AWS Managed Microsoft AD
    Type: String
  IntegrateFsxOnprem:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy & Integrate Amazon FSX for Windows with On-Premises AD
    Type: String
  IntegrateRdsMad:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Deploy & Integrate Amazon RDS SQL Server Instance with AWS Managed Microsoft AD
    Type: String
  FsxOnpremParentOu:
    Default: DC=onpremises,DC=local
    Description: Parent OU DN for Amazon FSX for Windows OU (Only used when deployment with On-Premises AD)
    Type: String
  InstanceType:
    Default: m6i.large
    Description: EC2 Instance type used for all instances
    Type: String
  MadDomainName:
    AllowedPattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-zA-Z]{2,}$
    Default: corp.example.com
    Description: Fully qualified domain name (FQDN) of the AWS Managed Microsoft AD domain e.g. corp.example.com
    MaxLength: '255'
    MinLength: '2'
    Type: String
  MadNetBiosName:
    AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
    Default: CORP
    Description: NetBIOS name of the AWS Managed Microsoft AD domain (up to 15 characters) e.g. CORP
    MaxLength: '15'
    MinLength: '1'
    Type: String
  OnpremChildNetBiosName:
    AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
    Default: CHILD
    Description: NetBIOS name of the On-Premises child domain (up to 15 characters) e.g. CHILD
    MaxLength: '15'
    MinLength: '1'
    Type: String
  OnpremDomainName:
    AllowedPattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-zA-Z]{2,}$
    Default: onpremises.local
    Description: Fully qualified domain name (FQDN) of the On-Premises domain e.g. onpremises.local
    MaxLength: '255'
    MinLength: '2'
    Type: String
  OnpremNetBiosName:
    AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
    Default: ONPREMISES
    Description: NetBIOS name of the On-Premises domain (up to 15 characters) e.g. ONPREMISES
    MaxLength: '15'
    MinLength: '1'
    Type: String
  TrustDirection:
    AllowedValues:
      - Two-Way
      - 'One-Way: Incoming'
      - 'One-Way: Outgoing'
      - None
    Default: 'One-Way: Outgoing'
    Description: Trust Direction from AWS Managed Microsoft AD to on-premises domain.
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Main Configuration
        Parameters:
          - AMI
          - InstanceType
          - MadDomainName
          - MadNetBiosName
          - OnpremDomainName
          - OnpremNetBiosName
          - TrustDirection
      - Label:
          default: Add-Ons
        Parameters:
          - CreateChildDomain
          - OnpremChildNetBiosName
          - DeployMadPki
          - DeployOnpremPki
          - IntegrateRdsMad
          - IntegrateFsxMad
          - IntegrateFsxOnprem
          - FsxOnpremParentOu
    ParameterLabels:
      AMI:
        default: SSM Parameter Value for Latest AMI ID
      CreateChildDomain:
        default: Create On-Premises Child Domain
      DeployMadPki:
        default: Deploy PKI for AWS Managed Microsoft AD
      DeployOnpremPki:   
        default: Deploy PKI for On-Premises AD
      InstanceType:
        default: EC2 Instance Type
      IntegrateFsxMad:
        default: Deploy FSX for Windows for AWS Managed Microsoft AD
      IntegrateFsxOnprem:
        default: Deploy FSX for Windows for On-Premises AD
      IntegrateRdsMad:
        default: Deploy Amazon RDS SQL Server Instance for AWS Managed Microsoft AD
      FsxOnpremParentOu:
        default: Parent OU DN for Amazon FSX for Windows deployment for On-Premises AD
      MadDomainName:
        default: AWS Managed Microsoft AD Domain DNS Name
      MadNetBiosName:
        default: AWS Managed Microsoft AD Domain NetBIOS Name
      OnpremChildNetBiosName:
        default: On-Premises Child Domain NetBIOS Name
      OnpremDomainName:
        default: On-Premises Domain DNS Name
      OnpremNetBiosName:
        default: On-Premises Domain NetBIOS Name
      TrustDirection:
        default: Trust Direction from AWS Managed Microsoft AD
Conditions:
  NoDeployMadPki: !Equals [!Ref DeployMadPki, 'No']
  YesDeployMadPki: !Equals [!Ref DeployMadPki, 'Yes']
  YesDeployOnpremPki: !Equals [!Ref DeployOnpremPki, 'Yes']
  YesCreateChildDomain: !Equals [!Ref CreateChildDomain, 'Yes']
  YesIntegrateFsxMad: !Equals [!Ref IntegrateFsxMad, 'Yes']
  YesIntegrateFSxwSMMAD: !Equals [!Ref IntegrateFsxOnprem, 'Yes']
  YesIntegrateRDSwMAD: !Equals [!Ref IntegrateRdsMad, 'Yes']
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-${AWS::StackName}
  VPCPublicSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 0
        - Fn::Cidr:
          - !GetAtt VPC.CidrBlock
          - 2
          - 6
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-Subnet1-${AWS::StackName}
      VpcId: !Ref VPC
  VPCPublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-Subnet1-RT-${AWS::StackName}
      VpcId: !Ref VPC
  VPCPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTable
      SubnetId:
        Ref: VPCPublicSubnet1Subnet
  VPCPublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCVPCGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTable
  VPCPublicSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 1
        - Fn::Cidr:
          - !GetAtt VPC.CidrBlock
          - 2
          - 6
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-Subnet2-${AWS::StackName}
      VpcId: !Ref VPC
  VPCPublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-Subnet2-RT-${AWS::StackName}
      VpcId: !Ref VPC
  VPCPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable
      SubnetId:
        Ref: VPCPublicSubnet2Subnet
  VPCPublicSubnet2DefaultRoute:
    DependsOn: VPCVPCGW
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGW
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
        Tags:
          - Key: Name
            Value: !Sub Demo-VPC-IGW-${AWS::StackName}
  VPCVPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VPCIGW
      VpcId: !Ref VPC
  MadAdminSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub MAD-Admin-Secret-${AWS::StackName}
      Description: Password for AWS Managed Microsoft AD
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  OnPremAdministratorSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub OnPrem-Administrator-Secret-${AWS::StackName}
      Description: Administrator Password for Onpremises AD
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Administrator"}'
        GenerateStringKey: 'password'
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  RdsAdminSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub RDS-Admin-Secret-${AWS::StackName}
      Description: Password for Amazon RDS Admin
      GenerateSecretString:
        SecretStringTemplate: '{"username": "Admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: cloudformation:SignalResource
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Effect: Allow
                Resource:
                  - !Ref MadAdminSecret
                  - !Ref OnPremAdministratorSecret
              - Action: ssm:SendCommand
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunRemoteScript
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunPowerShellScript
              - Action: ssm:SendCommand
                Condition:
                    StringEquals: 
                      'ssm:ResourceTag/aws:cloudformation:stack-name': !Ref AWS::StackName
                Effect: Allow
                Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - Action: ssm:StartAutomationExecution
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SsmAuto}:$DEFAULT
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${AuditPolSsmAuto}:$DEFAULT
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${PkiSsmAuto}:$DEFAULT
              - Action:
                  - ds:CreateConditionalForwarder
                  - ds:CreateTrust
                  - ds:DescribeTrusts
                  - ds:VerifyTrust
                Effect: Allow
                Resource: "*"
              - Action: ec2:AuthorizeSecurityGroupEgress
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ssm:DescribeInstanceInformation
                  - ssm:GetAutomationExecution
                  - ssm:ListCommands
                  - ssm:ListCommandInvocations
                Effect: Allow
                Resource: "*"
          PolicyName: Inline-Policy
      RoleName: !Sub Instance-Role-${AWS::StackName}
      Tags:
        - Key: StackName
          Value:
            Ref: AWS::StackName
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub Instance-Role-${AWS::StackName}
      Path: /
      Roles:
        - Ref: InstanceRole
  RDSRole:
    Type: AWS::IAM::Role
    Condition: YesIntegrateRDSwMAD
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                  - rds.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonRDSDirectoryServiceAccess
      Path: /
      RoleName: !Sub RDS-Role-${AWS::StackName}
      Tags:
        - Key: StackName
          Value:
            Ref: AWS::StackName
  RdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: YesIntegrateRDSwMAD
    Properties:
      DBSubnetGroupDescription: !Sub Demo-VPC-RDS-Subnet-Group-${AWS::StackName}
      DBSubnetGroupName: !Sub Demo-VPC-RDS-Subnet-Group-${AWS::StackName}
      SubnetIds:
          - !Ref VPCPublicSubnet1Subnet
          - !Ref VPCPublicSubnet2Subnet
  DomainMembersSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Demo-VPC-Domain-Members-Security-Group-${AWS::StackName}
      GroupName: !Sub Demo-VPC-Domain-Members-Security-Group-${AWS::StackName}
      SecurityGroupIngress:
        - Description: All Local VPC Traffic
          FromPort: -1
          IpProtocol: "-1"
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: -1
        - Description: RDP Access
          FromPort: 3389
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 3389
        - Description: WinRM Access
          FromPort: 5985
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 5986
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-Domain-Members-Security-Group-${AWS::StackName}
      VpcId: !Ref VPC
  RdsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Demo-VPC-RDS-Security-Group-${AWS::StackName}
      GroupName: !Sub Demo-VPC-RDS-Security-Group-${AWS::StackName}
      SecurityGroupIngress:
        - Description: SQL Access
          FromPort: 1433
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 1433
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-RDS-Security-Group-${AWS::StackName}
      VpcId: !Ref VPC
  FsxSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Demo-VPC-FSx-Security-Group-${AWS::StackName}
      GroupName: !Sub Demo-VPC-FSx-Security-Group-${AWS::StackName}
      SecurityGroupIngress:
        - Description: FSx SMB Access
          FromPort: 445
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 445
        - Description: FSx WinRM Access
          FromPort: 5985
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 5986       
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-FSx-Security-Group-${AWS::StackName}
      VpcId: !Ref VPC
  R53SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Demo-VPC-R53-Outbound-Resolver-Security-Group-${AWS::StackName}
      GroupName: !Sub Demo-VPC-R53-Outbound-Resolver-Security-Group-${AWS::StackName}
      SecurityGroupEgress:
        - Description: DNS Access
          FromPort: 53
          IpProtocol: udp
          CidrIp: 0.0.0.0/0
          ToPort: 53
        - Description: DNS Access
          FromPort: 53
          IpProtocol: udp
          CidrIp: 0.0.0.0/0
          ToPort: 53          
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-R53-Outbound-Resolver-Security-Group-${AWS::StackName}
      VpcId: !Ref VPC   
  OnPremDomainControllerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Demo-VPC-Domain-Controllers-Security-Group-${AWS::StackName}
      GroupName: !Sub Demo-VPC-Domain-Controllers-Security-Group-${AWS::StackName}
      SecurityGroupIngress:
        - Description: DNS
          FromPort: 53
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 53
        - Description: DNS
          FromPort: 53
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 53
        - Description: Kerberos
          FromPort: 88
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 88
        - Description: Kerberos
          FromPort: 88
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 88
        - Description: Windows Time
          FromPort: 123
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 123
        - Description: RPC
          FromPort: 135
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 135
        - Description: Netlogon
          FromPort: 138
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 138
        - Description: LDAP
          FromPort: 389
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 389
        - Description: LDAP
          FromPort: 389
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 389
        - Description: SMB
          FromPort: 445
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 445
        - Description: SMB
          FromPort: 445
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 445
        - Description: Kerberos Set & Change Password
          FromPort: 464
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 464
        - Description: Kerberos Set & Change Password
          FromPort: 464
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 464
        - Description: LDAP over SSL
          FromPort: 636
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 636
        - Description: LDAP Global Catalog and GC with SSL
          FromPort: 3268
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 3269
        - Description: RDP Access
          FromPort: 3389
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 3389
        - Description: WinRM
          FromPort: 5985
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 5986
        - Description: SOAP ADWS
          FromPort: 9389
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 9389
        - Description: Random RPC
          FromPort: 49152
          IpProtocol: tcp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 65535
        - Description: Random RPC
          FromPort: 49152
          IpProtocol: udp
          CidrIp: !GetAtt VPC.CidrBlock
          ToPort: 65535
      Tags:
        - Key: Name
          Value: !Sub Domain Controllers Security Group ${AWS::StackName}
      VpcId: !Ref VPC
  OnPremDomainControllerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: "-1"
      Description: Security Group Rule between Domain Controllers
      FromPort: -1
      GroupId:
        Ref: OnPremDomainControllerSG
      SourceSecurityGroupId:
        Ref: OnPremDomainControllerSG
      ToPort: -1
  R53RROutbound:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: OUTBOUND
      IpAddresses:
        - SubnetId: !Ref VPCPublicSubnet1Subnet
        - SubnetId: !Ref VPCPublicSubnet2Subnet
      Name: !Sub Demo-VPC-R53-Outbound-Resolver-${AWS::StackName}
      SecurityGroupIds:
        - !Ref R53SG
      Tags:
        - Key: Name
          Value: !Sub Demo-VPC-R53-Outbound-Resolver-${AWS::StackName}
  AuditPolSsmAuto:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "0.3"
        description: Configure Kinesis Agent for Windows, Windows Auditing Policy, and deployment cleanup using SSM Automation
        parameters:
          ServerNetBIOSName:
            description: NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)
            type: String
          ServerRole:
            description: Role server will be (DomainController or CertificateAuthority)
            type: String
          StackName:
            description: Stack Name Input for cfn resource signal
            type: String
          VPCCIDR:
            description: CIDR Block for the VPC
            type: String
        mainSteps:
          - name: InstanceId
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: tag:Name
                  Values:
                    - "{{ServerNetBIOSName}}"
                - Name: tag:aws:cloudformation:stack-name
                  Values:
                    - "{{StackName}}"
                - Name: instance-state-name
                  Values:
                    - running
            outputs:
              - Name: InstanceId
                Selector: $.Reservations[0].Instances[0].InstanceId
                Type: String
            nextStep: configureInstance
          - name: configureInstance
            action: aws:runCommand
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{InstanceId.InstanceId}}"
              Parameters:
                commands: |-
                  Function Invoke-Cleanup {
                      [CmdletBinding()]
                      Param (
                          [Parameter(Mandatory = $true)][String]$VPCCIDR
                      )

                      Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                      Try {
                          Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR
                      } Catch [System.Exception] {
                          Write-Output "Failed allow WinRM Traffic from VPC CIDR $_"
                      }

                      Write-Output 'Removing DSC Configuration'
                      Try {
                          Remove-DscConfigurationDocument -Stage 'Current' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed build DSC Configuration $_"
                      }

                      Write-Output 'Re-enabling Windows Firewall'
                      Try {
                          Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled 'True' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed re-enable firewall $_"
                      }

                      Write-Output 'Removing build files'
                      Try {
                          Remove-Item -Path 'C:\Temp' -Recurse -Force -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed remove build files $_"
                      }

                      Write-Output 'Removing self signed cert'
                      Try {
                          $SelfSignedThumb = Get-ChildItem -Path 'cert:\LocalMachine\My\' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                          Remove-Item -Path "cert:\LocalMachine\My\$SelfSignedThumb" -DeleteKey -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed remove self signed cert $_"
                      }
                  }

                  Function Set-DscConfiguration {
                      [CmdletBinding()]
                      Param (
                          [Parameter(Mandatory = $true)][String]$ServerRole
                      )
                      Configuration ConfigInstance {
                          Import-DscResource -ModuleName 'AuditPolicyDsc', 'SChannelDsc'
                          Node LocalHost {
                              AuditPolicySubcategory CredentialValidationSuccess {
                                  Name      = 'Credential Validation'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory CredentialValidationFailure {
                                  Name      = 'Credential Validation'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherAccountLogonEventsSuccess {
                                  Name      = 'Other Account Logon Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory OtherAccountLogonEventsFailure {
                                  Name      = 'Other Account Logon Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ApplicationGroupManagementSuccess {
                                  Name      = 'Application Group Management'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ApplicationGroupManagementFailure {
                                  Name      = 'Application Group Management'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ComputerAccountManagementFailure {
                                  Name      = 'Computer Account Management'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory DistributionGroupManagementFailure {
                                  Name      = 'Distribution Group Management'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory OtherAccountManagementEventsSuccess {
                                  Name      = 'Other Account Management Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherAccountManagementEventsFailure {
                                  Name      = 'Other Account Management Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory SecurityGroupManagementSuccess {
                                  Name      = 'Security Group Management'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SecurityGroupManagementFailure {
                                  Name      = 'Security Group Management'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory UserAccountManagementSuccess {
                                  Name      = 'User Account Management'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory UserAccountManagementFailure {
                                  Name      = 'User Account Management'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory DPAPIActivitySuccess {
                                  Name      = 'DPAPI Activity'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory DPAPIActivityFailure {
                                  Name      = 'DPAPI Activity'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory PNPActivitySuccess {
                                  Name      = 'Plug and Play Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory PNPActivityFailure {
                                  Name      = 'Plug and Play Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ProcessCreationSuccess {
                                  Name      = 'Process Creation'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory ProcessCreationFailure {
                                  Name      = 'Process Creation'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ProcessTerminationSuccess {
                                  Name      = 'Process Termination'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory ProcessTerminationFailure {
                                  Name      = 'Process Termination'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory RPCEventsSuccess {
                                  Name      = 'RPC Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory RPCEventsFailure {
                                  Name      = 'RPC Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory TokenRightAdjustedSuccess {
                                  Name      = 'Token Right Adjusted Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory TokenRightAdjustedFailure {
                                  Name      = 'Token Right Adjusted Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory DirectoryServiceAccessSuccess {
                                  Name      = 'Directory Service Access'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory DirectoryServiceChangesFailure {
                                  Name      = 'Directory Service Changes'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory AccountLockoutSuccess {
                                  Name      = 'Account Lockout'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory AccountLockoutFailure {
                                  Name      = 'Account Lockout'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory UserDeviceClaimsSuccess {
                                  Name      = 'User / Device Claims'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory UserDeviceClaimsFailure {
                                  Name      = 'User / Device Claims'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory GroupMembershipSuccess {
                                  Name      = 'Group Membership'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory GroupMembershipFailure {
                                  Name      = 'Group Membership'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory IPsecExtendedModeSuccess {
                                  Name      = 'IPsec Extended Mode'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecExtendedModeFailure {
                                  Name      = 'IPsec Extended Mode'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecMainModeSuccess {
                                  Name      = 'IPsec Main Mode'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecMainModeFailure {
                                  Name      = 'IPsec Main Mode'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecQuickModeSuccess {
                                  Name      = 'IPsec Quick Mode'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecQuickModeFailure {
                                  Name      = 'IPsec Quick Mode'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory LogoffSuccess {
                                  Name      = 'Logoff'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory Logoffailure {
                                  Name      = 'Logoff'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory LogonSuccess {
                                  Name      = 'Logon'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory LogonFailure {
                                  Name      = 'Logon'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory NetworkPolicyServerSuccess {
                                  Name      = 'Network Policy Server'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory NetworkPolicyServerFailure {
                                  Name      = 'Network Policy Server'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherLogonLogoffEventsSuccess {
                                  Name      = 'Other Logon/Logoff Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherLogonLogoffEventsFailure {
                                  Name      = 'Other Logon/Logoff Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SpecialLogonSuccess {
                                  Name      = 'Special Logon'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SpecialLogonFailure {
                                  Name      = 'Special Logon'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ApplicationGeneratedSuccess {
                                  Name      = 'Application Generated'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory ApplicationGeneratedFailure {
                                  Name      = 'Application Generated'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory DetailedFileShareFailure {
                                  Name      = 'Detailed File Share'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FileShareSuccess {
                                  Name      = 'File Share'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FileShareFailure {
                                  Name      = 'File Share'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FileSystemSuccess {
                                  Name      = 'File System'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FileSystemFailure {
                                  Name      = 'File System'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FilteringPlatformConnectionSuccess {
                                  Name      = 'Filtering Platform Connection'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FilteringPlatformConnectionFailure {
                                  Name      = 'Filtering Platform Connection'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory FilteringPlatformPacketDropSuccess {
                                  Name      = 'Filtering Platform Packet Drop'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory FilteringPlatformPacketDropFailure {
                                  Name      = 'Filtering Platform Packet Drop'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory HandleManipulationSuccess {
                                  Name      = 'Handle Manipulation'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory HandleManipulationFailure {
                                  Name      = 'Handle Manipulation'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory KernelObjectSuccess {
                                  Name      = 'Kernel Object'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory KernelObjectFailure {
                                  Name      = 'Kernel Object'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory OtherObjectAccessEventsSuccess {
                                  Name      = 'Other Object Access Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherObjectAccessEventsFailure {
                                  Name      = 'Other Object Access Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory RegistrySuccess {
                                  Name      = 'Registry'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory RegistryFailure {
                                  Name      = 'Registry'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory RemovableStorageSuccess {
                                  Name      = 'Removable Storage'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory RemovableStorageFailure {
                                  Name      = 'Removable Storage'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory CentralAccessPolicyStagingSuccess {
                                  Name      = 'Central Policy Staging'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory CentralAccessPolicyStagingFailure {
                                  Name      = 'Central Policy Staging'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory AuditPolicyChangeSuccess {
                                  Name      = 'Audit Policy Change'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory AuditPolicyChangeFailure {
                                  Name      = 'Audit Policy Change'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory AuthenticationPolicyChangeSuccess {
                                  Name      = 'Authentication Policy Change'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory AuthenticationPolicyChangeFailure {
                                  Name      = 'Authentication Policy Change'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory AuthorizationPolicyChangeSuccess {
                                  Name      = 'Authorization Policy Change'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory AuthorizationPolicyChangeFailure {
                                  Name      = 'Authorization Policy Change'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory MPSSVCRule-LevelPolicyChangeSuccess {
                                  Name      = 'MPSSVC Rule-Level Policy Change'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory MPSSVCRule-LevelPolicyChangeFailure {
                                  Name      = 'MPSSVC Rule-Level Policy Change'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherPolicyChangeEventsSuccess {
                                  Name      = 'Other Policy Change Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory OtherPolicyChangeEventsFailure {
                                  Name      = 'Other Policy Change Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory NonSensitivePrivilegeUseSuccess {
                                  Name      = 'Non Sensitive Privilege Use'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory NonSensitivePrivilegeUseFailure {
                                  Name      = 'Non Sensitive Privilege Use'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory OtherPrivilegeUseEventsSuccess {
                                  Name      = 'Other Privilege Use Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory OtherPrivilegeUseEventsFailure {
                                  Name      = 'Other Privilege Use Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory SensitivePrivilegeUseSuccess {
                                  Name      = 'Sensitive Privilege Use'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SensitivePrivilegeUseFailure {
                                  Name      = 'Sensitive Privilege Use'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecDriverSuccess {
                                  Name      = 'IPsec Driver'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory IPsecDriverFailure {
                                  Name      = 'IPsec Driver'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherSystemEventsSuccess {
                                  Name      = 'Other System Events'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory OtherSystemEventsFailure {
                                  Name      = 'Other System Events'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SecurityStateChangeSuccess {
                                  Name      = 'Security State Change'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SecurityStateChangeFailure {
                                  Name      = 'Security State Change'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory SecuritySystemExtensionSuccess {
                                  Name      = 'Security System Extension'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SecuritySystemExtensionFailure {
                                  Name      = 'Security System Extension'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Absent'
                              }
                              AuditPolicySubcategory SystemIntegritySuccess {
                                  Name      = 'System Integrity'
                                  AuditFlag = 'Success'
                                  Ensure    = 'Present'
                              }
                              AuditPolicySubcategory SystemIntegrityFailure {
                                  Name      = 'System Integrity'
                                  AuditFlag = 'Failure'
                                  Ensure    = 'Present'
                              }
                              Protocol DisableSSLv3 {
                                  Protocol           = 'SSL 3.0'
                                  IncludeClientSide  = $true
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Protocol DisableTLS1 {
                                  Protocol           = 'TLS 1.0' 
                                  IncludeClientSide  = $true
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Protocol DisableTLS11 {
                                  Protocol           = 'TLS 1.1'
                                  IncludeClientSide  = $true
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Protocol EnableTLS12 {
                                  Protocol           = 'TLS 1.2'
                                  IncludeClientSide  = $true
                                  State              = 'Enabled'
                                  #RebootWhenRequired = $true
                              }
                              Protocol EnableTLS13 {
                                  Protocol           = 'TLS 1.3'
                                  IncludeClientSide  = $true
                                  State              = 'Enabled'
                                  #RebootWhenRequired = $true
                              }    
                              Cipher DisableRC4-40 {
                                  Cipher             = 'RC4 40/128'
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Cipher DisableRC4-56 {
                                  Cipher             = 'RC4 56/128'
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Cipher DisableRC4-64 {
                                  Cipher             = 'RC4 64/128'
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Cipher DisableRC4-128 {
                                  Cipher             = 'RC4 128/128'
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Cipher Disable3Des {
                                  Cipher             = 'Triple DES 168'
                                  State              = 'Disabled'
                                  #RebootWhenRequired = $true
                              }
                              Cipher EnableAES128 {
                                  Cipher             = 'AES 128/128'
                                  State              = 'Enabled'
                                  #RebootWhenRequired = $true
                              }
                              Cipher EnableAES256 {
                                  Cipher             = 'AES 256/256'
                                  State              = 'Enabled'
                                  #RebootWhenRequired = $true
                              }
                              CipherSuites 3DESCipher {
                                  IsSingleInstance   = 'Yes'
                                  CipherSuitesOrder  = 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'
                                  Ensure             = 'Absent'
                                  #RebootWhenRequired = $true
                              }
                              SChannelSettings 'ConfigureSChannel' {
                                  IsSingleInstance              = 'Yes'
                                  TLS12State                    = 'Enabled'
                                  WinHttpDefaultSecureProtocols = @('TLS1.2')
                                  #RebootWhenRequired            = $true
                              }
                              If ($ServerRole -eq 'DomainController') {
                                  AuditPolicySubcategory KerberosAuthenticationServiceSuccess {
                                      Name = 'Kerberos Authentication Service'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory KerberosAuthenticationServiceFailure {
                                      Name = 'Kerberos Authentication Service'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory KerberosServiceTicketOperationsSuccess {
                                      Name = 'Kerberos Service Ticket Operations'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory KerberosServiceTicketOperationsFailure {
                                      Name = 'Kerberos Service Ticket Operations'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory ComputerAccountManagementSuccess {
                                      Name = 'Computer Account Management'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DistributionGroupManagementSuccess {
                                      Name = 'Distribution Group Management'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DetailedDirectoryServiceReplicationSuccess {
                                      Name = 'Detailed Directory Service Replication'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DetailedDirectoryServiceReplicationFailure {
                                      Name = 'Detailed Directory Service Replication'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DirectoryServiceAccessFailure {
                                      Name = 'Directory Service Access'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DirectoryServiceChangesSuccess {
                                      Name = 'Directory Service Changes'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DirectoryServiceReplicationSuccess {
                                      Name = 'Directory Service Replication'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory DirectoryServiceReplicationFailure {
                                      Name = 'Directory Service Replication'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Present'
                                  }
                                  
                                  AuditPolicySubcategory DetailedFileShareSuccess {
                                      Name = 'Detailed File Share'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                              } Else {
                                  AuditPolicySubcategory KerberosAuthenticationServiceSuccess {
                                      Name = 'Kerberos Authentication Service'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory KerberosAuthenticationServiceFailure {
                                      Name = 'Kerberos Authentication Service'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory KerberosServiceTicketOperationsSuccess {
                                      Name = 'Kerberos Service Ticket Operations'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory KerberosServiceTicketOperationsFailure {
                                      Name = 'Kerberos Service Ticket Operations'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory ComputerAccountManagementSuccess {
                                      Name = 'Computer Account Management'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DistributionGroupManagementSuccess {
                                      Name = 'Distribution Group Management'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DetailedDirectoryServiceReplicationSuccess {
                                      Name = 'Detailed Directory Service Replication'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DetailedDirectoryServiceReplicationFailure {
                                      Name = 'Detailed Directory Service Replication'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DirectoryServiceAccessFailure {
                                      Name = 'Directory Service Access'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DirectoryServiceChangesSuccess {
                                      Name = 'Directory Service Changes'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DirectoryServiceReplicationSuccess {
                                      Name = 'Directory Service Replication'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DirectoryServiceReplicationFailure {
                                      Name = 'Directory Service Replication'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory DetailedFileShareSuccess {
                                      Name = 'Detailed File Share'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                              }
                              If ($ServerRole -eq 'CertificateAuthority') {
                                  AuditPolicySubcategory CertificationServicesSuccess {
                                      Name = 'Certification Services'
                                      AuditFlag = 'Success'
                                      Ensure = 'Present'
                                  }
                                  AuditPolicySubcategory CertificationServicesFailure {
                                      Name = 'Certification Services'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Present'
                                  }    
                              } Else { 
                                  AuditPolicySubcategory CertificationServicesSuccess {
                                      Name = 'Certification Services'
                                      AuditFlag = 'Success'
                                      Ensure = 'Absent'
                                  }
                                  AuditPolicySubcategory CertificationServicesFailure {
                                      Name = 'Certification Services'
                                      AuditFlag = 'Failure'
                                      Ensure = 'Absent'
                                  }
                              }
                          }
                      }
                      Write-Output 'Generating MOF file'
                      $Null = ConfigInstance -OutputPath 'C:\Temp\AuditConfigInstance' -ConfigurationData $ConfigurationData
                  }

                  Function Invoke-DscStatusCheck {
                      $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'
                      If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                          Exit 3010
                      } Else {
                          Write-Output 'DSC Config Completed'
                      }
                  }

                  $AuditConfigPresent = Test-Path -Path 'C:\Temp\AuditConfigInstance'
                  Set-DscConfiguration -ServerRole '{{ServerRole}}'

                  If ($AuditConfigPresent) {
                      Start-DscConfiguration -UseExisting -Wait -Verbose -Force
                  } Else {
                      Start-DscConfiguration 'C:\Temp\AuditConfigInstance' -Wait -Verbose -Force
                  }

                  Invoke-DscStatusCheck

                  Try {
                      $Version = (Invoke-WebRequest 'https://s3-us-west-2.amazonaws.com/kinesis-agent-windows/downloads/packages.json' -Headers @{"Accept"="application/json"} -UseBasicParsing | Select-Object -ExpandProperty 'Content' | ConvertFrom-Json | Select-Object -ExpandProperty 'Packages').Version[0]
                  } Catch [System.Exception] {
                      Write-Output "Failed to get latest KTAP version $_"
                      Exit 1
                  }

                  (New-Object -TypeName 'System.Net.WebClient').DownloadFile("https://s3-us-west-2.amazonaws.com/kinesis-agent-windows/downloads/AWSKinesisTap.$Version.msi", 'C:\Temp\AWSKinesisTap.msi')

                  Write-Output 'Installing KinesisTap'
                  $Process = Start-Process -FilePath 'msiexec.exe' -ArgumentList '/I C:\Temp\AWSKinesisTap.msi /quiet /l C:\Temp\ktap-install-log.txt' -NoNewWindow -PassThru -Wait -ErrorAction Stop

                  If ($Process.ExitCode -ne 0) {
                      Write-Output "Error installing KinesisTap -exit code $($Process.ExitCode)"
                      Exit 1
                  }

                  If ($ServerRole -eq 'DomainController') {
                      $DcCategories = @(
                          @{
                              'Category' = 'ADWS'
                              'Counters' = @(
                                  @{
                                      'Counter' = 'Active Web Service Sessions'
                                      'Unit'    = 'Count'
                                  },
                                  @{
                                      'Counter' = 'ChangePassword Operations Per Second'
                                      'Unit'    = 'Count/Second'
                                  }
                                  @{
                                      'Counter' = 'Delete Operations Per Second'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'SetPassword Operations Per Second'
                                      'Unit'    = 'Count/Second'
                                  }
                              )
                          },
                          @{
                              'Category'  = 'Database ==> Instances'
                              'Instances' = 'NTDSA'
                              'Counters'  = @(
                                  @{
                                      'Counter' = 'Database Cache % Hit'
                                      'Unit'    = 'Percent'
                                  },
                                  @{
                                      'Counter' = 'Database Cache Size (MB)'
                                      'Unit'    = 'Megabytes'
                                  },
                                  @{
                                      'Counter' = 'I/O Database Reads Average Latency'
                                      'Unit'    = 'Milliseconds'
                                  },
                                  @{
                                      'Counter' = 'I/O Database Reads/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'I/O Log Writes Average Latency'
                                      'Unit'    = 'Milliseconds'
                                  },
                                  @{
                                      'Counter' = 'I/O Database Writes/sec'
                                      'Unit'    = 'Count/Second'
                                  }
                              )
                          },
                          @{
                              'Category'  = 'DFS Replication Service Volumes'
                              'Instances' = '*'
                              'Counters'  = @(
                                  @{
                                      'Counter' = 'USN Journal Unread Percentage'
                                      'Unit'    = 'Percent'
                                  }
                              )
                          },
                          @{
                              'Category' = 'DNS'
                              'Counters' = @(
                                  @{
                                      'Counter' = 'Dynamic Update Rejected'
                                      'Unit'    = 'Count'
                                  },
                                  @{
                                      'Counter' = 'Recursive Queries/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'Recursive Query Failure/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'Secure Update Failure'
                                      'Unit'    = 'Count'
                                  },
                                  @{
                                      'Counter' = 'TCP Query Received/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'Total Query Received/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'Total Response Sent/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'UDP Query Received/sec'
                                      'Unit'    = 'Count/Second'
                                  }
                              )
                          },
                          @{
                              'Category' = 'NTDS'
                              'Counters' = @(
                                  @{
                                      'Counter' = 'ATQ Estimated Queue Delay'
                                      'Unit'    = 'Milliseconds'
                                  },
                                  @{
                                      'Counter' = 'ATQ Request Latency'
                                      'Unit'    = 'Milliseconds'
                                  },
                                  @{
                                      'Counter' = 'DRA Pending Replication Operations'
                                      'Unit'    = 'Count'
                                  },
                                  @{
                                      'Counter' = 'DRA Pending Replication Synchronizations'
                                      'Unit'    = 'Count'
                                  },
                                  @{
                                      'Counter' = 'DS Directory Reads/Sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'DS Directory Searches/Sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'DS Directory Writes/Sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'LDAP Bind Time'
                                      'Unit'    = 'Milliseconds'
                                  },
                                  @{
                                      'Counter' = 'LDAP Client Sessions'
                                      'Unit'    = 'Count'
                                  },
                                  @{
                                      'Counter' = 'LDAP Searches/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'LDAP Successful Binds/sec'
                                      'Unit'    = 'Count/Second'
                                  }
                              )
                          },
                          @{
                              'Category' = 'Security System-Wide Statistics'
                              'Counters' = @(
                                  @{
                                      'Counter' = 'Kerberos Authentications'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'NTLM Authentications'
                                      'Unit'    = 'Count/Second'
                                  }
                              )
                          }
                      )

                      $DcSources = @(
                          @{
                              'Id'         = 'DFSReplicationLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'DFS Replication'
                          },
                          @{
                              'Id'         = 'DirectoryServiceLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Directory Service'
                          },
                          @{
                              'Id'         = 'DNSServerLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'DNS Server'
                          },
                          @{
                              'Id'         = 'DNSServerAuditLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Microsoft-Windows-DNSServer/Audit'
                          },
                          @{
                              'Id'         = 'KerberosOperationalLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Microsoft-Windows-Kerberos/Operational'
                          },
                          @{
                              'Id'         = 'Kerberos-Key-Distribution-CenterOperationalLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Microsoft-Windows-Kerberos-Key-Distribution-Center/Operational'
                          },
                          @{
                              'Id'         = 'NTLMOperationalLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Microsoft-Windows-NTLM/Operational'
                          },
                          @{
                              'Id'         = 'Security-NetlogonOperationalLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Microsoft-Windows-Security-Netlogon/Operational'
                          },
                          @{
                              'Id'             = 'DNSLogs'
                              'SourceType'     = 'DirectorySource'
                              'Directory'      = 'C:\DnsLogs'
                              'FileNameFilter' = '*.log|*.txt'
                              'RecordParser'   = 'SingleLine'
                          }
                      )

                      $DcSinks = @(
                          @{
                              'Id'             = 'DFSReplicationLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'DFSReplicationLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'DirectoryServiceLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'DirectoryServiceLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'DNSServerLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'DNSServerLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'DNSServerAuditLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'DNSServerAuditLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'KerberosOperationalLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'KerberosOperationalLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'Kerberos-Key-Distribution-CenterOperationalLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'Kerberos-Key-Distribution-CenterOperationalLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'NTLMOperationalLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'NTLMOperationalLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'Security-NetlogonOperationalLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'Security-NetlogonOperationalLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'DNSLogs-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'DNSLogs-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          }
                      )

                      $DcPipes = @(
                          @{
                              'Id'        = 'DFSReplicationLogToCloudWatch'
                              'SourceRef' = 'DFSReplicationLog'
                              'SinkRef'   = 'DFSReplicationLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'DirectoryServiceLogToCloudWatch'
                              'SourceRef' = 'DirectoryServiceLog'
                              'SinkRef'   = 'DirectoryServiceLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'DNSServerLogToCloudWatch'
                              'SourceRef' = 'DNSServerLog'
                              'SinkRef'   = 'DNSServerLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'DNSServerAuditLogToCloudWatch'
                              'SourceRef' = 'DNSServerAuditLog'
                              'SinkRef'   = 'DNSServerAuditLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'KerberosOperationalLogToCloudWatch'
                              'SourceRef' = 'KerberosOperationalLog'
                              'SinkRef'   = 'KerberosOperationalLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'Kerberos-Key-Distribution-CenterOperationalLogToCloudWatch'
                              'SourceRef' = 'Kerberos-Key-Distribution-CenterOperationalLog'
                              'SinkRef'   = 'Kerberos-Key-Distribution-CenterOperationalLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'NTLMOperationalLogToCloudWatch'
                              'SourceRef' = 'NTLMOperationalLog'
                              'SinkRef'   = 'NTLMOperationalLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'Security-NetlogonOperationalLogToCloudWatch'
                              'SourceRef' = 'Security-NetlogonOperationalLog'
                              'SinkRef'   = 'Security-NetlogonOperationalLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'DNSLogsToCloudWatch'
                              'SourceRef' = 'DNSLogs'
                              'SinkRef'   = 'DNSLogs-CloudWatchLogsSink'
                          }
                      )
                  }

                  If ($ServerRole -eq 'CertificateAuthority') {
                      $CaCategories = @(
                          @{
                              'Category'  = 'Certification Authority'
                              'Instances' = '*'
                              'Counters'  = @(
                                  @{
                                      'Counter' = 'Failed Request/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'Request/sec'
                                      'Unit'    = 'Count/Second'
                                  },
                                  @{
                                      'Counter' = 'Request processing time (ms)'
                                      'Unit'    = 'Milliseconds'
                                  }
                              )
                          },
                          @{
                              'Category'  = 'Certification Authority Connections'
                              'Instances' = '*'
                              'Counters'  = @(
                                  @{
                                      'Counter' = 'Active connections'
                                      'Unit'    = 'Count'
                                  }
                              )
                          }
                      )
                  }

                  $KenesisAgentSettings = @{
                      'Sources'    = @(
                          @{
                              'Id'         = 'PerformanceCounter'
                              'SourceType' = 'WindowsPerformanceCounterSource'
                              'Categories' = @(
                                  @{
                                      'Category'  = 'ENA Packets Shaping'
                                      'Instances' = 'ENA #1'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = 'Aggregate inbound BW allowance exceeded'
                                              'Unit'    = 'Count'
                                          },
                                          @{
                                              'Counter' = 'Aggregate outbound BW allowance exceeded'
                                              'Unit'    = 'Count'
                                          },
                                          @{
                                              'Counter' = 'Connection tracking allowance exceeded'
                                              'Unit'    = 'Count'
                                          },
                                          @{
                                              'Counter' = 'Link local packet rate allowance exceeded'
                                              'Unit'    = 'Count'
                                          },
                                          @{
                                              'Counter' = 'PPS allowance exceeded'
                                              'Unit'    = 'Count'
                                          }
                                      )
                                  },
                                  @{
                                      'Category'  = 'LogicalDisk'
                                      'Instances' = 'D:'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = '% Free Space'
                                              'Unit'    = 'Percent'
                                          },
                                          @{
                                              'Counter' = 'Avg. Disk Queue Length'
                                              'Unit'    = 'Count'
                                          }
                                      )
                                  },
                                  @{
                                      'Category'  = 'LogicalDisk'
                                      'Instances' = 'C:'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = '% Free Space'
                                              'Unit'    = 'Percent'
                                          },
                                          @{
                                              'Counter' = 'Avg. Disk Queue Length'
                                              'Unit'    = 'Count'
                                          }
                                      )
                                  },
                                  @{
                                      'Category' = 'Memory'
                                      'Counters' = @(
                                          @{
                                              'Counter' = '% Committed Bytes in Use'
                                              'Unit'    = 'Percent'
                                          },
                                          @{
                                              'Counter' = 'Available MBytes'
                                              'Unit'    = 'Megabytes'
                                          },
                                          @{
                                              'Counter' = 'Long-Term Average Standby Cache Lifetime (s)'
                                              'Unit'    = 'Seconds'
                                          }
                                      )
                                  },
                                  @{
                                      'Category'  = 'Network Interface'
                                      'Instances' = 'Amazon Elastic Network Adapter'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = 'Bytes Received/sec'
                                              'Unit'    = 'Count/Second'
                                          },
                                          @{
                                              'Counter' = 'Bytes Sent/sec'
                                              'Unit'    = 'Count/Second'
                                          },
                                          @{
                                              'Counter' = 'Current Bandwidth'
                                              'Unit'    = 'Bits/Second'
                                          }
                                      )
                                  },
                                  @{
                                      'Category'  = 'PhysicalDisk'
                                      'Instances' = '0 C:'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = 'Avg. Disk Queue Length'
                                              'Unit'    = 'Count'
                                          }
                                      )
                                  },
                                  @{
                                      'Category'  = 'PhysicalDisk'
                                      'Instances' = '1 D:'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = 'Avg. Disk Queue Length'
                                              'Unit'    = 'Count'
                                          }
                                      )
                                  },
                                  @{
                                      'Category'  = 'Processor'
                                      'Instances' = '*'
                                      'Counters'  = @(
                                          @{
                                              'Counter' = '% Processor Time'
                                              'Unit'    = 'Percent'
                                          }
                                      )
                                  }
                                  $DcCategories
                                  $CaCategories
                              )
                          },
                          @{
                              'Id'         = 'ApplicationLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Application'
                          },
                          @{
                              'Id'         = 'SecurityLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Security'
                          },
                          @{
                              'Id'         = 'SystemLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'System'
                          },
                          @{
                              'Id'         = 'CertificateServicesClient-Lifecycle-SystemOperationalLog'
                              'SourceType' = 'WindowsEventLogSource'
                              'LogName'    = 'Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational'
                          }
                          $DcSources
                      )
                      'Sinks'      = @(
                          @{
                              'Namespace' = 'EC2-Domain-Member-Metrics'
                              'Region'    = 'ReplaceMe'
                              'Id'        = 'CloudWatchSink'
                              'Interval'  = '60'
                              'SinkType'  = 'CloudWatch'
                          },
                          @{
                              'Id'             = 'ApplicationLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'ApplicationLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'SecurityLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'SecurityLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'SystemLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'SystemLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          },
                          @{
                              'Id'             = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-CloudWatchLogsSink'
                              'SinkType'       = 'CloudWatchLogs'
                              'BufferInterval' = '60'
                              'LogGroup'       = '{ComputerName}-Log-Group'
                              'LogStream'      = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-Stream'
                              'Region'         = 'ReplaceMe'
                              'Format'         = 'json'
                          }
                          $DcSinks
                      )
                      'Pipes'      = @(
                          @{
                              'Id'        = 'PerformanceCounterToCloudWatch'
                              'SourceRef' = 'PerformanceCounter'
                              'SinkRef'   = 'CloudWatchSink'
                          },
                          @{
                              'Id'        = 'ApplicationLogToCloudWatch'
                              'SourceRef' = 'ApplicationLog'
                              'SinkRef'   = 'ApplicationLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'SecurityLogToCloudWatch'
                              'SourceRef' = 'SecurityLog'
                              'SinkRef'   = 'SecurityLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'SystemLogToCloudWatch'
                              'SourceRef' = 'SystemLog'
                              'SinkRef'   = 'SystemLog-CloudWatchLogsSink'
                          },
                          @{
                              'Id'        = 'CertificateServicesClient-Lifecycle-SystemOperationalLogToCloudWatch'
                              'SourceRef' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog'
                              'SinkRef'   = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-CloudWatchLogsSink'
                          }
                          $DcPipes
                      )
                      'SelfUpdate' = 0
                  }

                  Write-Output 'Getting region'
                  Try {
                      [string]$Token = Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token-ttl-seconds' = '3600' } -Method 'PUT' -Uri 'http://169.254.169.254/latest/api/token' -UseBasicParsing -ErrorAction Stop
                      $Region = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $Token } -Method 'GET' -Uri 'http://169.254.169.254/latest/dynamic/instance-identity/document' -UseBasicParsing -ErrorAction Stop | Select-Object -ExpandProperty 'Region').ToUpper()
                  } Catch [System.Exception] {
                      Write-Output "Failed to get region $_"
                      Exit 1
                  }

                  $KenesisAgentSettings.Sinks | Where-Object { $_.Region -eq 'ReplaceMe' } | ForEach-Object { $_.Region = $Region }

                  Write-Output 'Exporting appsettings.json content'
                  Try {
                      $KenesisAgentSettings | ConvertTo-Json -Depth 10 -ErrorAction Stop | Out-File 'C:\Program Files\Amazon\AWSKinesisTap\appsettings.json' -Encoding 'ascii' -ErrorAction Stop
                  } Catch [System.Exception] {
                      Write-Output "Unable to export appsettings.json $_"
                      Exit 1
                  }

                  Write-Output 'Restarting AWSKinesisTap service'
                  Try {
                      Restart-Service 'AWSKinesisTap' -Force
                  } Catch [System.Exception] {
                      Write-Output "Unable to restart AWSKinesisTap $_"
                      Exit 1
                  }

                  Invoke-Cleanup -VPCCIDR '{{VPCCIDR}}'
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: true
                CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
      DocumentType: Automation
      Tags:
        - Key: StackName
          Value:
            Ref: AWS::StackName
  PkiSsmAuto:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "0.3"
        description: Deploy Enterpise CA
        parameters:
            AdministratorSecretName:
                description: AWS Secrets Parameter Name
                type: String
            DeploymentType:
                description: Type of workload being deployed
                type: String
            DomainNetBIOSName:
                description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES
                type: String
            DomainType:  
                description: Type of domain PKI will be integrated with
                type: String
            ServerNetBIOSName:
                description: NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)
                type: String
            StackName:
                description: Stack Name Input for cfn resource signal
                type: String
            VPCCIDR:
                description: CIDR Block for the VPC
                type: String
        mainSteps:
          - name: InstanceId
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: tag:Name
                  Values:
                    - "{{ServerNetBIOSName}}"
                - Name: tag:aws:cloudformation:stack-name
                  Values:
                    - "{{StackName}}"
                - Name: instance-state-name
                  Values:
                    - running
            outputs:
              - Name: InstanceId
                Selector: $.Reservations[0].Instances[0].InstanceId
                Type: String
            nextStep: configureInstance
          - name: configureInstance
            action: aws:runCommand
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{InstanceId.InstanceId}}"
              Parameters:
                commands: |-
                  Function Get-SecretInfo {
                      [CmdletBinding()]
                      Param (
                          [Parameter(Mandatory = $True)][String]$Domain,
                          [Parameter(Mandatory = $True)][String]$SecretArn
                      )

                      Write-Output "Getting $SecretArn Secret"
                      Try {
                          $SecretContent = Get-SECSecretValue -SecretId $SecretArn -ErrorAction Stop | Select-Object -ExpandProperty 'SecretString' | ConvertFrom-Json -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to get $SecretArn Secret $_"
                          Exit 1
                      }

                      Write-Output 'Creating PSCredential object from Secret'
                      $Username = $SecretContent.username
                      $UserPassword = ConvertTo-SecureString ($SecretContent.password) -AsPlainText -Force
                      $DomainCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ("$Domain\$Username", $UserPassword)
                      $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ($Username, $UserPassword)

                      $Output = [PSCustomObject][Ordered]@{
                          'Credentials'       = $Credentials
                          'DomainCredentials' = $DomainCredentials
                          'Username'          = $Username
                          'UserPassword'      = $UserPassword
                      }

                      Return $Output
                  }

                  Function Invoke-EnterpriseCaConfig {
                      [CmdletBinding()]
                      Param (
                          [Parameter(Mandatory = $true)][System.Management.Automation.PSCredential]$Credentials,
                          [Parameter(Mandatory = $true)][String]$DomainType,
                          [Parameter(Mandatory = $true)][String]$EntCaCommonName,
                          [Parameter(Mandatory = $true)][ValidateSet('SHA256', 'SHA384', 'SHA512')][String]$EntCaHashAlgorithm,
                          [Parameter(Mandatory = $true)][ValidateSet('2048', '4096')][String]$EntCaKeyLength,
                          [Parameter(Mandatory = $true)][String]$EntCaValidityPeriodUnits,
                          [Parameter(Mandatory = $true)][String]$VPCCIDR
                      )

                      $CompName = $env:COMPUTERNAME
                      $Folders = @(
                          'D:\Pki\Req',
                          'D:\ADCS\DB',
                          'D:\ADCS\Log'
                      )
                      $FilePath = 'D:\Pki'
                      $Principals = @(
                          'ANONYMOUS LOGON',
                          'EVERYONE'
                      )

                      Write-Output 'Installing Windows Features'
                      Try {
                          Install-WindowsFeature -Name 'Adcs-Cert-Authority', 'RSAT-AD-Tools', 'RSAT-DNS-Server', 'Web-WebServer' -IncludeManagementTools -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to install Windows Features $_"
                          Exit 1
                      }

                      Write-Output 'Getting AD domain'
                      Try {
                          $Domain = Get-ADDomain -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to get AD domain $_"
                          Exit 1
                      }
                      $BaseDn = $Domain | Select-Object -ExpandProperty 'DistinguishedName'
                      $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'
                      $Netbios = $Domain | Select-Object -ExpandProperty 'NetBIOSName'

                      Write-Output 'Getting a domain controller to perform actions against'
                      Try {
                          $DC = Get-ADDomainController -Discover -ForceDiscover -ErrorAction Stop | Select-Object -ExpandProperty 'HostName'
                      } Catch [System.Exception] {
                          Write-Output "Failed to get a domain controller $_"
                          Exit 1
                      }

                      $Counter = 0
                      Do {
                          $ARecordPresent = Resolve-DnsName -Name "$CompName.$FQDN" -DnsOnly -Server $DC -ErrorAction SilentlyContinue
                          If (-not $ARecordPresent) {
                              $Counter ++
                              Write-Output 'A record missing, registering it.'
                              Register-DnsClient
 
                          }
                      } Until ($ARecordPresent -or $Counter -eq 12)

                      If ($Counter -ge 12) {
                          Write-Output 'A record never created'
                          Exit 1
                      }

                      If ($DomainType -eq 'AWSManagedAD') {
                          Set-CredSSP -Action 'Enable'
                      }

                      Write-Output 'Creating PKI CNAME record'
                      $Counter = 0
                      Do {
                          $CnameRecordPresent = Resolve-DnsName -Name "PKI.$FQDN" -DnsOnly -Server $DC -ErrorAction SilentlyContinue
                          If (-not $CnameRecordPresent) {
                              $Counter ++
                              Write-Output 'CNAME record missing, creating it'
                              $HostNameAlias = "$CompName.$FQDN"
                              If ($DomainType -eq 'AWSManagedAD') {
                                  Invoke-Command -Authentication 'CredSSP' -ComputerName $env:COMPUTERNAME -Credential $Credentials -ScriptBlock { Add-DnsServerResourceRecordCName -Name 'PKI' -ComputerName $using:DC -HostNameAlias $using:HostNameAlias -ZoneName $using:FQDN }
                              } Else {
                                  Invoke-Command -ComputerName $DC -Credential $Credentials -ScriptBlock { Add-DnsServerResourceRecordCName -Name 'PKI' -HostNameAlias $using:HostNameAlias -ZoneName $using:FQDN }
                              }

                              If ($Counter -gt '1') {
                                  Start-Sleep -Seconds 10
                              }
                          }
                      } Until ($CnameRecordPresent -or $Counter -eq 12)

                      If ($DomainType -eq 'AWSManagedAD') {  
                          Set-CredSSP -Action 'Disable'
                      }

                      If ($Counter -ge 12) {
                          Write-Output 'CNAME record never created'
                          Exit 1
                      }

                      Write-Output 'Creating PKI folders'
                      Foreach ($Folder in $Folders) {
                          $PathPresent = Test-Path -Path $Folder -ErrorAction SilentlyContinue
                          If (-not $PathPresent) {
                              Try {
                                  $Null = New-Item -Path $Folder -Type 'Directory' -ErrorAction Stop
                              } Catch [System.Exception] {
                                  Write-Output "Failed to create $Folder directory $_"
                                  Exit 1
                              }
                          } 
                      }

                      Write-Output 'Example CPS statement' | Out-File 'D:\Pki\cps.txt'

                      Write-Output 'Sharing PKI folder'
                      $SharePresent = Get-SmbShare -Name 'Pki' -ErrorAction SilentlyContinue
                      If (-not $SharePresent) {
                          Try {
                              $Null = New-SmbShare -Name 'Pki' -Path 'D:\Pki' -FullAccess 'SYSTEM', "$Netbios\Domain Admins" -ChangeAccess "$Netbios\Cert Publishers" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to create PKI SMB Share $_"
                              Exit 1
                          }
                      }

                      Write-Output 'Creating PKI IIS virtual directory'
                      $VdPresent = Get-WebVirtualDirectory -Name 'Pki'
                      If (-not $VdPresent) {
                          Try {
                              $Null = New-WebVirtualDirectory -Site 'Default Web Site' -Name 'Pki' -PhysicalPath 'D:\Pki' -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to create PKI IIS virtual directory $_"
                              Exit 1
                          }
                      }

                      Write-Output 'Setting PKI IIS virtual directory requestFiltering'
                      Try {
                          Set-WebConfigurationProperty -Filter '/system.webServer/security/requestFiltering' -Name 'allowDoubleEscaping' -Value 'true' -PSPath 'IIS:\Sites\Default Web Site\Pki' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to set PKI IIS virtual directory requestFiltering $_"
                          Exit 1
                      }

                      Write-Output 'Setting PKI IIS virtual directory directoryBrowse'
                      Try {
                          Set-WebConfigurationProperty -Filter '/system.webServer/directoryBrowse' -Name 'enabled' -Value 'true' -PSPath 'IIS:\Sites\Default Web Site\Pki' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to set PKI IIS virtual directory directoryBrowse $_"
                          Exit 1
                      }

                      Write-Output 'Setting PKI folder file system ACLs'
                      Foreach ($Princ in $Principals) {
                          $Principal = New-Object -TypeName 'System.Security.Principal.NTAccount'($Princ)
                          $Perms = [System.Security.AccessControl.FileSystemRights]'Read, ReadAndExecute, ListDirectory'
                          $Inheritance = [System.Security.AccessControl.InheritanceFlags]::'ContainerInherit', 'ObjectInherit'
                          $Propagation = [System.Security.AccessControl.PropagationFlags]::'None'
                          $Access = [System.Security.AccessControl.AccessControlType]::'Allow'
                          $AccessRule = New-Object -TypeName 'System.Security.AccessControl.FileSystemAccessRule'($Principal, $Perms, $Inheritance, $Propagation, $Access) 
                          Try {
                              $Acl = Get-Acl -Path $FilePath -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get ACL for PKI directory $_"
                              Exit 1
                          }
                          $Acl.AddAccessRule($AccessRule)
                          Try {
                              Set-Acl -Path $FilePath -AclObject $Acl -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to set ACL for PKI directory $_"
                              Exit 1
                          }
                      }

                      Write-Output 'Resetting IIS service'
                      Try {
                          & iisreset.exe > $null
                      } Catch [System.Exception] {
                          Write-Output "Failed to reset IIS service $_"
                          Exit 1
                      }

                      $URL = "URL=http://$CompName.$FQDN/pki/cps.txt"

                      $Inf = @(
                          '[Version]',
                          'Signature="$Windows NT$"',
                          '[PolicyStatementExtension]',
                          'Policies=InternalPolicy',
                          '[InternalPolicy]',
                          'OID=1.2.3.4.1455.67.89.5', 
                          'Notice="Legal Policy Statement"',
                          $URL
                          '[Certsrv_Server]',
                          "RenewalKeyLength=$EntCaKeyLength",
                          'RenewalValidityPeriod=Years',
                          "RenewalValidityPeriodUnits=$EntCaValidityPeriodUnits",
                          'CRLPeriod=Weeks',
                          'CRLPeriodUnits=1',
                          'CRLDeltaPeriod=Days',  
                          'CRLDeltaPeriodUnits=0',
                          'LoadDefaultTemplates=0',
                          'AlternateSignatureAlgorithm=0',
                          '[CRLDistributionPoint]',
                          '[AuthorityInformationAccess]'
                      )

                      Write-Output 'Creating CAPolicy.inf'
                      Try {
                          $Inf | Out-File -FilePath 'C:\Windows\CAPolicy.inf' -Encoding 'ascii'
                      } Catch [System.Exception] {
                          Write-Output "Failed to create CAPolicy.inf $_"
                          Exit 1
                      }

                      Write-Output 'Installing Enterprise Root CA'
                      Try {
                          $Null = Install-AdcsCertificationAuthority -CAType 'EnterpriseRootCA' -CACommonName $EntCaCommonName -KeyLength $EntCaKeyLength -HashAlgorithm $EntCaHashAlgorithm -CryptoProviderName 'RSA#Microsoft Software Key Storage Provider' -ValidityPeriod 'Years' -ValidityPeriodUnits $EntCaValidityPeriodUnits -DatabaseDirectory 'D:\ADCS\DB' -LogDirectory 'D:\ADCS\Log' -Force -ErrorAction Stop -Credential $Credentials
                      } Catch [System.Exception] {
                          Write-Output "Failed to install Enterprise Root CA $_"
                          Exit 1
                      }

                      $CDP = "http://$CompName.$FQDN/pki/<CaName><CRLNameSuffix><DeltaCRLAllowed>.crl"
                      $AIA = "http://$CompName.$FQDN/pki/<ServerDNSName>_<CaName><CertificateName>.crt"

                      Write-Output 'Configuring CRL distro points'
                      Try {
                          $Null = Get-CACRLDistributionPoint | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CACRLDistributionPoint -Force -ErrorAction Stop
                          $Null = Add-CACRLDistributionPoint -Uri $CDP -AddToCertificateCDP -Force -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to configure CRL Distro $_"
                          Exit 1
                      }

                      Write-Output 'Configuring AIA distro points'
                      Try {
                          $Null = Get-CAAuthorityInformationAccess | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CAAuthorityInformationAccess -Force -ErrorAction Stop
                          $Null = Add-CAAuthorityInformationAccess -AddToCertificateAia -Uri $AIA -Force -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to configure AIA Distro $_"
                          Exit 1
                      }

                      Write-Output 'Configuring Enterprise CA'
                      & certutil.exe -setreg CA\CRLOverlapPeriodUnits '12' > $null
                      & certutil.exe -setreg CA\CRLOverlapPeriod 'Hours' > $null
                      & certutil.exe -setreg CA\ValidityPeriodUnits '5' > $null
                      & certutil.exe -setreg CA\ValidityPeriod 'Years' > $null
                      & certutil.exe -setreg CA\AuditFilter '127' > $null
                      & auditpol.exe /set /subcategory:'Certification Services' /failure:enable /success:enable > $null

                      Write-Output 'Restarting CA service'
                      Try {
                          Restart-Service -Name 'certsvc' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to restart CA service $_"
                          Exit 1
                      }

                      Start-Sleep -Seconds 10

                      Write-Output 'Publishing CRL'
                      & certutil.exe -crl > $null

                      Write-Output 'Copying CRL to PKI folder'
                      Try {
                          Copy-Item -Path 'C:\Windows\System32\CertSrv\CertEnroll\*.cr*' -Destination 'D:\Pki\' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to copy CRL to PKI folder  $_"
                          Exit 1
                      }

                      Write-Output 'Restarting CA service'
                      Try {
                          Restart-Service -Name 'certsvc' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to restart CA service $_"
                      }

                      Write-Output 'Creating LdapOverSSL certificate template'
                      New-KerbCertTemplate -BaseDn $BaseDn -Credential $Credentials -Server $DC

                      If ($DomainType -eq 'SelfManagedAD') {  
                          Write-Output 'Getting domain controllers'
                          Try {
                              $DomainControllers = Get-ADComputer -SearchBase "OU=Domain Controllers,$BaseDn" -Filter * | Select-Object -ExpandProperty 'DNSHostName'
                          } Catch [System.Exception] {
                              Write-Output "Failed to get domain controllers $_"
                          }

                          Write-Output 'Running Group Policy update on all domain controllers'
                          Foreach ($DomainController in $DomainControllers) {
                              Invoke-Command -ComputerName $DomainController -Credential $Credentials -ScriptBlock { Invoke-GPUpdate -RandomDelayInMinutes '0' -Force }
                          }
                      }

                      Write-Output 'Creating Update CRL scheduled task'
                      Try {
                          $ScheduledTaskAction = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument '& certutil.exe -crl; Copy-Item -Path C:\Windows\System32\CertSrv\CertEnroll\*.cr* -Destination D:\Pki\'
                          $ScheduledTaskTrigger = New-ScheduledTaskTrigger -Daily -DaysInterval '5' -At '12am' -ErrorAction Stop
                          $ScheduledTaskPrincipal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType 'ServiceAccount' -RunLevel 'Highest' -ErrorAction Stop
                          $ScheduledTaskSettingsSet = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -Compatibility 'Win8' -ExecutionTimeLimit (New-TimeSpan -Hours '1') -ErrorAction Stop
                          $ScheduledTask = New-ScheduledTask -Action $ScheduledTaskAction -Principal $ScheduledTaskPrincipal -Trigger $ScheduledTaskTrigger -Settings $ScheduledTaskSettingsSet -Description 'Updates CRL to Local Pki Folder' -ErrorAction Stop
                          $Null = Register-ScheduledTask 'Update CRL' -InputObject $ScheduledTask -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to register Update CRL scheduled task $_"
                      }

                      Write-Output 'Running CRL scheduled task'
                      Try {
                          Start-ScheduledTask -TaskName 'Update CRL' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to run CRL scheduled task $_"
                      }

                      Write-Output 'Restarting CA service'
                      Try {
                          Restart-Service -Name 'certsvc' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to restart CA service $_"
                      }

                      Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                      Try {
                          Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to allow WinRM traffic from VPC CIDR $_"
                      }
                  }

                  Function Set-CredSSP {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][ValidateSet('Enable', 'Disable')][string]$Action
                      )

                      $RootKey = 'HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows'
                      $CredDelKey = 'CredentialsDelegation'
                      $FreshCredKey = 'AllowFreshCredentials'
                      $FreshCredKeyNTLM = 'AllowFreshCredentialsWhenNTLMOnly'

                      Switch ($Action) {
                          'Enable' {
                              Write-Output 'Enabling CredSSP'
                              $CredDelKeyPresent = Test-Path -Path (Join-Path -Path "Registry::$RootKey" -ChildPath $CredDelKey) -ErrorAction SilentlyContinue
                              If (-not $CredDelKeyPresent) {
                                  Write-Output "Setting CredSSP registry entry $CredDelKey"
                                  Try {
                                      $CredDelPath = New-Item -Path "Registry::$RootKey" -Name $CredDelKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                  } Catch [System.Exception] {
                                      Write-Output "Failed to create CredSSP registry entry $CredDelKey $_"
                                      Remove-Item -Path (Join-Path -Path "Registry::$RootKey" -ChildPath $CredDelKey) -Force -Recurse
                                      Exit 1
                                  }
                              } Else {
                                  $CredDelPath = Join-Path -Path $RootKey -ChildPath $CredDelKey
                              }

                              $FreshCredKeyPresent = Test-Path -Path (Join-Path -Path "Registry::$CredDelPath" -ChildPath $FreshCredKey) -ErrorAction SilentlyContinue
                              If (-not $FreshCredKeyPresent) {
                                  Write-Output "Setting CredSSP registry entry $FreshCredKey"
                                  Try {
                                      $FreshCredKeyPath = New-Item -Path "Registry::$CredDelPath" -Name $FreshCredKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                  } Catch [System.Exception] {
                                      Write-Output "Failed to create CredSSP registry entry $FreshCredKey $_"
                                      Remove-Item -Path (Join-Path -Path "Registry::$RootKey" -ChildPath $CredDelKey) -Force -Recurse
                                      Exit 1
                                  }
                              } Else {
                                  $FreshCredKeyPath = Join-Path -Path $CredDelPath -ChildPath $FreshCredKey
                              }

                              $FreshCredKeyNTLMPresent = Test-Path -Path (Join-Path -Path "Registry::$CredDelPath" -ChildPath $FreshCredKeyNTLM) -ErrorAction SilentlyContinue
                              If (-not $FreshCredKeyNTLMPresent) {
                                  Write-Output "Setting CredSSP registry entry $FreshCredKeyNTLM"
                                  Try {
                                      $FreshCredKeyNTLMPath = New-Item -Path "Registry::$CredDelPath" -Name $FreshCredKeyNTLM -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                  } Catch [System.Exception] {
                                      Write-Output "Failed to create CredSSP registry entry $FreshCredKeyNTLM $_"
                                      Remove-Item -Path (Join-Path -Path "Registry::$RootKey" -ChildPath $CredDelKey) -Force -Recurse
                                      Exit 1
                                  }
                              } Else {
                                  $FreshCredKeyNTLMPath = Join-Path -Path $CredDelPath -ChildPath $FreshCredKeyNTLM
                              }

                              Try {
                                  $Null = Set-ItemProperty -Path "Registry::$CredDelPath" -Name 'AllowFreshCredentials' -Value '1' -Type 'Dword' -Force -ErrorAction Stop
                                  $Null = Set-ItemProperty -Path "Registry::$CredDelPath" -Name 'ConcatenateDefaults_AllowFresh' -Value '1' -Type 'Dword' -Force -ErrorAction Stop
                                  $Null = Set-ItemProperty -Path "Registry::$CredDelPath" -Name 'AllowFreshCredentialsWhenNTLMOnly' -Value '1' -Type 'Dword' -Force -ErrorAction Stop
                                  $Null = Set-ItemProperty -Path "Registry::$CredDelPath" -Name 'ConcatenateDefaults_AllowFreshNTLMOnly' -Value '1' -Type 'Dword' -Force -ErrorAction Stop
                                  $Null = Set-ItemProperty -Path "Registry::$FreshCredKeyPath" -Name '1' -Value 'WSMAN/*' -Type 'String' -Force -ErrorAction Stop
                                  $Null = Set-ItemProperty -Path "Registry::$FreshCredKeyNTLMPath" -Name '1' -Value 'WSMAN/*' -Type 'String' -Force -ErrorAction Stop
                              } Catch [System.Exception] {
                                  Write-Output "Failed to create CredSSP registry properties $_"
                                  Remove-Item -Path (Join-Path -Path "Registry::$RootKey" -ChildPath $CredDelKey) -Force -Recurse
                                  Exit 1
                              }

                              Try {
                                  $Null = Enable-WSManCredSSP -Role 'Client' -DelegateComputer '*' -Force -ErrorAction Stop
                                  $Null = Enable-WSManCredSSP -Role 'Server' -Force -ErrorAction Stop
                              } Catch [System.Exception] {
                                  Write-Output "Failed to enable CredSSP $_"
                                  $Null = Disable-WSManCredSSP -Role 'Client' -ErrorAction SilentlyContinue
                                  $Null = Disable-WSManCredSSP -Role 'Server' -ErrorAction SilentlyContinue
                                  Exit 1
                              }
                          }
                          'Disable' {
                              Write-Output 'Disabling CredSSP'
                              Try {
                                  Disable-WSManCredSSP -Role 'Client' -ErrorAction Continue
                                  Disable-WSManCredSSP -Role 'Server' -ErrorAction Stop
                              } Catch [System.Exception] {
                                  Write-Output "Failed to disable CredSSP $_"
                                  Exit 1
                              }

                              Write-Output 'Removing CredSSP registry entries'
                              Try {
                                  Remove-Item -Path (Join-Path -Path "Registry::$RootKey" -ChildPath $CredDelKey) -Force -Recurse -ErrorAction Stop
                              } Catch [System.Exception] {
                                  Write-Output "Failed to remove CredSSP registry entries $_"
                                  Exit 1
                              }
                          }
                          Default { 
                              Write-Output 'InvalidArgument: Invalid value is passed for parameter Action'
                              Exit 1
                          }
                      }
                  }

                  Function New-TemplateOID {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][string]$Server,
                          [Parameter(Mandatory = $true)][string]$ConfigNC
                      )

                      $Hex = '0123456789ABCDEF'

                      Do {
                          [string]$RandomHex = $null
                          For ($i = 1; $i -le 32; $i++) {
                              $RandomHex += $Hex.Substring((Get-Random -Minimum 0 -Maximum 16), 1)
                          }

                          $OID_Part_1 = Get-Random -Minimum 1000000 -Maximum 99999999
                          $OID_Part_2 = Get-Random -Minimum 10000000 -Maximum 99999999
                          $OID_Part_3 = $RandomHex
                          $OID_Forest = Get-ADObject -Server $Server -Identity "CN=OID,CN=Public Key Services,CN=Services,$ConfigNC" -Properties msPKI-Cert-Template-OID | Select-Object -ExpandProperty msPKI-Cert-Template-OID -ErrorAction SilentlyContinue
                          $msPKICertTemplateOID = "$OID_Forest.$OID_Part_1.$OID_Part_2"
                          $Name = "$OID_Part_2.$OID_Part_3"
                          $Search = Get-ADObject -Server $Server -SearchBase "CN=OID,CN=Public Key Services,CN=Services,$ConfigNC" -Filter { cn -eq $Name -and msPKI-Cert-Template-OID -eq $msPKICertTemplateOID } -ErrorAction SilentlyContinue
                          If ($Search) { 
                              $Unique = 'False'
                          } Else { 
                              $Unique = 'True'
                          }
                      } Until ($Unique = 'True')
                      Return @{
                          TemplateOID  = $msPKICertTemplateOID
                          TemplateName = $Name
                      }
                  }

                  Function New-KerbCertTemplate {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][string]$BaseDn,
                          [Parameter(Mandatory = $true)][PSCredential]$Credential,
                          [Parameter(Mandatory = $true)][string]$Server
                      )

                      $CA = $env:COMPUTERNAME

                      $OID = New-TemplateOID -Server $Server -ConfigNC "CN=Configuration,$BaseDn"

                      $TemplateOIDPath = "CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"
                      $OidOtherAttributes = @{
                          'DisplayName'             = 'LdapOverSSL'
                          'flags'                   = [System.Int32]'1'
                          'msPKI-Cert-Template-OID' = $OID.TemplateOID
                      }

                      $OtherAttributes = @{
                          'flags'                                = [System.Int32]'131168'
                          'msPKI-Certificate-Application-Policy' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')
                          'msPKI-Certificate-Name-Flag'          = [System.Int32]'138412032'
                          'msPKI-Enrollment-Flag'                = [System.Int32]'40'
                          'msPKI-Minimal-Key-Size'               = [System.Int32]'2048'
                          'msPKI-Private-Key-Flag'               = [System.Int32]'84279552'
                          'msPKI-Template-Minor-Revision'        = [System.Int32]'1'
                          'msPKI-Template-Schema-Version'        = [System.Int32]'4'
                          'msPKI-RA-Signature'                   = [System.Int32]'0'
                          'pKIMaxIssuingDepth'                   = [System.Int32]'0'
                          'ObjectClass'                          = [System.String]'pKICertificateTemplate'
                          'pKICriticalExtensions'                = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('2.5.29.17', '2.5.29.15')
                          'pKIDefaultCSPs'                       = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1,Microsoft RSA SChannel Cryptographic Provider')
                          'pKIDefaultKeySpec'                    = [System.Int32]'1'
                          'pKIExpirationPeriod'                  = [System.Byte[]]@('0', '64', '57', '135', '46', '225', '254', '255')
                          'pKIExtendedKeyUsage'                  = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')
                          'pKIKeyUsage'                          = [System.Byte[]]@('160', '0')
                          'pKIOverlapPeriod'                     = [System.Byte[]]@('0', '128', '166', '10', '255', '222', '255', '255')
                          'revision'                             = [System.Int32]'100'
                          'msPKI-Cert-Template-OID'              = $OID.TemplateOID
                      }

                      Write-Output "Creating new LdapOverSSL certificate template OID $_"
                      Try {
                          New-ADObject -Path $TemplateOIDPath -OtherAttributes $OidOtherAttributes -Name $OID.TemplateName -Type 'msPKI-Enterprise-Oid' -Server $Server -Credential $Credential -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to create new LdapOverSSL certificate template OID $_"
                          Exit 1
                      }

                      $TemplatePath = "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"

                      Write-Output "Creating new LdapOverSSL certificate template $_"
                      Try {
                          New-ADObject -Path $TemplatePath -OtherAttributes $OtherAttributes -Name 'LdapOverSSL' -DisplayName 'LdapOverSSL' -Type 'pKICertificateTemplate' -Server $Server -Credential $Credential -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to create new LdapOverSSL certificate template $_"
                          Exit 1
                      }

                      $SidsToAdd = @(
                          [Security.Principal.SecurityIdentifier]'S-1-5-9'
                          (Get-ADGroup -Identity 'Domain Controllers' | Select-Object -ExpandProperty 'SID')
                      )

                      $SidsToRemove = @(
                          [Security.Principal.SecurityIdentifier]'S-1-5-18',
                          (Get-ADGroup -Identity 'Domain Admins' | Select-Object -ExpandProperty 'SID')
                      )

                      Set-CredSSP -Action 'Enable'

                      Write-Output 'Sleeping to ensure replication of certificate template has completed'
                      Start-Sleep -Seconds 60

                      Write-Output 'Cleaning up ACLs on LdapOverSSL certificate template'
                      $ExtendedRightGuids = @(
                          [GUID]'0e10c968-78fb-11d2-90d4-00c04f79dc55',
                          [GUID]'a05b8cc2-17bc-4802-a710-e7c15ab866a2'
                      )
                      Foreach ($SidToAdd in $SidsToAdd) {
                          Add-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToAdd -ActiveDirectoryRights 'GenericRead,GenericWrite,WriteDacl,WriteOwner,Delete' -AccessControlType 'Allow' -ActiveDirectorySecurityInheritance 'None'

                          Foreach ($ExtendedRightGuid in $ExtendedRightGuids) {
                              Add-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToAdd -ActiveDirectoryRights 'ExtendedRight' -AccessControlType 'Allow' -ObjectGuid $ExtendedRightGuid -ActiveDirectorySecurityInheritance 'None'
                          }
                      }

                      Set-CertTemplateAclInheritance -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"

                      Foreach ($SidToRemove in $SidsToRemove) {
                          Remove-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToRemove -AccessControlType 'Allow'
                      }

                      Write-Output "Publishing LdapOverSSL template to allow enrollment"
                      $Counter = 0
                      Do {
                          $TempPresent = $Null
                          Try {
                              $TempPresent = Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock { 
                                  Get-ADObject "CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn" -Partition "CN=Configuration,$Using:BaseDn" -Properties 'certificateTemplates' | Select-Object -ExpandProperty 'certificateTemplates' | Where-Object { $_ -contains 'LdapOverSSL' }
                              }
                          } Catch [System.Exception] {
                              Write-Output "LdapOverSSL Template missing"
                              $TempPresent = $Null
                          }
                          If (-not $TempPresent) {
                              $Counter ++
                              Write-Output "LdapOverSSL Template missing adding it."
                              Try {
                                  Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                      Set-ADObject "CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn" -Partition "CN=Configuration,$Using:BaseDn" -Add @{ 'certificateTemplates' = 'LdapOverSSL' } 
                                  }
                              } Catch [System.Exception] {
                                  Write-Output "Failed to add publish LdapOverSSL template $_"
                              }
                              If ($Counter -gt '1') {
                                  Start-Sleep -Seconds 10
                              }
                          }
                      } Until ($TempPresent -or $Counter -eq 12)

                      Write-Output 'Sleeping to ensure replication of certificate template publish has completed'
                      Start-Sleep -Seconds 60

                      Set-CredSSP -Action 'Disable'
                  }

                  Function Add-CertTemplateAcl {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][PSCredential]$Credential,
                          [Parameter(Mandatory = $true)][string]$Path,
                          [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                          [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,
                          [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,
                          [Parameter(Mandatory = $false)][Guid]$ObjectGuid,
                          [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,
                          [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid
                      )

                      Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                          Import-Module -Name 'ActiveDirectory' -Force

                          [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'

                          $ArgumentList = $IdentityReference, $Using:ActiveDirectoryRights, $Using:AccessControlType, $Using:ObjectGuid, $Using:ActiveDirectorySecurityInheritance, $Using:InheritedObjectGuid
                          $ArgumentList = $ArgumentList.Where({ $_ -ne $Null })

                          Write-Output 'Creating ACL object'
                          Try {
                              $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to create ACL object $_"
                              Exit 1
                          }

                          Write-Output "Getting ACL for $Using:Path"
                          Try {
                              $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get ACL for $Using:Path $_"
                              Exit 1
                          }

                          $ObjectAcl.AddAccessRule($Rule) 

                          Write-Output "Setting ACL for $Using:Path"
                          Try {
                              Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to set ACL for $Using:Path $_"
                              Exit 1
                          }
                      }
                  }

                  Function Set-CertTemplateAclInheritance {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][PSCredential]$Credential,
                          [Parameter(Mandatory = $true)][string]$Path
                      )

                      Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                          Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop

                          Write-Output "Getting ACL for $Using:Path"
                          Try {
                              $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get ACL for $Using:Path $_"
                              Exit 1
                          }

                          $ObjectAcl.SetAccessRuleProtection($true, $false)

                          Write-Output "Setting ACL for $Using:Path"
                          Try {
                              Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to set ACL for $Using:Path $_"
                              Exit 1
                          }
                      }
                  }

                  Function Remove-CertTemplateAcl {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][PSCredential]$Credential,
                          [Parameter(Mandatory = $true)][string]$Path,
                          [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                          [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType
                      )

                      Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                          Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop

                          Write-Output "Getting ACL for $Using:Path"
                          Try {
                              $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get ACL for $Using:Path $_"
                              Exit 1
                          }

                          [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'

                          $ObjectAcl.RemoveAccess($IdentityReference, $Using:AccessControlType)

                          Write-Output "Removing ACL for $Using:Path"
                          Try {
                              Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to remove ACL for $Using:Path $_"
                              Exit 1
                          }
                      }
                  }

                  $Secret = Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}'
                  $DeploymentType = '{{DeploymentType}}'

                  If ($DeploymentType -eq 'EnterpriseCA' -or $DeploymentType -eq 'EnterpriseCAManagementInstance') {
                      Invoke-EnterpriseCaConfig -Credentials $Secret.DomainCredentials -DomainType '{{DomainType}}' -EntCaCommonName '{{ServerNetBIOSName}}' -EntCaHashAlgorithm 'SHA256' -EntCaKeyLength '2048' -EntCaValidityPeriodUnits '5' -VPCCIDR '{{VPCCIDR}}'
                  }
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: true
                CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
      DocumentType: Automation
      Tags:
        - Key: StackName
          Value:
            Ref: AWS::StackName
  SsmAuto:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "0.3"
        description: Deploy AD with SSM Automation
        parameters:
          AdministratorSecretName:
            description: AWS Secrets Parameter Name
            type: String
          DeployPki:
            description: Deploy an Enterprise CA
            type: String
          DeploymentType:
            description: Type of workload being deployed
            type: String
          DomainDNSName:
            description: Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local
            type: String
          DomainNetBIOSName:
            default: placeholder
            description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES
            type: String
          DomainType:
            default: placeholder
            description: Type of domain PKI will be integrated with
            type: String
          FsxOnpremParentOu:
            default: placeholder
            description: Parent OU DN for Amazon FSX for Windows deployment with On-Premises AD
            type: String
          IntegrateFsxOnprem:
            default: placeholder
            description: Deploy & Integrate Amazon FSX for Windows with On-Premises AD
            type: String
          LogicalResourceId:
            description: CloudFormation Resource ID 
            type: String
          MadDirectoryID:
            default: placeholder
            description: Directory ID of MAD domain
            type: String
          MadDNSName:
            default: placeholder
            description: Fully qualified domain name (FQDN) of the MAD domain e.g. corp.example.com
            type: String
          OnpremDomainDNSName:
            default: placeholder
            description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
            type: String
          ParentDomainDNSName:
            default: placeholder
            description: Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local
            type: String
          ParentInstanceIP:
            default: placeholder
            description: IP Address of the forest root domain controller
            type: String
          ServerNetBIOSName:
            description: NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)
            type: String
          ServerRole:
            description: Role server will be (DomainController or CertificateAuthority)
            type: String
          StackName:
            description: Stack Name Input for cfn resource signal
            type: String
          TrustDirection:
            default: placeholder
            description: Trust Direction from AWS Managed Microsoft AD to on-premises domain.
            type: String
          TrustSecretName:
            default: placeholder
            description: AWS Secrets Parameter Name
            type: String
          VPCCIDR:
            description: CIDR Block for the VPC
            type: String
        mainSteps:
          - name: InstanceId
            action: aws:executeAwsApi
            onFailure: step:signalFailure
            inputs:
              Service: ec2
              Api: DescribeInstances
              Filters:
                - Name: tag:Name
                  Values:
                    - "{{ServerNetBIOSName}}"
                - Name: tag:aws:cloudformation:stack-name
                  Values:
                    - "{{StackName}}"
                - Name: instance-state-name
                  Values:
                    - running
            outputs:
              - Name: InstanceId
                Selector: $.Reservations[0].Instances[0].InstanceId
                Type: String
            nextStep: intializeInstance
          - name: intializeInstance
            action: aws:runCommand
            onFailure: step:signalFailure
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{InstanceId.InstanceId}}"
              Parameters:
                commands: |-
                  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                  $RegistryItems = @(
                      @{
                          Name         = 'SchUseStrongCrypto'
                          Path         = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\v4.0.30319'
                          Value        = '1'
                          PropertyType = 'DWORD'
                      },
                      @{
                          Name         = 'SchUseStrongCrypto'
                          Path         = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319'
                          Value        = '1'
                          PropertyType = 'DWORD'
                      }
                  )

                  Foreach ($RegistryItem in $RegistryItems) {
                      Try {
                          $Null = New-ItemProperty @RegistryItem -Force -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to create Registry key named $($RegistryItem.Name) at $($RegistryItem.Path) $_"
                          Exit 1
                      }
                  }

                  $Modules = @(
                      @{
                          Name    = 'ActiveDirectoryDsc'
                          Version = '6.2.0'
                      },
                      @{
                          Name    = 'AuditPolicyDsc'
                          Version = '1.4.0.0'
                      },
                      @{
                          Name    = 'ComputerManagementDsc'
                          Version = '8.5.0'
                      },
                      @{
                          Name    = 'DnsServerDsc'
                          Version = '3.0.0'
                      },
                      @{
                          Name    = 'NetworkingDsc'
                          Version = '9.0.0'
                      },
                      @{
                          Name    = 'PSReadline'
                          Version = '2.2.6'
                      },
                      @{
                          Name    = 'SChannelDsc'
                          Version = '1.4.0'
                      }
                  )

                  Function New-VolumeFromRawDisk {
                      Write-Output 'Finding RAW Disk'
                      $Counter = 0
                      Do {
                          Try {
                              $BlankDisks = Get-Disk -ErrorAction Stop | Where-Object { $_.PartitionStyle -eq 'RAW' } | Select-Object -ExpandProperty 'Number'
                          } Catch [System.Exception] {
                              Write-Output "Failed to get disk $_"
                              $BlankDisks = $Null
                          }
                          If (-not $BlankDisks) {
                              $Counter ++
                              Write-Output 'RAW Disk not found sleeping 10 seconds and will try again.'
                              Start-Sleep -Seconds 10
                          }
                      } Until ($BlankDisks -or $Counter -eq 12)

                      If ($Counter -ge 12) {
                          Write-Output 'RAW Disk not found exiting'
                          Return
                      }

                      Foreach ($BlankDisk in $BlankDisks) {
                          Write-Output 'Data Volume not initialized attempting to bring online'
                          Try {
                              Initialize-Disk -Number $BlankDisk -PartitionStyle 'GPT' -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed attempting to bring online Data Volume $_"
                              Exit 1
                          }

                          Start-Sleep -Seconds 5

                          Write-Output 'Data Volume creating new partition'
                          Try {
                              $DriveLetter = New-Partition -Alignment '4096000' -DiskNumber $BlankDisk -AssignDriveLetter -UseMaximumSize -ErrorAction Stop | Select-Object -ExpandProperty 'DriveLetter'
                          } Catch [System.Exception] {
                              Write-Output "Failed creating new partition $_"
                              Exit 1
                          }

                          Start-Sleep -Seconds 5

                          Write-Output 'Data Volume formatting partition'
                          Try {
                              $Null = Format-Volume -DriveLetter $DriveLetter -FileSystem 'NTFS' -NewFileSystemLabel 'Data' -Confirm:$false -Force -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed formatting partition $_"
                              Exit 1
                          }

                          Try {
                              $Null = Get-CimInstance -ClassName 'Win32_Volume' -Filter "DriveLetter='$($DriveLetter):'" -ErrorAction Stop | Set-CimInstance -Arguments @{ IndexingEnabled = $False }
                          } Catch [System.Exception] {
                              Write-Output "Failed to turn off indexing $_"
                              Exit 1
                          }
                      }
                  }

                  Function Invoke-PreConfig {
                      Write-Output 'Temporarily disabling Windows Firewall'
                      Try {
                          Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled False -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to disable Windows Firewall $_"
                          Exit 1
                      }

                      $Dirs = @(
                          'C:\Temp\publickeys',
                          'C:\DnsLogs'
                      )

                      Foreach ($Dir in $Dirs) {
                          Write-Output "Creating file directory $Dir"
                          Try {
                              $Null = New-Item -Path $Dir -ItemType 'Directory' -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to create directory $Dir $_"
                              Exit 1
                          }
                      }

                      Write-Output 'Creating certificate to encrypt credentials in MOF file'
                      Try {
                          $cert = New-SelfSignedCertificate -Type 'DocumentEncryptionCertLegacyCsp' -DnsName 'DscEncryptCert' -HashAlgorithm 'SHA256' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to create self signed cert $_"
                          Exit 1
                      }

                      Write-Output 'Exporting the self signed public key certificate'
                      Try {
                          $Null = $cert | Export-Certificate -FilePath 'C:\Temp\publickeys\DscPublicKey.cer' -Force -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to copy self signed cert to publickeys directory $_"
                          Exit 1
                      }
                  }

                  Function Invoke-LcmConfig {
                      Write-Output 'Getting the DSC cert thumbprint to secure the MOF file'
                      Try {
                          $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                      } Catch [System.Exception] {
                          Write-Output "Failed to get DSC cert thumbprint $_"
                          Exit 1
                      }

                      [DSCLocalConfigurationManager()]
                      Configuration LCMConfig
                      {
                          Node 'localhost' {
                              Settings {
                                  RefreshMode                    = 'Push'
                                  ConfigurationModeFrequencyMins = 15
                                  ActionAfterReboot              = 'StopConfiguration'
                                  RebootNodeIfNeeded             = $false
                                  ConfigurationMode              = 'ApplyAndAutoCorrect'
                                  CertificateId                  = $DscCertThumbprint
                              }
                          }
                      }

                      Write-Output 'Generating MOF file for LCM'
                      $Null = LCMConfig -OutputPath 'C:\Temp\LCMConfig'

                      Write-Output 'Sets LCM configuration to MOF generated in previous command'
                      Try {
                          Set-DscLocalConfigurationManager -Path 'C:\Temp\LCMConfig' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to set LCM configuration $_"
                          Exit 1
                      }
                  }

                  Write-Output 'Installing NuGet Package Provider'
                  Try {
                      $Null = Install-PackageProvider -Name 'NuGet' -MinimumVersion '2.8.5' -Force -ErrorAction Stop
                  } Catch [System.Exception] {
                      Write-Output "Failed to install NuGet Package Provider $_"
                      Exit 1
                  }

                  Write-Output 'Setting PSGallery Respository to trusted'
                  Try {
                      Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -ErrorAction Stop
                  } Catch [System.Exception] {
                      Write-Output "Failed to set PSGallery Respository to trusted $_"
                      Exit 1
                  }

                  Write-Output 'Installing the needed Powershell DSC modules'
                  Foreach ($Module in $Modules) {
                      Try {
                          Install-Module -Name $Module.Name -RequiredVersion $Module.Version -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to Import Modules $_"
                          #Exit 1
                      }
                  }

                  Write-Output 'Getting certificate AutoEnrollment policy'
                  Try {
                      $CertEnrollmentActive = Get-CertificateAutoEnrollmentPolicy -context 'Machine' -Scope 'Local' | Select-Object -ExpandProperty 'PolicyState' -ErrorAction Stop
                  } Catch [System.Exception] {
                      Write-Output "Failed to get certificate AutoEnrollment policy $_"
                      Exit 1
                  }

                  If ($CertEnrollmentActive -ne 'Enabled') {
                      Write-Output 'Setting certificate AutoEnrollment policy'
                      Try {
                          Set-CertificateAutoEnrollmentPolicy -ExpirationPercentage 10 -PolicyState 'Enabled' -EnableTemplateCheck -EnableMyStoreManagement -StoreName 'MY' -context 'Machine' -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to set certificate AutoEnrollment policy $_"
                          Exit 1
                      }
                  }

                  New-VolumeFromRawDisk
                  Invoke-PreConfig
                  Invoke-LcmConfig

                  If ('{{DeploymentType}}' -eq 'Management') {
                      Write-Output 'Installing SQL Server Management Studio'
                      (New-Object -TypeName 'System.Net.WebClient').DownloadFile('https://aka.ms/ssmsfullsetup', 'C:\Temp\SSMS-Setup.exe')
                      $ArgumentList = '/Quiet'
                      Try {
                          $Process = Start-Process -FilePath 'C:\Temp\SSMS-Setup.exe' -ArgumentList $ArgumentList -NoNewWindow -PassThru -Wait -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to install SQL Server Management Studio $_"
                          #Exit 1
                      }
                  }
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: true
                CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
            nextStep: configureInstance
          - name: configureInstance
            action: aws:runCommand
            onFailure: step:signalFailure
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{InstanceId.InstanceId}}"
              Parameters:
                commands: |-
                  Function Get-SecretInfo {
                      [CmdletBinding()]
                      Param (
                          [Parameter(Mandatory = $True)][String]$Domain,
                          [Parameter(Mandatory = $True)][String]$SecretArn
                      )

                      Write-Output "Getting $SecretArn Secret"
                      Try {
                          $SecretContent = Get-SECSecretValue -SecretId $SecretArn -ErrorAction Stop | Select-Object -ExpandProperty 'SecretString' | ConvertFrom-Json -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to get $SecretArn Secret $_"
                          Exit 1
                      }

                      Write-Output 'Creating PSCredential object from Secret'
                      $Username = $SecretContent.username
                      $UserPassword = ConvertTo-SecureString ($SecretContent.password) -AsPlainText -Force
                      $DomainCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ("$Domain\$Username", $UserPassword)
                      $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ($Username, $UserPassword)

                      $Output = [PSCustomObject][Ordered]@{
                          'Credentials'       = $Credentials
                          'DomainCredentials' = $DomainCredentials
                          'Username'          = $Username
                          'UserPassword'      = $UserPassword
                      }

                      Return $Output
                  }

                  Function Get-EniConfig {
                      Write-Output 'Getting network configuration'
                      Try {
                          $NetIpConfig = Get-NetIPConfiguration -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to get network configuration $_"
                          Exit 1
                      }

                      Write-Output 'Grabbing the current gateway address in order to static IP correctly'
                      $GatewayAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4DefaultGateway' | Select-Object -ExpandProperty 'NextHop'

                      Write-Output 'Formatting IP address in format needed for IPAdress DSC resource'
                      $IpAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'IpAddress'
                      $Prefix = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'PrefixLength'
                      $InterfaceAlias = $NetIpConfig | Select-Object -ExpandProperty 'InterfaceAlias'
                      $IpAddr = 'IP/CIDR' -replace 'IP', $IpAddress -replace 'CIDR', $Prefix

                      Write-Output 'Getting MAC address'
                      Try {
                          $MacAddress = Get-NetAdapter -ErrorAction Stop | Select-Object -ExpandProperty 'MacAddress'
                      } Catch [System.Exception] {
                          Write-Output "Failed to get MAC address $_"
                          Exit 1
                      }

                      $Output = [PSCustomObject][Ordered]@{
                          'GatewayAddress' = $GatewayAddress
                          'IpAddress'      = $IpAddr
                          'DnsIpAddress'   = $IpAddress
                          'MacAddress'     = $MacAddress
                          'InterfaceAlias' = $InterfaceAlias
                      }

                      Return $Output
                  }

                  Function Set-DscConfiguration {
                      [CmdletBinding()]
                      param(
                          [Parameter(Mandatory = $true)][PSCredential]$DaCredentials,
                          [Parameter(Mandatory = $false)][PSCredential]$EaCredentials,
                          [Parameter(Mandatory = $true)][string]$DeploymentType,
                          [Parameter(Mandatory = $false)][string]$DnsInstanceIP,
                          [Parameter(Mandatory = $true)][string]$DomainDNSName,
                          [Parameter(Mandatory = $true)][string]$DomainNetBIOSName,
                          [Parameter(Mandatory = $false)][string]$DomainType,
                          [Parameter(Mandatory = $true)][string]$GatewayAddress,
                          [Parameter(Mandatory = $false)][string]$InterfaceAlias,
                          [Parameter(Mandatory = $true)][string]$InstanceIP,
                          [Parameter(Mandatory = $true)][string]$InstanceNetBIOSName,
                          [Parameter(Mandatory = $false)][PSCredential]$LaCredentials,
                          [Parameter(Mandatory = $true)][string]$MacAddress,
                          [Parameter(Mandatory = $false)][string]$MadDNSName,
                          [Parameter(Mandatory = $false)][string]$ParentDomainDNSName,
                          [Parameter(Mandatory = $false)][string]$ParentInstanceIP,
                          [Parameter(Mandatory = $false)][PSCredential]$RestoreModeCredentials,
                          [Parameter(Mandatory = $false)][string]$SiteName,
                          [Parameter(Mandatory = $false)][string]$VPCCIDR
                      )

                      $VPCDNS = '169.254.169.253'

                      If ($DeploymentType -eq 'RootDomainController') {
                          $AClass = 0..8
                          $BClass = 9..16
                          $CClass = 17..24
                          $DClass = 25..32
                          $IP = $VPCCIDR.Split('/')[0]
                          [System.Collections.ArrayList]$IPArray = $IP -Split "\."
                          $Range = $VPCCIDR.Split('/')[1]
                          If ($AClass -contains $Range) {
                              [System.Array]$Number = $IPArray[0]
                          } Elseif ($BClass -contains $Range) {
                              [System.Array]$Number = $IPArray[0, 1]
                          } Elseif ($CClass -contains $Range) {
                              [System.Array]$Number = $IPArray[0, 1, 2]
                          } Elseif ($DClass -contains $Range) {
                              [System.Array]$Number = $IPArray[0, 1, 2, 3]
                          }
                          [System.Array]::Reverse($Number)
                          $IpRev = $Number -Join "."
                          $ZoneName = $IpRev + '.in-addr.arpa'
                      }

                      Write-Output 'Getting the DSC encryption thumbprint to secure the MOF file'
                      Try {
                          $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                      } Catch [System.Exception] {
                          Write-Output "Failed to get DSC cert thumbprint $_"
                          Exit 1
                      }

                      If ($DeploymentType -eq 'RootDomainController' -or $DeploymentType -eq 'ChildDomainController') {
                          Write-Output "Setting DNS client $_"
                          Try {
                              Set-DnsClientServerAddress -InterfaceAlias $InterfaceAlias -ServerAddresses ($VPCDNS) -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to set DNS client $_"
                              Exit 1
                          }
                      }

                      Write-Output 'Creating configuration data block that has the certificate information for DSC configuration processing'
                      $ConfigurationData = @{
                          AllNodes = @(
                              @{
                                  NodeName                    = '*'
                                  CertificateFile      = 'C:\Temp\publickeys\DscPublicKey.cer'
                                  Thumbprint           = $DscCertThumbprint
                                  PSDscAllowDomainUser        = $true
                                  #PsDscAllowPlainTextPassword = $true
                              },
                              @{
                                  NodeName = 'localhost'
                              }
                          )
                      }

                      Switch ($DeploymentType) {
                          'RootDomainController' {
                              $Address = @(
                                  $DnsInstanceIP,
                                  '127.0.0.1',
                                  $VPCDNS
                              )
                          }
                          'ChildDomainController' {
                              $Address = @(
                                  $ParentInstanceIP,
                                  '127.0.0.1',
                                  $VPCDNS
                              )
                          }
                          Default {
                              $Address = @(
                                  $VPCDNS
                              )
                          }
                      }

                      Configuration ConfigInstance {
                          Import-DscResource -ModuleName 'PSDesiredStateConfiguration', 'NetworkingDsc', 'ComputerManagementDsc', 'DnsServerDsc', 'ActiveDirectoryDsc', 'AuditPolicyDsc', 'SChannelDsc'
                          Node LocalHost {
                              NetAdapterName RenameNetAdapterPrimary {
                                  NewName    = 'Primary'
                                  MacAddress = $MacAddress
                              }
                              PowerPlan SetPlanHighPerformance {
                                  IsSingleInstance = 'Yes'
                                  Name             = 'High performance'
                              }
                              NetAdapterAdvancedProperty JumboPacket {
                                  NetworkAdapterName = 'Primary'
                                  RegistryKeyword    = '*JumboPacket'
                                  RegistryValue      = 9015
                                  DependsOn          = '[NetAdapterName]RenameNetAdapterPrimary'
                              }
                              NetAdapterAdvancedProperty ReceiveBuffers {
                                  NetworkAdapterName = 'Primary'
                                  RegistryKeyword    = '*ReceiveBuffers'
                                  RegistryValue      = 8192
                                  DependsOn          = '[NetAdapterName]RenameNetAdapterPrimary'
                              }
                              NetAdapterAdvancedProperty TransmitBuffers {
                                  NetworkAdapterName = 'Primary'
                                  RegistryKeyword    = '*TransmitBuffers'
                                  RegistryValue      = 1024
                                  DependsOn          = '[NetAdapterName]RenameNetAdapterPrimary'
                              }
                              NetBios DisableNetBios {
                                  InterfaceAlias = 'Primary'
                                  Setting        = 'Disable'
                              }
                              NetIPInterface DisableDhcp {
                                  Dhcp           = 'Disabled'
                                  InterfaceAlias = 'Primary'
                                  AddressFamily  = 'IPv4'
                                  DependsOn      = '[NetAdapterName]RenameNetAdapterPrimary'
                              }
                              IPAddress SetIP {
                                  IPAddress      = $InstanceIP
                                  InterfaceAlias = 'Primary'
                                  AddressFamily  = 'IPv4'
                                  DependsOn      = '[NetIPInterface]DisableDhcp'
                              }
                              DefaultGatewayAddress SetDefaultGateway {
                                  Address        = $GatewayAddress
                                  InterfaceAlias = 'Primary'
                                  AddressFamily  = 'IPv4'
                                  DependsOn      = '[IPAddress]SetIP'
                              }
                              DnsServerAddress DnsServerAddress {
                                  Address        = $Address
                                  InterfaceAlias = 'Primary'
                                  AddressFamily  = 'IPv4'
                                  DependsOn      = '[DefaultGatewayAddress]SetDefaultGateway'
                              }
                              DnsConnectionSuffix DnsConnectionSuffix {
                                  InterfaceAlias                 = 'Primary'
                                  ConnectionSpecificSuffix       = $DomainDNSName
                                  RegisterThisConnectionsAddress = $True
                                  UseSuffixWhenRegistering       = $False
                                  DependsOn                      = '[DnsServerAddress]DnsServerAddress'
                              }
                              WindowsFeature DnsTools {
                                  Ensure    = 'Present'
                                  Name      = 'RSAT-DNS-Server'
                                  DependsOn = '[DnsConnectionSuffix]DnsConnectionSuffix'
                              }
                              WindowsFeature RSAT-AD-Tools {
                                  Ensure    = 'Present'
                                  Name      = 'RSAT-AD-Tools'
                                  DependsOn = '[WindowsFeature]DnsTools'
                              }
                              WindowsFeature RSAT-ADDS {
                                  Ensure    = 'Present'
                                  Name      = 'RSAT-ADDS'
                                  DependsOn = '[WindowsFeature]RSAT-AD-Tools'
                              }
                              WindowsFeature GPMC {
                                  Ensure    = 'Present'
                                  Name      = 'GPMC'
                                  DependsOn = '[WindowsFeature]RSAT-ADDS'
                              }
                              Registry CrossForestGPO {
                                  Ensure    = 'Present'  
                                  Key       = 'HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\System\'
                                  ValueName = 'AllowX-ForestPolicy-and-RUP'
                                  ValueType = 'Dword'
                                  ValueData = '1'
                                  Force     = $true
                              }
                              If ($DeploymentType -eq 'RootDomainController' -or $DeploymentType -eq 'ChildDomainController' -or $DeploymentType -eq 'AdditionalDomainController') {
                                  WindowsFeature DNS {
                                      Ensure    = 'Present'
                                      Name      = 'DNS'
                                      DependsOn = '[WindowsFeature]GPMC'
                                  }
                                  WindowsFeature AD-Domain-Services {
                                      Ensure    = 'Present'
                                      Name      = 'AD-Domain-Services'
                                      DependsOn = '[WindowsFeature]DNS'
                                  }
                                  Service ActiveDirectoryWebServices {
                                      Name        = 'ADWS'
                                      StartupType = 'Automatic'
                                      State       = 'Running'
                                      DependsOn   = '[WindowsFeature]AD-Domain-Services'
                                  }
                                  Computer Rename {
                                      Name      = $InstanceNetBIOSName
                                      DependsOn = '[WindowsFeature]AD-Domain-Services'
                                  }
                                  User AdministratorPassword {
                                      UserName  = 'Administrator'
                                      Password  = $LaCredentials
                                      DependsOn = '[Computer]Rename'
                                  }
                                  Switch ($DeploymentType) {
                                      'RootDomainController' {
                                          ADDomain PrimaryDC {
                                              DomainName                    = $DomainDnsName
                                              DomainNetBIOSName             = $DomainNetBIOSName
                                              Credential                    = $DaCredentials
                                              SafemodeAdministratorPassword = $RestoreModeCredentials
                                              DatabasePath                  = 'D:\NTDS'
                                              LogPath                       = 'D:\NTDS'
                                              SysvolPath                    = 'D:\SYSVOL'
                                              DependsOn                     = '[User]AdministratorPassword'
                                          }
                                      }    
                                      'ChildDomainController' {
                                          ADDomain PrimaryDC {
                                              DomainName                    = $DomainNetBIOSName.ToLower()
                                              DomainNetBIOSName             = $DomainNetBIOSName
                                              ParentDomainName              = $ParentDomainDNSName
                                              Credential                    = $EaCredentials
                                              SafemodeAdministratorPassword = $RestoreModeCredentials
                                              DatabasePath                  = 'D:\NTDS'
                                              LogPath                       = 'D:\NTDS'
                                              SysvolPath                    = 'D:\SYSVOL'
                                              DependsOn                     = '[User]AdministratorPassword'
                                          }
                                      }
                                      'AdditionalDomainController' {
                                          ADDomainController PrimaryDC {
                                              DomainName                    = $DomainDnsName
                                              Credential                    = $DaCredentials
                                              SafemodeAdministratorPassword = $RestoreModeCredentials
                                              DatabasePath                  = 'D:\NTDS'
                                              LogPath                       = 'D:\NTDS'
                                              SysvolPath                    = 'D:\SYSVOL'
                                              DependsOn                     = '[User]AdministratorPassword'
                                          }
                                      }
                                  }
                                  If ($DeploymentType -eq 'AdditionalDomainController') {
                                      WaitForADDomain WaitForPrimaryDC {
                                          DomainName  = $DomainDnsName
                                          WaitTimeout = 600
                                          DependsOn   = '[ADDomainController]PrimaryDC'
                                      }
                                  } Else {
                                      WaitForADDomain WaitForPrimaryDC {
                                          DomainName  = $DomainDnsName
                                          WaitTimeout = 600
                                          DependsOn   = '[ADDomain]PrimaryDC'
                                      }
                                  }
                                  ADGroup AddAdminToDomainAdminsGroup {
                                      Ensure           = 'Present'
                                      GroupName        = 'Domain Admins'
                                      GroupScope       = 'Global'
                                      Category         = 'Security'
                                      MembersToInclude = @('Administrator')
                                      Credential       = $DaCredentials
                                      DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'
                                  }
                                  If ($DeploymentType -eq 'RootDomainController') {
                                      ADForestProperties TSL {
                                          ForestName        = $DomainDnsName
                                          TombStoneLifetime = 60
                                          DependsOn         = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                      ADReplicationSite RegionSite {
                                          Name                       = $SiteName
                                          RenameDefaultFirstSiteName = $true
                                          DependsOn                  = '[WaitForADDomain]WaitForPrimaryDC', '[Service]ActiveDirectoryWebServices'
                                      }
                                      ADReplicationSubnet VPCCIDR {
                                          Name      = $VPCCIDR
                                          Site      = $SiteName
                                          DependsOn = '[ADReplicationSite]RegionSite'
                                      }                    
                                      ADGroup AddAdminToEnterpriseAdminsGroup {
                                          Ensure           = 'Present'
                                          GroupName        = 'Enterprise Admins'
                                          GroupScope       = 'Universal'
                                          Category         = 'Security'
                                          MembersToInclude = @('Administrator')
                                          Credential       = $DaCredentials
                                          DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                      ADGroup AddAdminToSchemaAdminsGroup {
                                          Ensure           = 'Present'
                                          GroupName        = 'Schema Admins'
                                          GroupScope       = 'Universal'
                                          Category         = 'Security'
                                          MembersToExclude = @('Administrator')
                                          Credential       = $DaCredentials
                                          DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                      ADOptionalFeature RecycleBin {
                                          FeatureName                       = 'Recycle Bin Feature'
                                          EnterpriseAdministratorCredential = $DaCredentials
                                          ForestFQDN                        = $DomainDnsName
                                          DependsOn                         = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                      DnsServerADZone CreateReverseLookupZone {
                                          Ensure           = 'Present'
                                          Name             = $ZoneName
                                          DynamicUpdate    = 'Secure'
                                          ReplicationScope = 'Forest'
                                          DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                      DnsServerZoneAging DnsServerZoneAging-FL {
                                          Name              = $DomainDnsName
                                          Enabled           = $true
                                          RefreshInterval   = 168
                                          NoRefreshInterval = 168
                                          DependsOn         = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                      DnsServerZoneAging DnsServerZoneAging-RL {
                                          Name              = $ZoneName
                                          Enabled           = $true
                                          RefreshInterval   = 168
                                          NoRefreshInterval = 168
                                          DependsOn         = '[DnsServerADZone]CreateReverseLookupZone'
                                      }                                     
                                  }
                                  DnsServerForwarder ForwardtoVPCDNS {
                                      IsSingleInstance = 'Yes'
                                      IPAddresses      = $VPCDNS
                                      DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'
                                  }
                                  If ($DeploymentType -eq 'RootDomainController' -or $DeploymentType -eq 'ChildDomainController') {
                                      ADKDSKey KdsKey {
                                          Ensure                   = 'Present'
                                          EffectiveTime            = ((Get-Date).addhours(-10))
                                          AllowUnsafeEffectiveTime = $True
                                          DependsOn                = '[WaitForADDomain]WaitForPrimaryDC'
                                      }
                                  }
                                  ADServicePrincipalName WSMAN-FQDN {
                                      ServicePrincipalName = "WSMAN/$InstanceNetBIOSName.$DomainDnsName"
                                      Account              = "$InstanceNetBIOSName$"
                                      DependsOn            = '[WaitForADDomain]WaitForPrimaryDC'
                                  }
                                  ADServicePrincipalName WSMAN-SN {
                                      ServicePrincipalName = "WSMAN/$InstanceNetBIOSName"
                                      Account              = "$InstanceNetBIOSName$"
                                      DependsOn            = '[WaitForADDomain]WaitForPrimaryDC'
                                  }
                                  DnsServerScavenging SetServerScavenging {
                                      DnsServer          = 'localhost'
                                      ScavengingState    = $true
                                      ScavengingInterval = '7.00:00:00'
                                      RefreshInterval    = '7.00:00:00'
                                      NoRefreshInterval  = '7.00:00:00'
                                      DependsOn          = '[WaitForADDomain]WaitForPrimaryDC'
                                  }
                                  DnsServerDiagnostics Diagnostics {
                                      DnsServer                            = 'localhost'
                                      Answers                              = $true
                                      EnableLogFileRollover                = $true
                                      EnableLoggingForLocalLookupEvent     = $true
                                      EnableLoggingForPluginDllEvent       = $true
                                      EnableLoggingForRecursiveLookupEvent = $true
                                      EnableLoggingForRemoteServerEvent    = $true
                                      EnableLoggingForServerStartStopEvent = $true
                                      EnableLoggingForTombstoneEvent       = $true
                                      EnableLoggingForZoneDataWriteEvent   = $true
                                      EnableLoggingForZoneLoadingEvent     = $true
                                      EnableLoggingToFile                  = $true
                                      EventLogLevel                        = 7
                                      FullPackets                          = $true
                                      LogFilePath                          = 'C:\DnsLogs\dns.log'
                                      MaxMBFileSize                        = 500000000
                                      Notifications                        = $true
                                      Queries                              = $true
                                      QuestionTransactions                 = $true
                                      ReceivePackets                       = $true
                                      SaveLogsToPersistentStorage          = $true
                                      SendPackets                          = $true
                                      TcpPackets                           = $true
                                      UdpPackets                           = $true
                                      UnmatchedResponse                    = $true
                                      Update                               = $true
                                      UseSystemEventLog                    = $true
                                      WriteThrough                         = $true
                                  }
                              } Else {
                                  Computer JoinDomain {
                                      Name       = $InstanceNetBIOSName
                                      DomainName = $DomainDnsName
                                      Credential = $DaCredentials
                                      DependsOn  = '[WindowsFeature]GPMC'
                                  }
                              }
                          }
                      }
                      Write-Output 'Generating MOF file'
                      $Null = ConfigInstance -OutputPath 'C:\Temp\ConfigInstance' -ConfigurationData $ConfigurationData
                  }

                  Function Invoke-DscStatusCheck {
                      $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'
                      If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                          Exit 3010
                      } Else {
                          Write-Output 'DSC Config Completed'
                      }
                  }

                  $Secret = Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}'
                  $EniConfig = Get-EniConfig
                  $DeploymentType = '{{DeploymentType}}'

                  Switch ($DeploymentType) {
                      'RootDomainController' {
                          Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'RootDomainController' -DnsInstanceIP $EniConfig.DnsIpAddress -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -LaCredentials $Secret.Credentials -MacAddress $EniConfig.MacAddress -MadDNSName '{{MadDNSName}}'-RestoreModeCredentials $Secret.Credentials -SiteName '{{global:REGION}}' -VPCCIDR '{{VPCCIDR}}'
                      }
                      'ChildDomainController' {
                          $EaSecret = Get-SecretInfo -Domain '{{ParentDomainDNSName}}' -SecretArn '{{AdministratorSecretName}}'
                          Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'ChildDomainController' -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -EaCredentials $EaSecret.DomainCredentials -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -LaCredentials $Secret.Credentials -MacAddress $EniConfig.MacAddress -ParentDomainDNSName '{{ParentDomainDNSName}}' -ParentInstanceIP '{{ParentInstanceIP}}' -RestoreModeCredentials $Secret.Credentials -VPCCIDR '{{VPCCIDR}}'
                      }
                      'AdditionalDomainController' {
                          Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'AdditionalDomainController' -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -LaCredentials $Secret.Credentials -MacAddress $EniConfig.MacAddress -ParentInstanceIP '{{ParentInstanceIP}}' -RestoreModeCredentials $Secret.Credentials -VPCCIDR '{{VPCCIDR}}'
                      } 
                      default {
                          Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'Member' -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -MacAddress $EniConfig.MacAddress
                      }
                  }

                  Start-DscConfiguration 'C:\Temp\ConfigInstance' -Wait -Verbose -Force
                  Invoke-DscStatusCheck

                  If ($DeploymentType -eq 'RootDomainController') {
                      Function Get-SecretInfo {
                          [CmdletBinding()]
                          Param (
                              [Parameter(Mandatory = $True)][String]$Domain,
                              [Parameter(Mandatory = $True)][String]$SecretArn
                          )

                          Write-Output "Getting $SecretArn Secret"
                          Try {
                              $SecretContent = Get-SECSecretValue -SecretId $SecretArn -ErrorAction Stop | Select-Object -ExpandProperty 'SecretString' | ConvertFrom-Json -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get $SecretArn Secret $_"
                              Exit 1
                          }

                          Write-Output 'Creating PSCredential object from Secret'
                          $Username = $SecretContent.username
                          $UserPassword = ConvertTo-SecureString ($SecretContent.password) -AsPlainText -Force
                          $DomainCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ("$Domain\$Username", $UserPassword)
                          $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ($Username, $UserPassword)

                          $Output = [PSCustomObject][Ordered]@{
                              'Credentials'       = $Credentials
                              'DomainCredentials' = $DomainCredentials
                              'Username'          = $Username
                              'UserPassword'      = $UserPassword
                          }

                          Return $Output
                      }

                      Function Invoke-TrustAction {
                          [CmdletBinding()]
                          Param(
                              [parameter(Mandatory = $true)][String]$RemoteFQDN,
                              [parameter(Mandatory = $true)][String]$TrustDirection,
                              [parameter(Mandatory = $true)][String]$TrustPassword
                          )

                          $LocalForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest() 
                          $AdTrustDir = [System.DirectoryServices.ActiveDirectory.TrustDirection]::$TrustDirection
                          $Null = Clear-DnsServerCache -Force -ErrorAction SilentlyContinue
                          $Null = Clear-DnsClientCache -ErrorAction SilentlyContinue
                          $LocalForest.CreateLocalSideOfTrustRelationship($RemoteFQDN, $AdTrustDir, $TrustPassword)
                          $LocalForest.VerifyOutboundTrustRelationship($RemoteFQDN)
                          & ksetup.exe /SetEncTypeAttr $RemoteFQDN 'RC4-HMAC-MD5' 'AES128-CTS-HMAC-SHA1-96' 'AES256-CTS-HMAC-SHA1-96'
                      }

                      Function Add-FSxOuAcl {
                          [CmdletBinding()]
                          param(
                              [Parameter(Mandatory = $true)][string]$AclPath,
                              [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                              [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,
                              [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,
                              [Parameter(Mandatory = $false)][Guid]$ObjectGuid,
                              [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,
                              [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid
                          )

                          Import-Module -Name 'ActiveDirectory' -Force

                          [Security.Principal.SecurityIdentifier]$IdentityReference = $IdentityReference | Select-Object -ExpandProperty 'Value'

                          $ArgumentList = $IdentityReference, $ActiveDirectoryRights, $AccessControlType, $ObjectGuid, $ActiveDirectorySecurityInheritance, $InheritedObjectGuid
                          $ArgumentList = $ArgumentList.Where({ $_ -ne $Null })

                          Write-Output 'Creating ACL object'
                          Try {
                              $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to create ACL object $_"
                              Exit 1
                          }

                          Write-Output "Getting ACL for $AclPath"
                          Try {
                              $ObjectAcl = Get-Acl -Path "AD:\$AclPath" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get ACL for $AclPath $_"
                              Exit 1
                          }

                          $ObjectAcl.AddAccessRule($Rule) 

                          Write-Output "Setting ACL for $AclPath"
                          Try {
                              Set-Acl -AclObject $ObjectAcl -Path "AD:\$AclPath" -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to set ACL for $AclPath $_"
                              Exit 1
                          }
                      }

                      If ('{{IntegrateFsxOnprem}}' -eq 'Yes') {
                          Write-Output 'Getting domain information'
                          Try {
                              $Domain = Get-ADDomain -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get domain information $_"
                              Exit 1
                          }

                          $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'

                          $FsxOU = "OU=FSx,{{FsxOnpremParentOu}}"

                          Write-Output 'Creating OU FSx'
                          Try {
                              New-ADOrganizationalUnit -Name 'FSx' -Path '{{FsxOnpremParentOu}}' -ProtectedFromAccidentalDeletion $True -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to create OU FSx $_"
                              Exit 1
                          }

                          $UserPassword = (Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}').UserPassword

                          $User = @{
                              AccountPassword        = $UserPassword
                              Name                   = 'FSxServiceAccount'
                              DisplayName            = 'FSxServiceAccount'
                              SamAccountName         = 'FSxServiceAccount'
                              UserPrincipalName      = "FSxServiceAccount@$FQDN"
                              KerberosEncryptionType = 'AES128', 'AES256'
                              PasswordNeverExpires   = $True
                              Enabled                = $True
                              Path                   = $FsxOU 
                          }

                          Write-Output 'Creating FSxServiceAccount'
                          Try {
                              New-ADUser @User
                          } Catch [System.Exception] {
                              Write-Output "Failed to create FSxServiceAccount $_"
                              Exit 1
                          }

                          Write-Output 'Creating FSx Admins Group'
                          Try {
                              New-ADGroup -DisplayName 'FSxAdmins' -GroupCategory 'Security' -GroupScope 'DomainLocal' -Name 'FSxAdmins' -Path $FsxOU -SamAccountName 'FSxAdmins'
                          } Catch [System.Exception] {
                              Write-Output "Failed to create FSx Admins Group $_"
                              Exit 1
                          }

                          Write-Output 'Getting RootDSE information'
                          Try {
                              $RootDse = Get-ADRootDSE -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get RootDSE information $_"
                              Exit 1
                          }

                          Write-Output 'Getting computer SchemaNamingContext'
                          Try {
                              [System.GUID]$ComputerNameGuid = (Get-ADObject -SearchBase $RootDse.SchemaNamingContext -Filter { lDAPDisplayName -eq 'computer' } -Properties 'schemaIDGUID' -ErrorAction Stop).schemaIDGUID
                          } Catch [System.Exception] {
                              Write-Output "Failed to get computer SchemaNamingContext $_"
                              Exit 1
                          }

                          $ExtendedRightsMap = @{ }

                          Write-Output 'Getting ExtendedRightsMap'
                          Try {
                              $ErNamingContexts = Get-ADObject -SearchBase $RootDse.ConfigurationNamingContext -LDAPFilter '(&(objectclass=controlAccessRight)(rightsguid=*))' -Properties displayName, rightsGuid -ErrorAction Stop
                          } Catch [System.Exception] {
                              Write-Output "Failed to get ExtendedRightsMap $_"
                              Exit 1
                          }

                          ForEach ($ErNamingContext in $ErNamingContexts) {
                              $ExtendedRightsMap[$ErNamingContext.displayName] = [System.GUID]$ErNamingContext.rightsGuid
                          }

                          $NullGuid = [System.Guid]::empty

                          $AclRules = @(
                              @{
                                  ActiveDirectoryRights              = 'CreateChild, DeleteChild'
                                  AccessControlType                  = 'Allow'
                                  ObjectGUID                         = $ComputerNameGuid
                                  ActiveDirectorySecurityInheritance = 'All'
                                  InheritedObjectGuid                = $NullGuid
                              },
                              @{
                                  ActiveDirectoryRights              = 'ListChildren, ReadProperty'
                                  AccessControlType                  = 'Allow'
                                  ObjectGUID                         = $NullGuid
                                  ActiveDirectorySecurityInheritance = 'None'
                                  InheritedObjectGuid                = $NullGuid
                              },
                              @{
                                  ActiveDirectoryRights              = 'ReadProperty, WriteProperty'
                                  AccessControlType                  = 'Allow'
                                  ObjectGUID                         = $ExtendedRightsMap['Account Restrictions']
                                  ActiveDirectorySecurityInheritance = 'Descendents'
                                  InheritedObjectGuid                = $ComputerNameGuid
                              },
                              @{
                                  ActiveDirectoryRights              = 'Self'
                                  AccessControlType                  = 'Allow'
                                  ObjectGUID                         = $ExtendedRightsMap['Validated write to service principal name']
                                  ActiveDirectorySecurityInheritance = 'Descendents'
                                  InheritedObjectGuid                = $ComputerNameGuid
                              },
                              @{
                                  ActiveDirectoryRights              = 'Self'
                                  AccessControlType                  = 'Allow'
                                  ObjectGUID                         = $ExtendedRightsMap['Validated write to DNS host name']
                                  ActiveDirectorySecurityInheritance = 'Descendents'
                                  InheritedObjectGuid                = $ComputerNameGuid
                              },
                              @{
                                  ActiveDirectoryRights              = 'ExtendedRight'
                                  AccessControlType                  = 'Allow'
                                  ObjectGUID                         = $ExtendedRightsMap['Reset Password']
                                  ActiveDirectorySecurityInheritance = 'Descendents'
                                  InheritedObjectGuid                = $ComputerNameGuid
                              }
                          )

                          Write-Output 'Getting FSxServiceAccount SID'
                          Try {
                              $IdentityReference = Get-ADUser -Identity 'FSxServiceAccount' -ErrorAction Stop | Select-Object -ExpandProperty 'SID'
                          } Catch [System.Exception] {
                              Write-Output "Failed to get FSxServiceAccount SID $_"
                              Exit 1
                          }

                          Foreach ($AclRule in $AclRules) {
                              Add-FSxOuAcl -AclPath $FsxOU -IdentityReference $IdentityReference -ActiveDirectoryRights $AclRule.ActiveDirectoryRights -AccessControlType $AclRule.AccessControlType -ObjectGUID $AclRule.ObjectGUID -ActiveDirectorySecurityInheritance $AclRule.ActiveDirectorySecurityInheritance -InheritedObjectGuid $AclRule.InheritedObjectGuid
                          }
                      }
                      
                      $TrustDirection = '{{TrustDirection}}'
                      If ($TrustDirection -ne 'None') {
                          $VPCDNS = '169.254.169.253'
                          Try {
                              Add-DnsServerConditionalForwarderZone -Name {{MadDNSName}} -ReplicationScope "Forest" -MasterServers $VPCDNS
                          } Catch [System.Exception] {
                              Write-Output "Failed to create conditional fowarder MAD domain. $_"
                              Exit 1
                          }

                          Switch ($TrustDirection) {
                              'Two-Way' { $TrustDirOnprem = 'Bidirectional' }
                              'One-Way: Outgoing' { $TrustDirOnprem = 'Inbound' }
                              'One-Way: Incoming' { $TrustDirOnprem = 'Outbound' }
                              Default { Throw 'InvalidArgument: Invalid value is passed for parameter TrustDirection' }
                          }

                          $TrustPassword = (Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{TrustSecretName}}').UserPassword

                          Write-Output 'Creating Onprem side of trust.'
                          Invoke-TrustAction -RemoteFQDN '{{MadDNSName}}' -TrustPassword $TrustPassword $TrustDirOnprem
                      }
                  }

                  $TrustDirection = '{{TrustDirection}}'
                  If ($DeploymentType -eq 'EnterpriseCAManagementInstance' -or $DeploymentType -eq 'ManagementInstance' -and $TrustDirection -ne 'None') {
                      $CidrRange = @{ IpProtocol = "-1"; IpRanges = '0.0.0.0/0' }

                      $IP = '{{VPCCIDR}}'.Split('/')[0]

                      [System.Collections.ArrayList]$IPArray = $IP -Split "\."

                      $VPCDNS = $IPArray[0, 1, 2] + 2 -Join "."

                      Write-Output 'Modifying the AWS Managed Microsoft Active Directory Security Group.'
                      Try {
                          $SecurityGroupId = Get-EC2SecurityGroup -Filter @{ Name = 'group-name'; Values = "{{MadDirectoryID}}_controllers" } -ErrorAction Stop | Select-Object -Property 'GroupId' -ExpandProperty 'GroupId'
                          $Null = Grant-EC2SecurityGroupEgress -GroupId $SecurityGroupId -IpPermission $CidrRange -ErrorAction Stop
                      } Catch [System.Exception] {
                          Write-Output "Failed to get or modify the AWS Managed Microsoft Active Directory Security Group. $_"
                          Exit 1
                      }

                      Switch ($TrustDirection) {
                          'Two-Way' {
                              $TrustDirMAD = 'Two-Way'
                          }
                          'One-Way: Outgoing' {
                              $TrustDirMAD = 'One-Way: Outgoing'
                          }
                          'One-Way: Incoming' {
                              $TrustDirMAD = 'One-Way: Incoming'
                          }
                          Default { Throw 'InvalidArgument: Invalid value is passed for parameter TrustDirection' }
                      }

                      $TrustTypeForest = New-Object -TypeName 'Amazon.DirectoryService.TrustType' -ArgumentList 'Forest'
                      $TrustDir = New-Object -TypeName 'Amazon.DirectoryService.TrustDirection' -ArgumentList $TrustDirMAD
                      $SelectiveAuthDis = New-Object -TypeName 'Amazon.DirectoryService.SelectiveAuth' -ArgumentList 'Disabled'
                      $TrustPassword = (Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}').UserPassword

                      Write-Output 'Creating trust between MAD and Onprem.'
                      Try {
                          $Trust = New-DSTrust -DirectoryId '{{MadDirectoryID}}' -ConditionalForwarderIpAddr $VPCDNS -RemoteDomainName '{{OnpremDomainDNSName}}' -SelectiveAuth $SelectiveAuthDis -TrustDirection $TrustDir -TrustType $TrustTypeForest -TrustPassword $TrustPassword
                      } Catch [System.Exception] {
                          Write-Output "Failed to create trust between MAD and Onprem. $_"
                          Exit 1
                      }

                      $Counter = 0
                      Do {
                          Try {
                              $Truststate = Get-DSTrust -DirectoryId '{{MadDirectoryID}}' -TrustId $Trust -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'TrustState' | Select-Object -ExpandProperty 'Value'
                          } Catch [System.Exception] {
                              Write-Output "Failed to get trust state $_"
                              $Truststate = $Null
                          }
                          If ($Truststate -ne 'Verified' -or $Truststate -eq 'Failed') {
                              $Counter ++
                              Write-Output 'Trust not Verified, sleeping 10 seconds and will try again.'
                              Start-Sleep -Seconds 10
                          }
                      } Until ($Truststate -eq 'Verified' -or $Truststate -eq 'Failed' -or $Counter -eq 30)

                      If ($Truststate -eq 'Failed' -or $Counter -eq 30) {
                          Write-Output 'Trust failed to create or never went Verified in 5 minutes'
                          Exit 1
                      }
                  }
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: true
                CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
            nextStep: DeployPKI
          - name: DeployPKI
            action: aws:branch
            inputs:
              Choices:
                - NextStep: runPkiSsmAuto
                  Variable: '{{DeployPki}}'
                  StringEquals: 'Yes'
                - NextStep: runAuditPolSsmAuto
                  Variable: '{{DeployPki}}'
                  StringEquals: 'No'
          - name: runPkiSsmAuto
            action: aws:executeAutomation
            onFailure: step:signalFailure
            inputs:
              DocumentName: !Ref PkiSsmAuto
              RuntimeParameters:
                AdministratorSecretName:
                  - '{{AdministratorSecretName}}'
                DeploymentType:
                  - '{{DeploymentType}}'
                DomainNetBIOSName:
                  - '{{DomainNetBIOSName}}'
                DomainType:
                  - '{{DomainType}}'
                ServerNetBIOSName:
                  - '{{ServerNetBIOSName}}'
                StackName:
                  - '{{StackName}}'
                VPCCIDR:
                  - '{{VPCCIDR}}'
            nextStep: runAuditPolSsmAuto
          - name: runAuditPolSsmAuto
            action: aws:executeAutomation
            onFailure: step:signalFailure
            inputs:
              DocumentName: !Ref AuditPolSsmAuto
              RuntimeParameters:
                ServerNetBIOSName:
                  - '{{ServerNetBIOSName}}'
                ServerRole:
                  - '{{ServerRole}}'
                StackName:
                  - '{{StackName}}'
                VPCCIDR:
                  - '{{VPCCIDR}}'
          - name: cfnSignalEnd
            action: aws:branch
            inputs:
              Choices:
                - NextStep: signalSuccess
                  Not:
                    Variable: "{{StackName}}"
                    StringEquals: ""
                - NextStep: sleepEnd
                  Variable: "{{StackName}}"
                  StringEquals: ""
          - name: signalSuccess
            action: aws:executeAwsApi
            isEnd: true
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: "{{LogicalResourceId}}"
              StackName: "{{StackName}}"
              Status: SUCCESS
              UniqueId: "{{InstanceId.InstanceId}}"
          - name: sleepEnd
            action: aws:sleep
            isEnd: true
            inputs:
              Duration: PT1S
          - name: signalFailure
            action: aws:executeAwsApi
            inputs:
              Service: cloudformation
              Api: SignalResource
              LogicalResourceId: "{{LogicalResourceId}}"
              StackName: "{{StackName}}"
              Status: FAILURE
              UniqueId: "{{InstanceId.InstanceId}}"
      DocumentType: Automation
      Tags:
        - Key: StackName
          Value:
            Ref: AWS::StackName
  ManagedAD:
      Type: AWS::DirectoryService::MicrosoftAD
      Properties:
        CreateAlias: false
        Edition: Enterprise
        EnableSso: false
        Name: !Ref MadDomainName
        Password: !Sub '{{resolve:secretsmanager:${MadAdminSecret}:SecretString:password}}'
        ShortName: !Ref MadNetBiosName
        VpcSettings:
          SubnetIds:
            - !Ref VPCPublicSubnet1Subnet
            - !Ref VPCPublicSubnet2Subnet
          VpcId: !Ref VPC
  RR53RuleMAD:
      Type: AWS::Route53Resolver::ResolverRule
      Properties:
        Name: !Sub R53-Rule-MAD-${AWS::StackName}
        DomainName: !Ref MadDomainName
        ResolverEndpointId: !Ref R53RROutbound
        RuleType: FORWARD
        TargetIps:
          - Ip: !Select [0, !GetAtt ManagedAD.DnsIpAddresses]
          - Ip: !Select [1, !GetAtt ManagedAD.DnsIpAddresses]
        Tags:
          - Key: Name
            Value: !Sub R53-Rule-MAD-${AWS::StackName}
  RR53RRAssocMad:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: !Ref RR53RuleMAD
      VPCId: !Ref VPC
  RdsDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Condition: YesIntegrateRDSwMAD
    Properties:
      AllocatedStorage: 20
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.xlarge
      DBInstanceIdentifier: RDS-MAD
      DBSubnetGroupName: !Ref RdsDBSubnetGroup
      DeleteAutomatedBackups: true
      Domain: !Ref ManagedAD
      DomainIAMRoleName: !Ref RDSRole
      Engine: sqlserver-se
      EngineVersion: 15.00.4198.2.v1
      LicenseModel: license-included
      KmsKeyId: alias/aws/rds
      MasterUsername: admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RdsAdminSecret}:SecretString:password}}'
      MultiAZ: false
      StorageEncrypted: true
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref RdsSG
      Tags:
        - Key: Name
          Value: !Sub RDS-MAD-${AWS::StackName}
  FSxMAD:
    Type: AWS::FSx::FileSystem
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Condition: YesIntegrateFsxMad
    Properties:
      FileSystemType: WINDOWS
      KmsKeyId: alias/aws/fsx
      SecurityGroupIds:
        - !Ref FsxSG
      StorageCapacity: 32
      StorageType: SSD
      SubnetIds:
        - !Ref VPCPublicSubnet1Subnet
      WindowsConfiguration:
        ActiveDirectoryId: !Ref ManagedAD
        Aliases:
          - !Join [ '.', [ DemoFSxMad, !Ref MadDomainName ] ]
        AutomaticBackupRetentionDays: 0
        DeploymentType: SINGLE_AZ_2
        ThroughputCapacity: 16
      Tags:
        - Key: Name
          Value: !Sub FSx-MAD-${AWS::StackName}
  OnPremDomainController:
    Type: AWS::EC2::Instance
    DependsOn: ManagedAD
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT60M
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            VolumeSize: 60
            VolumeType: gp3
        - DeviceName: /dev/xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            VolumeSize: 10
            VolumeType: gp3
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - Ref: OnPremDomainControllerSG
      SubnetId: !Ref VPCPublicSubnet1Subnet
      Tags:
          - Key: Domain
            Value: !Ref OnpremDomainName
          - Key: Name
            Value: ONPREM-DC01
          - Key: Role
            Value: Domain Controller
      UserData:
        Fn::Base64: !Sub
          - |
              <powershell>
              $Params = @{
                  AdministratorSecretName = '${OnPremAdministratorSecret}'
                  DeployPki = 'No'
                  DeploymentType = 'RootDomainController'
                  DomainDNSName = '${OnpremDomainName}'
                  DomainNetBIOSName = '${OnpremNetBiosName}'
                  FsxOnpremParentOu = '${FsxOnpremParentOu}'
                  IntegrateFsxOnprem = '${IntegrateFsxOnprem}'
                  LogicalResourceId = 'OnPremDomainController'
                  MadDNSName = '${MadDomainName}'
                  ServerNetBIOSName = 'ONPREM-DC01'
                  ServerRole = 'DomainController'
                  StackName = '${AWS::StackName}'
                  TrustDirection = '${TrustDirection}'
                  TrustSecretName = '${MadAdminSecret}'
                  VPCCIDR = '${VPCCIDR}'
              }
              Start-SSMAutomationExecution -DocumentName '${SsmAuto}' -Parameter $Params
              </powershell>
          -  VPCCIDR: !GetAtt VPC.CidrBlock
  ChildOnPremDomainController:
    Type: AWS::EC2::Instance
    Condition: YesCreateChildDomain
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT60M
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            VolumeSize: 60
            VolumeType: gp3
        - DeviceName: /dev/xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            VolumeSize: 10
            VolumeType: gp3
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: Baseline
      SecurityGroupIds:
        - Ref: OnPremDomainControllerSG
      SubnetId: !Ref VPCPublicSubnet1Subnet
      Tags:
        - Key: Domain
          Value: !Join [ '.', [ !Ref OnpremChildNetBiosName, !Ref OnpremDomainName ] ]
        - Key: Name
          Value: CHILD-DC01
        - Key: Role
          Value: Domain Controller
      UserData:
        Fn::Base64: !Sub
          - |
              <powershell>
              $Params = @{
                  AdministratorSecretName = '${OnPremAdministratorSecret}'
                  DeployPki = 'No'
                  DeploymentType = 'ChildDomainController'
                  DomainDNSName = '${ChildDomainDNSName}'
                  DomainNetBIOSName = '${OnpremChildNetBiosName}'
                  LogicalResourceId = 'ChildOnPremDomainController'
                  ParentDomainDNSName = '${OnpremDomainName}'
                  ParentInstanceIP = '${ParentInstanceIP}'
                  ServerNetBIOSName = 'CHILD-DC01'
                  ServerRole = 'DomainController'
                  StackName = '${AWS::StackName}'
                  VPCCIDR = '${VPCCIDR}'
              }
              Start-SSMAutomationExecution -DocumentName '${SsmAuto}' -Parameter $Params
              </powershell>
          - ChildDomainDNSName: !Join [ '.', [ !Ref OnpremChildNetBiosName, !Ref OnpremDomainName ] ]
            ParentInstanceIP: !GetAtt OnPremDomainController.PrivateIp
            VPCCIDR: !GetAtt VPC.CidrBlock
  OnpremPkiInstance:
    Type: AWS::EC2::Instance
    Condition: YesDeployOnpremPki
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: OnPremDomainController
    Properties:
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 60
              VolumeType: gp3
              Encrypted: true
              KmsKeyId: alias/aws/ebs
              DeleteOnTermination: true
          - DeviceName: /dev/xvdf
            Ebs:
              VolumeSize: 10
              VolumeType: gp3
              Encrypted: true
              KmsKeyId: alias/aws/ebs
              DeleteOnTermination: true
        IamInstanceProfile: !Ref InstanceProfile
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref DomainMembersSG
        SubnetId: !Ref VPCPublicSubnet1Subnet
        Tags:
          - Key: Name
            Value: ONPREM-PKI01
          - Key: Domain
            Value: !Ref MadDomainName
          - Key: Role
            Value: Enterpise CA
        UserData:
          Fn::Base64: !Sub
            - |
                <powershell>
                $Params = @{
                    AdministratorSecretName = '${OnPremAdministratorSecret}'
                    DeployPki = 'Yes'
                    DeploymentType = 'EnterpriseCA'
                    DomainDNSName = '${OnpremDomainName}'
                    DomainNetBIOSName = '${OnpremNetBiosName}'
                    DomainType = 'SelfManagedAD'
                    LogicalResourceId = 'OnpremPkiInstance'
                    ServerNetBIOSName = 'ONPREM-PKI01'
                    ServerRole = 'CertificateAuthority'
                    StackName = '${AWS::StackName}'
                    VPCCIDR = '${VPCCIDR}'
                }
                Start-SSMAutomationExecution -DocumentName '${SsmAuto}' -Parameter $Params
                </powershell>
            - VPCCIDR: !GetAtt VPC.CidrBlock
  FSxOnprem:
    Type: AWS::FSx::FileSystem
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Condition: YesIntegrateFSxwSMMAD
    Properties:
      FileSystemType: WINDOWS
      KmsKeyId: alias/aws/fsx
      SecurityGroupIds:
        - !Ref FsxSG
      StorageCapacity: 32
      StorageType: SSD
      SubnetIds:
        - !Ref VPCPublicSubnet1Subnet
      WindowsConfiguration:
        Aliases:
          - !Join [ '.', [ DemoFSxOnprem, !Ref OnpremDomainName ] ]
        AutomaticBackupRetentionDays: 0
        DeploymentType: SINGLE_AZ_2
        SelfManagedActiveDirectoryConfiguration:
          DnsIps:
            - !GetAtt OnPremDomainController.PrivateIp
          DomainName: !Ref OnpremDomainName
          FileSystemAdministratorsGroup: FSxAdmins
          OrganizationalUnitDistinguishedName: !Join [ ',', [ OU=FSx, !Ref FsxOnpremParentOu ] ]
          Password: !Sub '{{resolve:secretsmanager:${OnPremAdministratorSecret}:SecretString:password}}'
          UserName: FSxServiceAccount
        ThroughputCapacity: 16
      Tags:
        - Key: Name
          Value: !Sub FSx-Onprem-${AWS::StackName}
  RR53RuleOnprem:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      Name: !Sub R53-Rule-Onprem-${AWS::StackName}
      DomainName: !Ref OnpremDomainName
      ResolverEndpointId: !Ref R53RROutbound
      RuleType: FORWARD
      TargetIps:
        - Ip: !GetAtt OnPremDomainController.PrivateIp
      Tags:
        - Key: Name
          Value: !Sub R53-Rule-Onprem-${AWS::StackName}
  RR53RuleChildOnprem:
    Type: AWS::Route53Resolver::ResolverRule
    Condition: YesCreateChildDomain
    DependsOn: OnPremDomainController
    Properties:
      Name: !Sub R53-Rule-Onprem-Child-${AWS::StackName}
      DomainName: !Join [ '.', [ !Ref OnpremChildNetBiosName, !Ref OnpremDomainName ] ]
      ResolverEndpointId: !Ref R53RROutbound
      RuleType: FORWARD
      TargetIps:
        - Ip: !GetAtt ChildOnPremDomainController.PrivateIp
      Tags:
        - Key: Name
          Value: !Sub R53-Rule-Onprem-Child-${AWS::StackName}
  RR53RRAssocOnprem:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: !Ref RR53RuleOnprem
      VPCId: !Ref VPC
  MgmtInstance:
    Type: AWS::EC2::Instance
    Condition: NoDeployMadPki
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: RR53RRAssocOnprem
    Properties:
      BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 60
              VolumeType: gp3
              Encrypted: true
              KmsKeyId: alias/aws/ebs
              DeleteOnTermination: true
          - DeviceName: /dev/xvdf
            Ebs:
              VolumeSize: 10
              VolumeType: gp3
              Encrypted: true
              KmsKeyId: alias/aws/ebs
              DeleteOnTermination: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref DomainMembersSG
      SubnetId: !Ref VPCPublicSubnet1Subnet
      Tags:
        - Key: Name
          Value: MAD-MGMT01
        - Key: Domain
          Value: !Ref MadDomainName
        - Key: Role
          Value: Enterpise CA
      UserData:
        Fn::Base64: !Sub
          - |
              <powershell>
              $Params = @{
                  AdministratorSecretName = '${MadAdminSecret}'
                  DeployPki = 'No'
                  DeploymentType = 'ManagementInstance'
                  DomainDNSName = '${MadDomainName}'
                  DomainNetBIOSName = '${MadNetBiosName}'
                  DomainType = 'AWSManagedAD'
                  LogicalResourceId = 'MgmtInstance'
                  MadDirectoryID = '${ManagedAD}'
                  OnpremDomainDNSName = '${OnpremDomainName}'
                  ServerNetBIOSName = 'MAD-MGMT01'
                  ServerRole = 'Default'
                  StackName = '${AWS::StackName}'
                  TrustDirection = '${TrustDirection}'
                  VPCCIDR = '${VPCCIDR}'
              }
              Start-SSMAutomationExecution -DocumentName '${SsmAuto}' -Parameter $Params
              </powershell>
          - VPCCIDR: !GetAtt VPC.CidrBlock
  MgmtInstancewPki:
    Type: AWS::EC2::Instance
    Condition: YesDeployMadPki
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: RR53RRAssocOnprem
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            DeleteOnTermination: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: alias/aws/ebs
            DeleteOnTermination: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref DomainMembersSG
      SubnetId: !Ref VPCPublicSubnet1Subnet
      Tags:
        - Key: Name
          Value: MAD-MGMT01
        - Key: Domain
          Value: !Ref MadDomainName
        - Key: Role
          Value: Enterpise CA
      UserData:
        Fn::Base64: !Sub
          - |
              <powershell>
              $Params = @{
                  AdministratorSecretName = '${MadAdminSecret}'
                  DeployPki = 'Yes'
                  DeploymentType = 'EnterpriseCAManagementInstance'
                  DomainDNSName = '${MadDomainName}'
                  DomainNetBIOSName = '${MadNetBiosName}'
                  DomainType = 'AWSManagedAD'
                  LogicalResourceId = 'MgmtInstancewPki'
                  MadDirectoryID = '${ManagedAD}'
                  OnpremDomainDNSName = '${OnpremDomainName}'
                  ServerNetBIOSName = 'MAD-MGMT01'
                  ServerRole = 'CertificateAuthority'
                  StackName = '${AWS::StackName}'
                  TrustDirection = '${TrustDirection}'
                  VPCCIDR = '${VPCCIDR}'
              }
              Start-SSMAutomationExecution -DocumentName '${SsmAuto}' -Parameter $Params
              </powershell>
          - VPCCIDR: !GetAtt VPC.CidrBlock
Outputs:
  ChildOnpremDomainControllerInstanceID:
    Condition: YesCreateChildDomain
    Description: Child Onprem Domain Controller Instance ID
    Value: !Ref ChildOnPremDomainController
  ChildOnpremDomainControllerInstancePrivateIP:
    Condition: YesCreateChildDomain
    Description: Child Onprem Domain Controller Instance Private IP
    Value: !GetAtt ChildOnPremDomainController.PrivateIp
  DomainMemberSGID:
      Description: Domain Members Security Group ID
      Value: !Ref DomainMembersSG
  MadAdminSecretArn:
    Description: MAD Admin Account Secret ARN
    Value: !Ref MadAdminSecret
  MADDirectoryID:
    Description: Directory Services ID
    Value: !Ref ManagedAD
  MADMgmtInstanceID:
    Condition: NoDeployMadPki
    Description: MAD Mgmt Instance ID
    Value: !Ref MgmtInstance
  MADMgmtInstancePrivateIP:
    Condition: NoDeployMadPki
    Description: MAD Mgmt Instance Private IP
    Value: !GetAtt MgmtInstance.PrivateIp
  MADMgmtInstancewPkiID:
    Condition: YesDeployMadPki
    Description: MAD Mgmt Instance ID
    Value: !Ref MgmtInstancewPki
  MADMgmtInstancewPkiPrivateIP:
    Condition: YesDeployMadPki
    Description: MAD Mgmt Instance Private IP
    Value: !GetAtt MgmtInstancewPki.PrivateIp
  MADPrivateIP1:
    Description: MAD DNS IP 1
    Value: !Select [0, !GetAtt ManagedAD.DnsIpAddresses]
  MADPrivateIP2:
    Description: MAD DNS IP 2
    Value: !Select [1, !GetAtt ManagedAD.DnsIpAddresses]
  OnPremAdministratorSecretArn:
    Description: OnPrem AD Administrator Secret ARN
    Value: !Ref OnPremAdministratorSecret
  OnpremDomainControllerInstanceID:
    Description: Onprem Domain Controller Instance ID
    Value: !Ref OnPremDomainController
  OnpremDomainControllerInstancePrivateIP:
    Description: Onprem Domain Controller Instance Private IP
    Value: !GetAtt OnPremDomainController.PrivateIp
  OnpremPkiInstanceID:
    Condition: YesDeployOnpremPki
    Description: Onprem PKI Instance ID
    Value: !Ref OnpremPkiInstance
  OnpremPkiInstancePrivateIP:
    Condition: YesDeployOnpremPki
    Description: Onprem PKI Instance Private IP
    Value: !GetAtt OnpremPkiInstance.PrivateIp
  OnPremDomainControllerSGID:
    Description: Onprem Domain Controllers Security Group ID
    Value: !Ref OnPremDomainControllerSG

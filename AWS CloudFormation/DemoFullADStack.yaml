AWSTemplateFormatVersion: "2010-09-09"
Parameters:
    AdminPassword:
        AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
        Default: P@ssw0rd
        Description: Password for the Admin and Administrator accounts (Also used to create the trust)
        MaxLength: "127"
        MinLength: "7"
        NoEcho: "true"
        Type: String
    AMI:
        Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base
        Description: System Manager parameter value for latest Windows Server AMI
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    MADDomainName:
        AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
        Default: corp.example.com
        Description: Fully qualified domain name (FQDN) of the AWS Managed Microsoft AD domain e.g. corp.example.com
        MaxLength: "255"
        MinLength: "2"
        Type: String
    MADNetBIOSName:
        AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
        Default: CORP
        Description: NetBIOS name of the AWS Managed Microsoft AD domain (up to 15 characters) e.g. CORP
        MaxLength: "15"
        MinLength: "1"
        Type: String
    OnpremDomainName:
        AllowedPattern: ^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$
        Default: onpremises.local
        Description: Fully qualified domain name (FQDN) of the On-Premises domain e.g. onpremises.local
        MaxLength: "255"
        MinLength: "2"
        Type: String
    OnpremNetBIOSName:
        AllowedPattern: ^[^\\/:*?"<>|.]+[^\\/:*?"<>|]*$
        Default: ONPREMISES
        Description: NetBIOS name of the On-Premises domain (up to 15 characters) e.g. ONPREMISES
        MaxLength: "15"
        MinLength: "1"
        Type: String
    RDSPassword:
        AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
        Default: Passw0rd1
        Description: Password for the RDS Instance.
        MaxLength: "32"
        MinLength: "8"
        NoEcho: "true"
        Type: String
    TrustDirection:
        AllowedValues:
        - Two-Way
        - One-Way
        Default: Two-Way
        Description: Trust Direction from AWS Managed Microsft AD to on-premises domain.
        Type: String
Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: Configuration
              Parameters:
                  - AdminPassword
                  - AMI
                  - MADDomainName
                  - MADNetBIOSName
                  - OnpremDomainName
                  - OnpremNetBIOSName
                  - RDSPassword
                  - TrustDirection
        ParameterLabels:
            AdminPassword:
                default: Admin & Trusts Password
            AMI:
                default: SSM Parameter Value for Latest AMI ID
            MADDomainName:
                default: AWS Managed Microsft AD Domain DNS Name
            MADNetBIOSName:
                default: AWS Managed Microsft AD Domain NetBIOS Name
            OnpremDomainName:
                default: On-Premises Domain DNS Name
            OnpremNetBIOSName:
                default: On-Premises Domain NetBIOS Name
            RDSPassword:
                default: Amazon RDS SQL Instance Password
            TrustDirection:
                default: Trust Direction from AWS Managed Microsft AD
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/24
            EnableDnsHostnames: true
            EnableDnsSupport: true
            InstanceTenancy: default
            Tags:
                - Key: Name
                  Value: Demo-VPC
    VPCPublicSubnet1Subnet:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select
                - 0
                - Fn::GetAZs: !Ref AWS::Region
            CidrBlock: !Select
                - 0
                - !Cidr
                  - !GetAtt VPC.CidrBlock
                  - 2
                  - 6
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: Demo-Subnet1
            VpcId: !Ref VPC
    VPCPublicSubnet1RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name
                  Value: Demo-Subnet1
            VpcId: !Ref VPC
    VPCPublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId:
                Ref: VPCPublicSubnet1RouteTable
            SubnetId:
                Ref: VPCPublicSubnet1Subnet
    VPCPublicSubnet1DefaultRoute:
        Type: AWS::EC2::Route
        DependsOn: VPCVPCGW
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: VPCIGW
            RouteTableId:
                Ref: VPCPublicSubnet1RouteTable
    VPCPublicSubnet2Subnet:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: !Select
                - 1
                - Fn::GetAZs: !Ref AWS::Region
            CidrBlock: !Select
                - 1
                - !Cidr
                  - !GetAtt VPC.CidrBlock
                  - 2
                  - 6
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: Demo-Subnet2
            VpcId: !Ref VPC
    VPCPublicSubnet2RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            Tags:
                - Key: Name
                  Value: Demo-Subnet2
            VpcId: !Ref VPC
    VPCPublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId:
                Ref: VPCPublicSubnet2RouteTable
            SubnetId:
                Ref: VPCPublicSubnet2Subnet
    VPCPublicSubnet2DefaultRoute:
        DependsOn: VPCVPCGW
        Type: AWS::EC2::Route
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: VPCIGW
            RouteTableId:
                Ref: VPCPublicSubnet2RouteTable
    VPCIGW:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: Demo-IGW
    VPCVPCGW:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId:
                Ref: VPCIGW
            VpcId: !Ref VPC
    InstanceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action: sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                Version: "2012-10-17"
            ManagedPolicyArns:
                - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
                - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
            Path: /
            Policies:
                - PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Action: cloudformation:SignalResource
                            Effect: Allow
                            Resource: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
                          - Action: ssm:SendCommand
                            Effect: Allow
                            Resource:
                                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunRemoteScript
                                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:*:document/AWS-RunPowerShellScript
                          - Action: ssm:SendCommand
                            Condition:
                                StringEquals:
                                    ? ssm:ResourceTag/aws:cloudformation:stack-name
                                    : Ref: AWS::StackName
                            Effect: Allow
                            Resource: !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
                          - Action:
                                - ds:AddRegion
                                - ds:CreateConditionalForwarder
                                - ds:CreateLogSubscription
                                - ds:CreateMicrosoftAD
                                - ds:CreateTrust
                                - ds:DeleteConditionalForwarder
                                - ds:DeleteTrust
                                - ds:Describe*
                                - ds:Get*
                                - ds:List*
                                - ds:RegisterEventTopic
                                - ds:RejectSharedDirectory
                                - ds:RemoveRegion
                                - ds:ShareDirectory
                                - ds:UnshareDirectory
                                - ds:UpdateConditionalForwarder
                                - ds:UpdateTrust
                                - ds:VerifyTrust
                                - ec2:AuthorizeSecurityGroupEgress
                                - ec2:AuthorizeSecurityGroupIngress
                                - ec2:CreateNetworkInterface
                                - ec2:CreateSecurityGroup
                                - ec2:DeleteNetworkInterface
                                - ec2:DeleteSecurityGroup
                                - ec2:DescribeInstances
                                - ec2:DescribeNetworkInterfaces
                                - ec2:DescribeSubnets
                                - ec2:DescribeVpcs
                                - ec2:RevokeSecurityGroupEgress
                                - ec2:RevokeSecurityGroupIngress
                                - ec2:DescribeSecurityGroups
                                - logs:CreateLogGroup
                                - logs:GetLogEvents
                                - logs:PutResourcePolicy
                                - sns:GetTopicAttributes
                                - sns:ListSubscriptions
                                - sns:ListSubscriptionsByTopic
                                - sns:ListTopics
                                - ssm:DescribeInstanceInformation
                                - ssm:GetAutomationExecution
                                - ssm:ListCommands
                                - ssm:ListCommandInvocations
                                - ssm:StartAutomationExecution
                                - sts:GetCallerIdentity
                            Effect: Allow
                            Resource: "*"
                  PolicyName: Inline-Policy
            Tags:
                - Key: StackName
                  Value:
                      Ref: AWS::StackName
    InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - Ref: InstanceRole
    RDSRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action: sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - rds.amazonaws.com
                Version: "2012-10-17"
            ManagedPolicyArns:
                - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonRDSDirectoryServiceAccess
            Path: /
            Tags:
                - Key: StackName
                  Value:
                      Ref: AWS::StackName
    DomainMemberSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: MAD Domain Members and RDS SG
            SecurityGroupIngress:
                - Description: All Local VPC Traffic
                  FromPort: -1
                  IpProtocol: "-1"
                  CidrIp: 10.0.0.0/24
                  ToPort: -1
                - Description: RDP Access
                  FromPort: 3389
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 3389
                - Description: SQL Access
                  FromPort: 1433
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 1433
            Tags:
                - Key: Name
                  Value: DomainMembersSecurityGroup
            VpcId: !Ref VPC
    OnPremDomainControllerSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Domain Controllers Security Group
            SecurityGroupIngress:
                - Description: DNS
                  FromPort: 53
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 53
                - Description: DNS
                  FromPort: 53
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 53
                - Description: Kerberos
                  FromPort: 88
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 88
                - Description: Kerberos
                  FromPort: 88
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 88
                - Description: Windows Time
                  FromPort: 123
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 123
                - Description: RPC Port
                  FromPort: 135
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 135
                - Description: Netlogon
                  FromPort: 138
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 138
                - Description: LDAP
                  FromPort: 389
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 389
                - Description: LDAP
                  FromPort: 389
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 389
                - Description: SMB
                  FromPort: 445
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 445
                - Description: SMB
                  FromPort: 445
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 445
                - Description: Kerberos Set & Change Password
                  FromPort: 464
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 464
                - Description: Kerberos Set & Change Password
                  FromPort: 464
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 464
                - Description: LDAP over SSL
                  FromPort: 636
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 636
                - Description: LDAP Global Catalog
                  FromPort: 3268
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 3268
                - Description: LDAP Global Catalog over SSL
                  FromPort: 3269
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 3269
                - Description: RDP Access
                  FromPort: 3389
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 3389
                - Description: WinRM
                  FromPort: 5985
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 5985
                - Description: SOAP ADWS
                  FromPort: 9389
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 9389
                - Description: Random RPC
                  FromPort: 49152
                  IpProtocol: tcp
                  CidrIp: 10.0.0.0/24
                  ToPort: 65535
                - Description: Random RPC
                  FromPort: 49152
                  IpProtocol: udp
                  CidrIp: 10.0.0.0/24
                  ToPort: 65535
            Tags:
                - Key: Name
                  Value: DomainControllersSecurityGroup
            VpcId: !Ref VPC
    OnPremDomainControllerIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            IpProtocol: "-1"
            Description: Security Group Rule between Domain Controllers
            FromPort: -1
            GroupId:
                Ref: OnPremDomainControllerSG
            SourceSecurityGroupId:
                Ref: OnPremDomainControllerSG
            ToPort: -1
    ManagedAD:
        Type: AWS::DirectoryService::MicrosoftAD
        Properties:
            CreateAlias: false
            Edition: Enterprise
            EnableSso: false
            Name: !Ref MADDomainName
            Password: !Ref AdminPassword
            ShortName: !Ref MADNetBIOSName
            VpcSettings:
                SubnetIds:
                    - !Ref VPCPublicSubnet1Subnet
                    - !Ref VPCPublicSubnet2Subnet
                VpcId: !Ref VPC
    MgmtInstanceSSMAuto:
        Type: AWS::SSM::Document
        Properties:
            Content:
                schemaVersion: "0.3"
                description: Deploy AD with SSM Automation
                parameters:
                    AdminPassword:
                        description: Password for the Admin account (Also used to create the trust)
                        type: String
                    DomainDNSName:
                        description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
                        type: String
                    DomainNetBIOSName:
                        description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE
                        type: String
                    ExistingDcIP01:
                        description: IP of DNS server that can resolve domain (Must be accessible)
                        type: String
                    ExistingDcIP02:
                        description: IP of DNS server that can resolve domain (Must be accessible)
                        type: String
                    MgmtServerNetBIOSName:
                        description: NetBIOS name of the Management Instance server (up to 15 characters)
                        type: String
                    StackName:
                        description: Stack Name Input for cfn resource signal
                        type: String
                    URLSuffix:
                        description: AWS URL suffix
                        type: String
                    VPCCIDR:
                        description: CIDR Block for the VPC
                        type: String
                mainSteps:
                    - name: mgmtInstanceId
                      action: aws:executeAwsApi
                      onFailure: step:signalFailure
                      inputs:
                          Service: ec2
                          Api: DescribeInstances
                          Filters:
                              - Name: tag:Name
                                Values: ["{{MgmtServerNetBIOSName}}"]
                              - Name: tag:aws:cloudformation:stack-name
                                Values: ["{{StackName}}"]
                              - Name: instance-state-name
                                Values: ["running"]
                      outputs:
                          - Name: InstanceId
                            Selector: $.Reservations[0].Instances[0].InstanceId
                            Type: String
                      nextStep: intializeInstance
                    - name: intializeInstance
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{mgmtInstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                                    $Modules = @(
                                        @{
                                            Name = 'NetworkingDsc'
                                            Version = '8.2.0'
                                        },
                                        @{
                                            Name = 'ActiveDirectoryDsc'
                                            Version = '6.0.1'
                                        },
                                        @{
                                            Name = 'ComputerManagementDsc'
                                            Version = '8.5.0'
                                        },
                                        @{
                                            Name = 'DnsServerDsc'
                                            Version = '3.0.0'
                                        }
                                    )

                                    Function New-VolumeFromRawDisk {
                                        Write-Output 'Finding RAW Disk'
                                        $Counter = 0
                                        Do {
                                            Try {
                                                $BlankDisks = Get-Disk -ErrorAction Stop | Where-Object { $_.PartitionStyle -eq 'RAW' } | Select-Object -ExpandProperty 'Number'
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get disk $_"
                                                $BlankDisks = $Null
                                            }
                                            If (-not $BlankDisks) {
                                                $Counter ++
                                                Write-Output 'RAW Disk not found sleeping 10 seconds and will try again.'
                                                Start-Sleep -Seconds 10
                                            }
                                        } Until ($BlankDisks -or $Counter -eq 12)

                                        If ($Counter -ge 12) {
                                            Write-Output 'RAW Disk not found exiting'
                                            Return
                                        }

                                        Foreach ($BlankDisk in $BlankDisks) {
                                            Write-Output 'Data Volume not initialized attempting to bring online'
                                            Try {
                                                Initialize-Disk -Number $BlankDisk -PartitionStyle 'GPT' -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed attempting to bring online Data Volume $_"
                                                Exit 1
                                            }

                                            Start-Sleep -Seconds 5

                                            Write-Output 'Data Volume creating new partition'
                                            Try {
                                                $DriveLetter = New-Partition -DiskNumber $BlankDisk -AssignDriveLetter -UseMaximumSize -ErrorAction Stop | Select-Object -ExpandProperty 'DriveLetter'
                                            } Catch [System.Exception] {
                                                Write-Output "Failed creating new partition $_"
                                                Exit 1
                                            }

                                            Start-Sleep -Seconds 5

                                            Write-Output 'Data Volume formatting partition'
                                            Try {
                                                $Null = Format-Volume -DriveLetter $DriveLetter -FileSystem 'NTFS' -NewFileSystemLabel 'Data' -Confirm:$false -Force -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed formatting partition $_"
                                                Exit 1
                                            }

                                            Try {
                                                $Null = Get-CimInstance -ClassName 'Win32_Volume' -Filter "DriveLetter='$($DriveLetter):'" -ErrorAction Stop | Set-CimInstance -Arguments @{ IndexingEnabled = $False }
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to turn off indexing $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Invoke-PreConfig {
                                        Write-Output 'Temporarily disabling Windows Firewall'
                                        Try {
                                            Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled False -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to disable Windows Firewall $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating file directory for DSC public cert'
                                        Try {
                                            $Null = New-Item -Path 'C:\Temp\publickeys' -ItemType 'Directory' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create publickeys file directory $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating certificate to encrypt credentials in MOF file'
                                        Try {
                                            $cert = New-SelfSignedCertificate -Type 'DocumentEncryptionCertLegacyCsp' -DnsName 'DscEncryptCert' -HashAlgorithm 'SHA256' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create self signed cert $_"
                                            Exit 1
                                        }

                                        Write-Output 'Exporting the self signed public key certificate'
                                        Try {
                                            $Null = $cert | Export-Certificate -FilePath 'C:\Temp\publickeys\DscPublicKey.cer' -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to copy self signed cert to publickeys directory $_"
                                            Exit 1
                                        }    
                                    }

                                    Function Invoke-LcmConfig {
                                        Write-Output 'Getting the DSC cert thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        [DSCLocalConfigurationManager()]
                                        Configuration LCMConfig
                                        {
                                            Node 'localhost' {
                                                Settings {
                                                    RefreshMode = 'Push'
                                                    ConfigurationModeFrequencyMins = 15
                                                    ActionAfterReboot = 'StopConfiguration'
                                                    RebootNodeIfNeeded = $false
                                                    ConfigurationMode = 'ApplyAndAutoCorrect'
                                                    CertificateId = $DscCertThumbprint
                                                }
                                            }
                                        }

                                        Write-Output 'Generating MOF file for LCM'
                                        LCMConfig -OutputPath 'C:\Temp\LCMConfig'

                                        Write-Output 'Sets LCM configuration to MOF generated in previous command'
                                        Try {
                                            Set-DscLocalConfigurationManager -Path 'C:\Temp\LCMConfig' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set LCM configuration $_"
                                            Exit 1
                                        }
                                    }

                                    Write-Output 'Installing NuGet Package Provider'
                                    Try {
                                        $Null = Install-PackageProvider -Name 'NuGet' -MinimumVersion '2.8.5' -Force -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to install NuGet Package Provider $_"
                                        Exit 1
                                    }

                                    Write-Output 'Setting PSGallery Respository to trusted'
                                    Try {
                                        Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to set PSGallery Respository to trusted $_"
                                        Exit 1
                                    }

                                    Write-Output 'Installing the needed Powershell DSC modules'
                                    Foreach ($Module in $Modules) {
                                        Try {
                                            Install-Module -Name $Module.Name -RequiredVersion $Module.Version -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to Import Modules $_"
                                            Exit 1
                                        }
                                    }

                                    New-VolumeFromRawDisk
                                    Invoke-PreConfig
                                    Invoke-LcmConfig

                                    Write-Output 'Installing SQL Server Management Studio'
                                    (New-Object -TypeName 'System.Net.WebClient').DownloadFile('https://aka.ms/ssmsfullsetup', 'C:\Temp\SSMS-Setup.exe')
                                    $ArgumentList = '/Quiet'
                                    Try {
                                        $Process = Start-Process -FilePath 'C:\Temp\SSMS-Setup.exe' -ArgumentList $ArgumentList -NoNewWindow -Wait -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to install SQL Server Management Studio $_"
                                        #Exit 1
                                    }

                                    Write-Output 'Getting certificate AutoEnrollment policy'
                                    Try {
                                        $CertEnrollmentActive = Get-CertificateAutoEnrollmentPolicy -context 'Machine' -Scope 'Local' | Select-Object -ExpandProperty 'PolicyState' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get certificate AutoEnrollment policy $_"
                                        Exit 1
                                    }

                                    If ($CertEnrollmentActive -ne 'Enabled') {
                                        Write-Output 'Setting certificate AutoEnrollment policy'
                                        Try {
                                            Set-CertificateAutoEnrollmentPolicy -ExpirationPercentage 10 -PolicyState 'Enabled' -EnableTemplateCheck -EnableMyStoreManagement -StoreName 'MY' -context 'Machine' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set certificate AutoEnrollment policy $_"
                                            Exit 1
                                        }
                                    }
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: configureInstance
                    - name: configureInstance
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{mgmtInstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Get-EniConfig {
                                        Write-Output 'Getting network configuration'
                                        Try {
                                            $NetIpConfig = Get-NetIPConfiguration -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get network configuration $_"
                                            Exit 1
                                        }

                                        Write-Output 'Grabbing the current gateway address in order to static IP correctly'
                                        $GatewayAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4DefaultGateway' | Select-Object -ExpandProperty 'NextHop'

                                        Write-Output 'Formatting IP address in format needed for IPAdress DSC resource'
                                        $IpAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'IpAddress'
                                        $Prefix = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'PrefixLength'
                                        $IpAddr = 'IP/CIDR' -replace 'IP', $IpAddress -replace 'CIDR', $Prefix

                                        Write-Output 'Getting MAC address'
                                        Try {
                                            $MacAddress = Get-NetAdapter -ErrorAction Stop | Select-Object -ExpandProperty 'MacAddress'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get MAC address $_"
                                            Exit 1
                                        }

                                        $Output = [PSCustomObject][Ordered]@{
                                            'GatewayAddress' = $GatewayAddress
                                            'IpAddress' = $IpAddr
                                            'MacAddress' = $MacAddress
                                        }

                                        Return $Output
                                    }

                                    Function Set-DscConfiguration {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$DaCredentials,
                                            [Parameter(Mandatory = $true)][string]$DomainDNSName,
                                            [Parameter(Mandatory = $true)][string]$DomainNetBIOSName,
                                            [Parameter(Mandatory = $false)][string]$ExistingDcIP01,
                                            [Parameter(Mandatory = $false)][string]$ExistingDcIP02,
                                            [Parameter(Mandatory = $true)][string]$GatewayAddress,
                                            [Parameter(Mandatory = $true)][string]$InstanceIP,
                                            [Parameter(Mandatory = $true)][string]$InstanceNetBIOSName,
                                            [Parameter(Mandatory = $true)][string]$MacAddress
                                        )

                                        $VPCDNS = '169.254.169.253'

                                        Write-Output 'Getting the DSC encryption thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating configuration data block that has the certificate information for DSC configuration processing'
                                        $ConfigurationData = @{
                                            AllNodes = @(
                                                @{
                                                    NodeName = '*'
                                                    CertificateFile = 'C:\Temp\publickeys\DscPublicKey.cer'
                                                    Thumbprint = $DscCertThumbprint
                                                    PSDscAllowDomainUser = $true
                                                },
                                                @{
                                                    NodeName = 'localhost'
                                                }
                                            )
                                        }

                                        Configuration ConfigInstance {
                                            Import-DscResource -ModuleName 'PSDesiredStateConfiguration', 'NetworkingDsc', 'ComputerManagementDsc', 'DnsServerDsc', 'ActiveDirectoryDsc'
                                            Node LocalHost {
                                                NetAdapterName RenameNetAdapterPrimary {
                                                    NewName = 'Primary'
                                                    MacAddress = $MacAddress
                                                }
                                                PowerPlan 'SetPlanHighPerformance' {
                                                    IsSingleInstance = 'Yes'
                                                    Name = 'High performance'
                                                }
                                                NetAdapterAdvancedProperty JumboPacket {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*JumboPacket'
                                                    RegistryValue = 9015
                                                }
                                                NetAdapterAdvancedProperty ReceiveBuffers {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*ReceiveBuffers'
                                                    RegistryValue = 8192
                                                }
                                                NetAdapterAdvancedProperty TransmitBuffers {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*TransmitBuffers'
                                                    RegistryValue = 1024
                                                }
                                                NetBios DisableNetBios {
                                                    InterfaceAlias = 'Primary'
                                                    Setting = 'Disable'
                                                }
                                                NetIPInterface DisableDhcp {
                                                    Dhcp = 'Disabled'
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'
                                                }
                                                IPAddress SetIP {
                                                    IPAddress = $InstanceIP
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[NetIPInterface]DisableDhcp'
                                                }
                                                DefaultGatewayAddress SetDefaultGateway {
                                                    Address = $GatewayAddress
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[IPAddress]SetIP'
                                                }
                                                DnsServerAddress DnsServerAddress {
                                                    Address = $ExistingDcIP01, $ExistingDcIP02, '169.254.169.253'
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[DefaultGatewayAddress]SetDefaultGateway'
                                                }
                                                DnsConnectionSuffix DnsConnectionSuffix {
                                                    InterfaceAlias = 'Primary'
                                                    ConnectionSpecificSuffix = $DomainDNSName
                                                    RegisterThisConnectionsAddress = $True
                                                    UseSuffixWhenRegistering = $False
                                                    DependsOn = '[DnsServerAddress]DnsServerAddress'
                                                }
                                                WindowsFeature DnsTools {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-DNS-Server'
                                                    DependsOn = '[DnsConnectionSuffix]DnsConnectionSuffix'
                                                }
                                                WindowsFeature RSAT-AD-Tools {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-AD-Tools'
                                                    DependsOn = '[WindowsFeature]DnsTools'
                                                }
                                                WindowsFeature RSAT-ADDS {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-ADDS'
                                                    DependsOn = '[WindowsFeature]RSAT-AD-Tools'
                                                }
                                                WindowsFeature GPMC {
                                                    Ensure = 'Present'
                                                    Name = 'GPMC'
                                                    DependsOn = '[WindowsFeature]RSAT-ADDS'
                                                }
                                                Computer JoinDomain {
                                                    Name = $InstanceNetBIOSName
                                                    DomainName = $DomainDnsName
                                                    Credential = $DaCredentials
                                                    DependsOn  = '[WindowsFeature]GPMC'
                                                }
                                            }
                                        }
                                        Write-Output 'Generating MOF file'
                                        ConfigInstance -OutputPath 'C:\Temp\ConfigInstance' -ConfigurationData $ConfigurationData
                                    }

                                    Function Invoke-DscStatusCheck {
                                        $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'
                                        If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                                            Exit 3010
                                        } Else {
                                            Write-Output 'DSC Config Completed'
                                        }
                                    }

                                    $UserPassword = ConvertTo-SecureString '{{AdminPassword}}' -AsPlainText -Force
                                    $AltAdminCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('{{DomainDNSName}}\Admin', $UserPassword)
                                    $EniConfig = Get-EniConfig
                                    Set-DscConfiguration -DaCredentials $AltAdminCredentials -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -ExistingDcIP01 '{{ExistingDcIP01}}' -ExistingDcIP02 '{{ExistingDcIP02}}' -GatewayAddress $EniConfig.GatewayAddress -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{MgmtServerNetBIOSName}}' -MacAddress $EniConfig.MacAddress
                                    Start-DscConfiguration 'C:\Temp\ConfigInstance' -Wait -Verbose -Force
                                    Invoke-DscStatusCheck
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: postConfig
                    - name: postConfig
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{mgmtInstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Invoke-EnterpriseCaConfig {
                                        [CmdletBinding()]
                                        Param (
                                            [Parameter(Mandatory = $true)][System.Management.Automation.PSCredential]$Credentials,
                                            [Parameter(Mandatory = $true)][String]$EntCaCommonName,
                                            [Parameter(Mandatory = $true)][ValidateSet('SHA256', 'SHA384', 'SHA512')][String]$EntCaHashAlgorithm,
                                            [Parameter(Mandatory = $true)][ValidateSet('2048', '4096')][String]$EntCaKeyLength,
                                            [Parameter(Mandatory = $true)][String]$EntCaValidityPeriodUnits,
                                            [Parameter(Mandatory = $true)][String]$VPCCIDR
                                        )

                                        $ServiceName = $MyInvocation.MyCommand.Name
                                        $CompName = $env:COMPUTERNAME
                                        $Folders = @(
                                            'D:\Pki\Req',
                                            'D:\ADCS\DB',
                                            'D:\ADCS\Log'
                                        )
                                        $FilePath = 'D:\Pki'
                                        $Principals = @(
                                            'ANONYMOUS LOGON',
                                            'EVERYONE'
                                        )

                                        Write-Output 'Installing Windows Features'
                                        Try {
                                            Install-WindowsFeature -Name 'Adcs-Cert-Authority', 'RSAT-AD-Tools', 'RSAT-DNS-Server', 'Web-WebServer' -IncludeManagementTools -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to install Windows Features $_"
                                            Exit 1
                                        }

                                        Write-Output 'Getting AD domain'
                                        Try {
                                            $Domain = Get-ADDomain -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get AD domain $_"
                                            Exit 1
                                        }
                                        $BaseDn = $Domain | Select-Object -ExpandProperty 'DistinguishedName'
                                        $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'
                                        $Netbios = $Domain | Select-Object -ExpandProperty 'NetBIOSName'

                                        Write-Output 'Getting a domain controller to perform actions against'
                                        Try {
                                            $DC = Get-ADDomainController -Discover -ForceDiscover -ErrorAction Stop | Select-Object -ExpandProperty 'HostName'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get a domain controller $_"
                                            Exit 1
                                        }

                                        $Counter = 0
                                        Do {
                                            $ARecordPresent = Resolve-DnsName -Name "$CompName.$FQDN" -DnsOnly -Server $DC -ErrorAction SilentlyContinue
                                            If (-not $ARecordPresent) {
                                                $Counter ++
                                                Write-Output 'A record missing, registering it.'
                                                Register-DnsClient
                                                If ($Counter -gt '1') {
                                                    Start-Sleep -Seconds 10
                                                }
                                            }
                                        } Until ($ARecordPresent -or $Counter -eq 12)

                                        If ($Counter -ge 12) {
                                            Write-Output 'A record never created'
                                            Exit 1
                                        }

                                        Write-Output 'Enabling CredSSP'
                                        Set-CredSSP -Action 'Enable'

                                        Write-Output 'Creating PKI CNAME record'
                                        $Counter = 0
                                        Do {
                                            $CnameRecordPresent = Resolve-DnsName -Name "PKI.$FQDN" -DnsOnly -Server $DC -ErrorAction SilentlyContinue
                                            If (-not $CnameRecordPresent) {
                                                $Counter ++
                                                Write-Output 'CNAME record missing, creating it'
                                                $HostNameAlias = "$CompName.$FQDN"
                                                Invoke-Command -Authentication 'CredSSP' -ComputerName $env:COMPUTERNAME -Credential $Credentials -ScriptBlock { Add-DnsServerResourceRecordCName -Name 'PKI' -ComputerName $using:DC -HostNameAlias $using:HostNameAlias -ZoneName $using:FQDN }
                                                If ($Counter -gt '1') {
                                                    Start-Sleep -Seconds 10
                                                }
                                            }
                                        } Until ($CnameRecordPresent -or $Counter -eq 12)

                                        Write-Output 'Disabling CredSSP'
                                        Set-CredSSP -Action 'Disable'

                                        If ($Counter -ge 12) {
                                            Write-Output 'CNAME record never created'
                                            Exit 1
                                        }

                                        Write-Output 'Creating PKI folders'
                                        Foreach ($Folder in $Folders) {
                                            $PathPresent = Test-Path -Path $Folder -ErrorAction SilentlyContinue
                                            If (-not $PathPresent) {
                                                Try {
                                                    $Null = New-Item -Path $Folder -Type 'Directory' -ErrorAction Stop
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to create $Folder directory $_"
                                                    Exit 1
                                                }
                                            } 
                                        }

                                        Write-Output 'Example CPS statement' | Out-File 'D:\Pki\cps.txt'

                                        Write-Output 'Sharing PKI folder'
                                        $SharePresent = Get-SmbShare -Name 'Pki' -ErrorAction SilentlyContinue
                                        If (-not $SharePresent) {
                                            Try {
                                                $Null = New-SmbShare -Name 'Pki' -Path 'D:\Pki' -FullAccess 'SYSTEM', "$Netbios\Domain Admins" -ChangeAccess "$Netbios\Cert Publishers" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create PKI SMB Share $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Creating PKI IIS virtual directory'
                                        $VdPresent = Get-WebVirtualDirectory -Name 'Pki'
                                        If (-not $VdPresent) {
                                            Try {
                                                $Null = New-WebVirtualDirectory -Site 'Default Web Site' -Name 'Pki' -PhysicalPath 'D:\Pki' -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create PKI IIS virtual directory $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Setting PKI IIS virtual directory requestFiltering'
                                        Try {
                                            Set-WebConfigurationProperty -Filter '/system.webServer/security/requestFiltering' -Name 'allowDoubleEscaping' -Value 'true' -PSPath 'IIS:\Sites\Default Web Site\Pki' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set PKI IIS virtual directory requestFiltering $_"
                                            Exit 1
                                        }

                                        Write-Output 'Setting PKI IIS virtual directory directoryBrowse'
                                        Try {
                                            Set-WebConfigurationProperty -Filter '/system.webServer/directoryBrowse' -Name 'enabled' -Value 'true' -PSPath 'IIS:\Sites\Default Web Site\Pki' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set PKI IIS virtual directory directoryBrowse $_"
                                            Exit 1
                                        }

                                        Write-Output 'Setting PKI folder file system ACLs'
                                        Foreach ($Princ in $Principals) {
                                            $Principal = New-Object -TypeName 'System.Security.Principal.NTAccount'($Princ)
                                            $Perms = [System.Security.AccessControl.FileSystemRights]'Read, ReadAndExecute, ListDirectory'
                                            $Inheritance = [System.Security.AccessControl.InheritanceFlags]::'ContainerInherit', 'ObjectInherit'
                                            $Propagation = [System.Security.AccessControl.PropagationFlags]::'None'
                                            $Access = [System.Security.AccessControl.AccessControlType]::'Allow'
                                            $AccessRule = New-Object -TypeName 'System.Security.AccessControl.FileSystemAccessRule'($Principal, $Perms, $Inheritance, $Propagation, $Access) 
                                            Try {
                                                $Acl = Get-Acl -Path $FilePath -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for PKI directory $_"
                                                Exit 1
                                            }
                                            $Acl.AddAccessRule($AccessRule)
                                            Try {
                                                Set-Acl -Path $FilePath -AclObject $Acl -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to set ACL for PKI directory $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Resetting IIS service'
                                        Try {
                                            & iisreset.exe > $null
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to reset IIS service $_"
                                            Exit 1
                                        }

                                        $URL = "URL=http://$CompName.$FQDN/pki/cps.txt"

                                        $Inf = @(
                                            '[Version]',
                                            'Signature="$Windows NT$"',
                                            '[PolicyStatementExtension]',
                                            'Policies=InternalPolicy',
                                            '[InternalPolicy]',
                                            'OID=1.2.3.4.1455.67.89.5', 
                                            'Notice="Legal Policy Statement"',
                                            $URL
                                            '[Certsrv_Server]',
                                            "RenewalKeyLength=$EntCaKeyLength",
                                            'RenewalValidityPeriod=Years',
                                            "RenewalValidityPeriodUnits=$EntCaValidityPeriodUnits",
                                            'CRLPeriod=Weeks',
                                            'CRLPeriodUnits=1',
                                            'CRLDeltaPeriod=Days',  
                                            'CRLDeltaPeriodUnits=0',
                                            'LoadDefaultTemplates=0',
                                            'AlternateSignatureAlgorithm=0',
                                            '[CRLDistributionPoint]',
                                            '[AuthorityInformationAccess]'
                                        )

                                        Write-Output 'Creating CAPolicy.inf'
                                        Try {
                                            $Inf | Out-File -FilePath 'C:\Windows\CAPolicy.inf' -Encoding 'ascii'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create CAPolicy.inf $_"
                                            Exit 1
                                        }

                                        Write-Output 'Installing Enterprise Root CA'
                                        Try {
                                            $Null = Install-AdcsCertificationAuthority -CAType 'EnterpriseRootCA' -CACommonName $EntCaCommonName -KeyLength $EntCaKeyLength -HashAlgorithm $EntCaHashAlgorithm -CryptoProviderName 'RSA#Microsoft Software Key Storage Provider' -ValidityPeriod 'Years' -ValidityPeriodUnits $EntCaValidityPeriodUnits -DatabaseDirectory 'D:\ADCS\DB' -LogDirectory 'D:\ADCS\Log' -Force -ErrorAction Stop -Credential $Credentials
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to install Enterprise Root CA $_"
                                            Exit 1
                                        }

                                        $CDP = "http://$CompName.$FQDN/pki/<CaName><CRLNameSuffix><DeltaCRLAllowed>.crl"
                                        $AIA = "http://$CompName.$FQDN/pki/<ServerDNSName>_<CaName><CertificateName>.crt"

                                        Write-Output 'Configuring CRL distro points'
                                        Try {
                                            $Null = Get-CACRLDistributionPoint | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CACRLDistributionPoint -Force -ErrorAction Stop
                                            $Null = Add-CACRLDistributionPoint -Uri $CDP -AddToCertificateCDP -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to configure CRL Distro $_"
                                            Exit 1
                                        }

                                        Write-Output 'Configuring AIA distro points'
                                        Try {
                                            $Null = Get-CAAuthorityInformationAccess | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CAAuthorityInformationAccess -Force -ErrorAction Stop
                                            $Null = Add-CAAuthorityInformationAccess -AddToCertificateAia -Uri $AIA -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to configure AIA Distro $_"
                                            Exit 1
                                        }

                                        Write-Output 'Configuring Enterprise CA'
                                        & certutil.exe -setreg CA\CRLOverlapPeriodUnits '12' > $null
                                        & certutil.exe -setreg CA\CRLOverlapPeriod 'Hours' > $null
                                        & certutil.exe -setreg CA\ValidityPeriodUnits '5' > $null
                                        & certutil.exe -setreg CA\ValidityPeriod 'Years' > $null
                                        & certutil.exe -setreg CA\AuditFilter '127' > $null
                                        & auditpol.exe /set /subcategory:'Certification Services' /failure:enable /success:enable > $null

                                        Write-Output 'Restarting CA service'
                                        Try {
                                            Restart-Service -Name 'certsvc' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to restart CA service $_"
                                            Exit 1
                                        }

                                        Start-Sleep -Seconds 10

                                        Write-Output 'Publishing CRL'
                                        & certutil.exe -crl > $null

                                        Write-Output 'Copying CRL to PKI folder'
                                        Try {
                                            Copy-Item -Path 'C:\Windows\System32\CertSrv\CertEnroll\*.cr*' -Destination 'D:\Pki\' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to copy CRL to PKI folder  $_"
                                            Exit 1
                                        }

                                        Write-Output 'Restarting CA service'
                                        Try {
                                            Restart-Service -Name 'certsvc' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to restart CA service $_"
                                        }

                                        Write-Output 'Creating LdapOverSSL certificate template'
                                        New-KerbCertTemplate -BaseDn $BaseDn -Credential $Credentials -Server $DC

                                        Write-Output 'Creating Update CRL scheduled task'
                                        Try {
                                            $ScheduledTaskAction = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument '& certutil.exe -crl; Copy-Item -Path C:\Windows\System32\CertSrv\CertEnroll\*.cr* -Destination D:\Pki\'
                                            $ScheduledTaskTrigger = New-ScheduledTaskTrigger -Daily -DaysInterval '5' -At '12am' -ErrorAction Stop
                                            $ScheduledTaskPrincipal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType 'ServiceAccount' -RunLevel 'Highest' -ErrorAction Stop
                                            $ScheduledTaskSettingsSet = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -Compatibility 'Win8' -ExecutionTimeLimit (New-TimeSpan -Hours '1') -ErrorAction Stop
                                            $ScheduledTask = New-ScheduledTask -Action $ScheduledTaskAction -Principal $ScheduledTaskPrincipal -Trigger $ScheduledTaskTrigger -Settings $ScheduledTaskSettingsSet -Description 'Updates CRL to Local Pki Folder' -ErrorAction Stop
                                            $Null = Register-ScheduledTask 'Update CRL' -InputObject $ScheduledTask -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to register Update CRL scheduled task $_" -Severity 'WARN'
                                        }

                                        Write-Output 'Running CRL scheduled task'
                                        Try {
                                            Start-ScheduledTask -TaskName 'Update CRL' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to run CRL scheduled task $_" -Severity 'WARN'
                                        }

                                        Write-Output 'Restarting CA service'
                                        Try {
                                            Restart-Service -Name 'certsvc' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to restart CA service $_" -Severity 'WARN'
                                        }

                                        Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                                        Try {
                                            Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to allow WinRM traffic from VPC CIDR $_" -Severity 'WARN'
                                        }
                                    }

                                    Function Set-CredSSP {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][ValidateSet('Enable', 'Disable')][string]$Action
                                        )

                                        $RootKey = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows'
                                        $CredDelKey = 'CredentialsDelegation'
                                        $FreshCredKey = 'AllowFreshCredentials'
                                        $FreshCredKeyNTLM = 'AllowFreshCredentialsWhenNTLMOnly'
                                        $ServiceName = $MyInvocation.MyCommand.Name

                                        Switch ($Action) {
                                            'Enable' {
                                                Write-Output 'Enabling CredSSP'
                                                Try {
                                                    $Null = Enable-WSManCredSSP -Role 'Client' -DelegateComputer '*' -Force -ErrorAction Stop
                                                    $Null = Enable-WSManCredSSP -Role 'Server' -Force -ErrorAction Stop
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to enable CredSSP $_"
                                                    $Null = Disable-WSManCredSSP -Role 'Client' -ErrorAction SilentlyContinue
                                                    $Null = Disable-WSManCredSSP -Role 'Server' -ErrorAction SilentlyContinue
                                                    Exit 1
                                                }

                                                Write-Output 'Setting CredSSP registry entries'
                                                $CredDelKeyPresent = Test-Path -Path (Join-Path -Path $RootKey -ChildPath $CredDelKey) -ErrorAction SilentlyContinue
                                                If (-not $CredDelKeyPresent) {
                                                    Try {
                                                        $CredDelPath = New-Item -Path $RootKey -Name $CredDelKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'

                                                        $FreshCredKeyPresent = Test-Path -Path (Join-Path -Path "Registry::$CredDelPath" -ChildPath $FreshCredKey) -ErrorAction SilentlyContinue
                                                        If (-not $FreshCredKeyPresent) {
                                                            $FreshCredKeyPath = New-Item -Path "Registry::$CredDelPath" -Name $FreshCredKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                                        }

                                                        $FreshCredKeyNTLMPresent = Test-Path -Path (Join-Path -Path "Registry::$CredDelPath" -ChildPath $FreshCredKeyNTLM) -ErrorAction SilentlyContinue
                                                        If (-not $FreshCredKeyNTLMPresent) {
                                                            $FreshCredKeyNTLMPath = New-Item -Path "Registry::$CredDelPath" -Name $FreshCredKeyNTLM -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                                        }

                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'AllowFreshCredentials' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'ConcatenateDefaults_AllowFresh' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'AllowFreshCredentialsWhenNTLMOnly' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'ConcatenateDefaults_AllowFreshNTLMOnly' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$FreshCredKeyPath" -Name '1' -Value 'WSMAN/*' -PropertyType 'String' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$FreshCredKeyNTLMPath" -Name '1' -Value 'WSMAN/*' -PropertyType 'String' -Force -ErrorAction Stop
                                                    } Catch [System.Exception] {
                                                        Write-Output "Failed to create CredSSP registry entries $_"
                                                        Remove-Item -Path (Join-Path -Path $RootKey -ChildPath $CredDelKey) -Force -Recurse
                                                        Exit 1
                                                    }
                                                }
                                            }
                                            'Disable' {
                                                Write-Output 'Disabling CredSSP'
                                                Try {
                                                    Disable-WSManCredSSP -Role 'Client' -ErrorAction Continue
                                                    Disable-WSManCredSSP -Role 'Server' -ErrorAction Stop
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to disable CredSSP $_"
                                                    Exit 1
                                                }

                                                Write-Output 'Removing CredSSP registry entries'-Severity 'INFO'
                                                Try {
                                                    Remove-Item -Path (Join-Path -Path $RootKey -ChildPath $CredDelKey) -Force -Recurse
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to remove CredSSP registry entries $_"
                                                    Exit 1
                                                }
                                            }
                                            Default { 
                                                Write-Output 'InvalidArgument: Invalid value is passed for parameter Action'
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function New-TemplateOID {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][string]$Server,
                                            [Parameter(Mandatory = $true)][string]$ConfigNC
                                        )

                                        $Hex = '0123456789ABCDEF'

                                        Do {
                                            [string]$RandomHex = $null
                                            For ($i = 1; $i -le 32; $i++) {
                                                $RandomHex += $Hex.Substring((Get-Random -Minimum 0 -Maximum 16), 1)
                                            }

                                            $OID_Part_1 = Get-Random -Minimum 1000000 -Maximum 99999999
                                            $OID_Part_2 = Get-Random -Minimum 10000000 -Maximum 99999999
                                            $OID_Part_3 = $RandomHex
                                            $OID_Forest = Get-ADObject -Server $Server -Identity "CN=OID,CN=Public Key Services,CN=Services,$ConfigNC" -Properties msPKI-Cert-Template-OID | Select-Object -ExpandProperty msPKI-Cert-Template-OID -ErrorAction SilentlyContinue
                                            $msPKICertTemplateOID = "$OID_Forest.$OID_Part_1.$OID_Part_2"
                                            $Name = "$OID_Part_2.$OID_Part_3"
                                            $Search = Get-ADObject -Server $Server -SearchBase "CN=OID,CN=Public Key Services,CN=Services,$ConfigNC" -Filter { cn -eq $Name -and msPKI-Cert-Template-OID -eq $msPKICertTemplateOID } -ErrorAction SilentlyContinue
                                            If ($Search) { 
                                                $Unique = 'False'
                                            } Else { 
                                                $Unique = 'True'
                                            }
                                        } Until ($Unique = 'True')
                                        Return @{
                                            TemplateOID  = $msPKICertTemplateOID
                                            TemplateName = $Name
                                        }
                                    }

                                    Function New-KerbCertTemplate {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][string]$BaseDn,
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Server
                                        )

                                        $CA = $env:COMPUTERNAME

                                        $OID = New-TemplateOID -Server $Server -ConfigNC "CN=Configuration,$BaseDn"

                                        $TemplateOIDPath = "CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"
                                        $OidOtherAttributes = @{
                                            'DisplayName'   = 'LdapOverSSL'
                                            'flags'         = [System.Int32]'1'
                                            'msPKI-Cert-Template-OID' = $OID.TemplateOID
                                        }

                                        $OtherAttributes = @{
                                            'flags' = [System.Int32]'131168'
                                            'msPKI-Certificate-Application-Policy' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')
                                            'msPKI-Certificate-Name-Flag'= [System.Int32]'138412032'
                                            'msPKI-Enrollment-Flag' = [System.Int32]'40'
                                            'msPKI-Minimal-Key-Size' = [System.Int32]'2048'
                                            'msPKI-Private-Key-Flag' = [System.Int32]'84279552'
                                            'msPKI-Template-Minor-Revision' = [System.Int32]'1'
                                            'msPKI-Template-Schema-Version' = [System.Int32]'4'
                                            'msPKI-RA-Signature' = [System.Int32]'0'
                                            'pKIMaxIssuingDepth' = [System.Int32]'0'
                                            'ObjectClass' = [System.String]'pKICertificateTemplate'
                                            'pKICriticalExtensions' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('2.5.29.17', '2.5.29.15')
                                            'pKIDefaultCSPs' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1,Microsoft RSA SChannel Cryptographic Provider')
                                            'pKIDefaultKeySpec' = [System.Int32]'1'
                                            'pKIExpirationPeriod' = [System.Byte[]]@('0', '64', '57', '135', '46', '225', '254', '255')
                                            'pKIExtendedKeyUsage' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')
                                            'pKIKeyUsage' = [System.Byte[]]@('160', '0')
                                            'pKIOverlapPeriod' = [System.Byte[]]@('0', '128', '166', '10', '255', '222', '255', '255')
                                            'revision' = [System.Int32]'100'
                                            'msPKI-Cert-Template-OID' = $OID.TemplateOID
                                        }

                                        Write-Output "Creating new LdapOverSSL certificate template OID $_"
                                        Try {
                                            New-ADObject -Path $TemplateOIDPath -OtherAttributes $OidOtherAttributes -Name $OID.TemplateName -Type 'msPKI-Enterprise-Oid' -Server $Server -Credential $Credential -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create new LdapOverSSL certificate template OID $_"
                                            Exit 1
                                        }

                                        $TemplatePath = "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"

                                        Write-Output "Creating new LdapOverSSL certificate template $_"
                                        Try {
                                            New-ADObject -Path $TemplatePath -OtherAttributes $OtherAttributes -Name 'LdapOverSSL' -DisplayName 'LdapOverSSL' -Type 'pKICertificateTemplate' -Server $Server -Credential $Credential -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create new LdapOverSSL certificate template $_"
                                            Exit 1
                                        }

                                        $SidsToAdd = @(
                                            [Security.Principal.SecurityIdentifier]'S-1-5-9'
                                            (Get-ADGroup -Identity 'Domain Controllers' | Select-Object -ExpandProperty 'SID')
                                        )

                                        $SidsToRemove = @(
                                            [Security.Principal.SecurityIdentifier]'S-1-5-18',
                                            (Get-ADGroup -Identity 'Domain Admins' | Select-Object -ExpandProperty 'SID')
                                        )

                                        Write-Output 'Enabling CredSSP'
                                        Set-CredSSP -Action 'Enable'

                                        Write-Output 'Sleeping to ensure replication of certificate template has completed'
                                        Start-Sleep -Seconds 60

                                        Write-Output 'Cleaning up ACLs on LdapOverSSL certificate template'
                                        $ExtendedRightGuids = @(
                                            [GUID]'0e10c968-78fb-11d2-90d4-00c04f79dc55',
                                            [GUID]'a05b8cc2-17bc-4802-a710-e7c15ab866a2'
                                        )
                                        Foreach ($SidToAdd in $SidsToAdd) {
                                            Add-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToAdd -ActiveDirectoryRights 'GenericRead,GenericWrite,WriteDacl,WriteOwner,Delete' -AccessControlType 'Allow' -ActiveDirectorySecurityInheritance 'None'

                                            Foreach ($ExtendedRightGuid in $ExtendedRightGuids) {
                                                Add-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToAdd -ActiveDirectoryRights 'ExtendedRight' -AccessControlType 'Allow' -ObjectGuid $ExtendedRightGuid -ActiveDirectorySecurityInheritance 'None'
                                            }
                                        }

                                        Set-CertTemplateAclInheritance -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"

                                        Foreach ($SidToRemove in $SidsToRemove) {
                                            Remove-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToRemove -AccessControlType 'Allow'
                                        }

                                        Write-Output "Publishing LdapOverSSL template to allow enrollment"
                                        $Counter = 0
                                        Do {
                                            $TempPresent = $Null
                                            Try {
                                                $TempPresent = Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock { 
                                                    Get-ADObject "CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn" -Partition "CN=Configuration,$Using:BaseDn" -Properties 'certificateTemplates' | Select-Object -ExpandProperty 'certificateTemplates' | Where-Object { $_ -contains 'LdapOverSSL' }
                                                }
                                            } Catch [System.Exception] {
                                                Write-Output "LdapOverSSL Template missing"
                                                $TempPresent = $Null
                                            }
                                            If (-not $TempPresent) {
                                                $Counter ++
                                                Write-Output "LdapOverSSL Template missing adding it."
                                                Try {
                                                    Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                                        Set-ADObject "CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn" -Partition "CN=Configuration,$Using:BaseDn" -Add @{ 'certificateTemplates' = 'LdapOverSSL' } 
                                                    }
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to add publish LdapOverSSL template $_"
                                                }
                                                If ($Counter -gt '1') {
                                                    Start-Sleep -Seconds 10
                                                }
                                            }
                                        } Until ($TempPresent -or $Counter -eq 12)

                                        Write-Output 'Sleeping to ensure replication of certificate template publish has completed'
                                        Start-Sleep -Seconds 60

                                        Write-Output 'Disabling CredSSP'
                                        Set-CredSSP -Action 'Disable'
                                    }

                                    Function Add-CertTemplateAcl {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Path,
                                            [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                                            [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,
                                            [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,
                                            [Parameter(Mandatory = $false)][Guid]$ObjectGuid,        
                                            [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,
                                            [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid
                                        )

                                        Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                            Import-Module -Name 'ActiveDirectory' -Force

                                            [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'

                                            $ArgumentList = $IdentityReference, $Using:ActiveDirectoryRights, $Using:AccessControlType, $Using:ObjectGuid, $Using:ActiveDirectorySecurityInheritance, $Using:InheritedObjectGuid
                                            $ArgumentList = $ArgumentList.Where( { $_ -ne $Null })

                                            Write-Output 'Creating ACL object'
                                            Try {
                                                $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create ACL object $_"
                                                Exit 1
                                            }

                                            Write-Output "Getting ACL for $Using:Path"
                                            Try {
                                                $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for $Using:Path $_"
                                                Exit 1
                                            }

                                            $ObjectAcl.AddAccessRule($Rule) 

                                            Write-Output "Setting ACL for $Using:Path"
                                            Try {
                                                Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to set ACL for $Using:Path $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Set-CertTemplateAclInheritance {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Path
                                        )

                                        Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                            Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop

                                            Write-Output "Getting ACL for $Using:Path"
                                            Try {
                                                $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for $Using:Path $_"
                                                Exit 1
                                            }

                                            $ObjectAcl.SetAccessRuleProtection($true, $false)

                                            Write-Output "Setting ACL for $Using:Path"
                                            Try {
                                                Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to set ACL for $Using:Path $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Remove-CertTemplateAcl {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Path,
                                            [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                                            [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType
                                        )

                                        Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                            Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop

                                            Write-Output "Getting ACL for $Using:Path"
                                            Try {
                                                $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for $Using:Path $_"
                                                Exit 1
                                            }

                                            [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'

                                            $ObjectAcl.RemoveAccess($IdentityReference, $Using:AccessControlType)

                                            Write-Output "Removing ACL for $Using:Path"
                                            Try {
                                                Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to remove ACL for $Using:Path $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Invoke-Cleanup {
                                        [CmdletBinding()]
                                        Param (
                                            [Parameter(Mandatory = $true)][String]$VPCCIDR
                                        )

                                        Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                                        Try {
                                            Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR
                                        } Catch [System.Exception] {
                                            Write-Output "Failed allow WinRM Traffic from VPC CIDR $_"
                                        }

                                        Write-Output 'Removing DSC Configuration'
                                        Try {
                                            Remove-DscConfigurationDocument -Stage 'Current' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed build DSC Configuration $_"
                                        }

                                        Write-Output 'Re-enabling Windows Firewall'
                                        Try {
                                            Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled 'True' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed re-enable firewall $_"
                                        }

                                        Write-Output 'Removing build files'
                                        Try {
                                            Remove-Item -Path 'C:\Temp' -Recurse -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed remove build files $_"
                                        }

                                        Write-Output 'Removing self signed cert'
                                        Try {
                                            $SelfSignedThumb = Get-ChildItem -Path 'cert:\LocalMachine\My\' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                            Remove-Item -Path "cert:\LocalMachine\My\$SelfSignedThumb" -DeleteKey -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed remove self signed cert $_"
                                        }
                                    }

                                    $UserPassword = ConvertTo-SecureString '{{AdminPassword}}' -AsPlainText -Force
                                    $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('{{DomainDNSName}}\Admin', $UserPassword)
                                    Invoke-EnterpriseCaConfig -Credentials $Credentials -EntCaCommonName '{{MgmtServerNetBIOSName}}' -EntCaHashAlgorithm 'SHA256' -EntCaKeyLength '2048' -EntCaValidityPeriodUnits '5' -VPCCIDR '{{VPCCIDR}}'
                                    Invoke-Cleanup -VPCCIDR '{{VPCCIDR}}'
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                    - name: cfnSignalEnd
                      action: aws:branch
                      inputs:
                          Choices:
                              - NextStep: signalSuccess
                                Not:
                                    Variable: "{{StackName}}"
                                    StringEquals: ""
                              - NextStep: sleepEnd
                                Variable: "{{StackName}}"
                                StringEquals: ""
                    - name: signalSuccess
                      action: aws:executeAwsApi
                      isEnd: True
                      inputs:
                          Service: cloudformation
                          Api: SignalResource
                          LogicalResourceId: MgmtInstance
                          StackName: "{{StackName}}"
                          Status: SUCCESS
                          UniqueId: "{{mgmtInstanceId.InstanceId}}"
                    - name: sleepEnd
                      action: aws:sleep
                      isEnd: True
                      inputs:
                          Duration: PT1S
                    - name: signalFailure
                      action: aws:executeAwsApi
                      inputs:
                          Service: cloudformation
                          Api: SignalResource
                          LogicalResourceId: MgmtInstance
                          StackName: "{{StackName}}"
                          Status: FAILURE
                          UniqueId: "{{mgmtInstanceId.InstanceId}}"
            DocumentType: Automation
            Tags:
                - Key: StackName
                  Value: !Ref AWS::StackName
    MgmtInstance:
        Type: AWS::EC2::Instance
        CreationPolicy:
            ResourceSignal:
                Timeout: PT30M
                Count: 1
        DependsOn: ManagedAD
        Properties:
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 60
                      VolumeType: gp3
                      Encrypted: true
                      KmsKeyId: alias/aws/ebs
                      DeleteOnTermination: true
                - DeviceName: /dev/xvdf
                  Ebs:
                      VolumeSize: 10
                      VolumeType: gp3
                      Encrypted: true
                      KmsKeyId: alias/aws/ebs
                      DeleteOnTermination: true
            IamInstanceProfile: !Ref InstanceProfile
            ImageId: !Ref AMI
            InstanceType: t3.large
            SecurityGroupIds:
                - !Ref DomainMemberSG
            SubnetId: !Ref VPCPublicSubnet1Subnet
            Tags:
                - Key: Name
                  Value: MAD-MGMT01
                - Key: Domain
                  Value: !Ref MADDomainName
                - Key: Role
                  Value: Enterpise CA
            UserData:
                Fn::Base64: !Sub
                    - |
                        <powershell>
                        $Params = @{
                            AdminPassword = '${AdminPassword}'
                            DomainDNSName = '${DomainDNSName}'
                            DomainNetBIOSName = '${DomainNetBIOSName}'
                            ExistingDcIP01 = '${ExistingDcIP01}'
                            ExistingDcIP02 = '${ExistingDcIP02}'
                            MgmtServerNetBIOSName = 'MAD-MGMT01'
                            StackName = '${AWS::StackName}'
                            URLSuffix = '${AWS::URLSuffix}'
                            VPCCIDR = '${VPCCIDR}'
                        }
                        Start-SSMAutomationExecution -DocumentName '${MgmtInstanceSSMAuto}' -Parameter $Params
                        </powershell>
                    - AdminPassword: !Ref AdminPassword
                      DomainDNSName: !Ref MADDomainName
                      DomainNetBIOSName: !Ref MADNetBIOSName
                      ExistingDcIP01:
                          !Select [0, !GetAtt ManagedAD.DnsIpAddresses]
                      ExistingDcIP02:
                          !Select [1, !GetAtt ManagedAD.DnsIpAddresses]
                      VPCCIDR: !GetAtt VPC.CidrBlock
    OnPremDomainControllerSsmAuto:
        Type: AWS::SSM::Document
        Properties:
            Content:
                schemaVersion: "0.3"
                description: Deploy AD with SSM Automation
                parameters:
                    ADServer1NetBIOSName:
                        description: NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)
                        type: String
                    DomainDNSName:
                        description: Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local
                        type: String
                    DomainNetBIOSName:
                        description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES
                        type: String
                    MadDcIP01:
                        description: IP Address of MAD domain controller
                        type: String
                    MadDcIP02:
                        description: IP Address of MAD domain controller
                        type: String
                    MadDirectoryID:
                        description: Directory ID of MAD domain
                        type: String
                    MadDNSName:
                        description: Fully qualified domain name (FQDN) of the MAD domain e.g. corp.example.com
                        type: String
                    AdminPassword:
                        description: Password for the Admin account (Also used to create the trust)
                        type: String
                    StackName:
                        description: Stack Name Input for cfn resource signal
                        type: String
                    TrustDirection:
                        description: Trust Direction from AWS Managed Microsft AD to on-premises domain.
                        type: String
                    URLSuffix:
                        description: AWS URL suffix
                        type: String
                    VPCCIDR:
                        description: CIDR Block for the VPC
                        type: String
                mainSteps:
                    - name: dc1InstanceId
                      action: aws:executeAwsApi
                      onFailure: step:signalFailure
                      inputs:
                          Service: ec2
                          Api: DescribeInstances
                          Filters:
                              - Name: tag:Name
                                Values:
                                    - "{{ADServer1NetBIOSName}}"
                              - Name: tag:aws:cloudformation:stack-name
                                Values:
                                    - "{{StackName}}"
                              - Name: instance-state-name
                                Values:
                                    - running
                      outputs:
                          - Name: InstanceId
                            Selector: $.Reservations[0].Instances[0].InstanceId
                            Type: String
                      nextStep: intializeInstance
                    - name: intializeInstance
                      action: aws:runCommand
                      onFailure: step:signalFailure
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{dc1InstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                                    $Modules = @(
                                        @{
                                            Name = 'NetworkingDsc'
                                            Version = '8.2.0'
                                        },
                                        @{
                                            Name = 'ActiveDirectoryDsc'
                                            Version = '6.0.1'
                                        },
                                        @{
                                            Name = 'ComputerManagementDsc'
                                            Version = '8.5.0'
                                        },
                                        @{
                                            Name = 'DnsServerDsc'
                                            Version = '3.0.0'
                                        },
                                        @{
                                            Name = 'AuditPolicyDsc'
                                            Version = '1.4.0.0'
                                        },                                       
                                        @{
                                            Name = 'SChannelDsc'
                                            Version = '1.2.2'
                                        }
                                    )

                                    Function New-VolumeFromRawDisk {
                                        Write-Output 'Finding RAW Disk'
                                        $Counter = 0
                                        Do {
                                            Try {
                                                $BlankDisks = Get-Disk -ErrorAction Stop | Where-Object { $_.PartitionStyle -eq 'RAW' } | Select-Object -ExpandProperty 'Number'
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get disk $_"
                                                $BlankDisks = $Null
                                            }
                                            If (-not $BlankDisks) {
                                                $Counter ++
                                                Write-Output 'RAW Disk not found sleeping 10 seconds and will try again.'
                                                Start-Sleep -Seconds 10
                                            }
                                        } Until ($BlankDisks -or $Counter -eq 12)

                                        If ($Counter -ge 12) {
                                            Write-Output 'RAW Disk not found exiting'
                                            Return
                                        }

                                        Foreach ($BlankDisk in $BlankDisks) {
                                            Write-Output 'Data Volume not initialized attempting to bring online'
                                            Try {
                                                Initialize-Disk -Number $BlankDisk -PartitionStyle 'GPT' -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed attempting to bring online Data Volume $_"
                                                Exit 1
                                            }

                                            Start-Sleep -Seconds 5

                                            Write-Output 'Data Volume creating new partition'
                                            Try {
                                                $DriveLetter = New-Partition -DiskNumber $BlankDisk -AssignDriveLetter -UseMaximumSize -ErrorAction Stop | Select-Object -ExpandProperty 'DriveLetter'
                                            } Catch [System.Exception] {
                                                Write-Output "Failed creating new partition $_"
                                                Exit 1
                                            }

                                            Start-Sleep -Seconds 5

                                            Write-Output 'Data Volume formatting partition'
                                            Try {
                                                $Null = Format-Volume -DriveLetter $DriveLetter -FileSystem 'NTFS' -NewFileSystemLabel 'Data' -Confirm:$false -Force -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed formatting partition $_"
                                                Exit 1
                                            }

                                            Try {
                                                $Null = Get-CimInstance -ClassName 'Win32_Volume' -Filter "DriveLetter='$($DriveLetter):'" -ErrorAction Stop | Set-CimInstance -Arguments @{ IndexingEnabled = $False }
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to turn off indexing $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Invoke-PreConfig {
                                        Write-Output 'Temporarily disabling Windows Firewall'
                                        Try {
                                            Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled False -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to disable Windows Firewall $_"
                                            Exit 1
                                        }

                                        $Dirs = @(
                                            'C:\Temp\publickeys',
                                            'C:\DnsLogs' 
                                        )

                                        Foreach ($Dir in $Dirs) {
                                            Write-Output "Creating file directory $Dir"
                                            Try {
                                                $Null = New-Item -Path $Dir -ItemType 'Directory' -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create directory $Dir $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Creating certificate to encrypt credentials in MOF file'
                                        Try {
                                            $cert = New-SelfSignedCertificate -Type 'DocumentEncryptionCertLegacyCsp' -DnsName 'DscEncryptCert' -HashAlgorithm 'SHA256' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create self signed cert $_"
                                            Exit 1
                                        }

                                        Write-Output 'Exporting the self signed public key certificate'
                                        Try {
                                            $Null = $cert | Export-Certificate -FilePath 'C:\Temp\publickeys\DscPublicKey.cer' -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to copy self signed cert to publickeys directory $_"
                                            Exit 1
                                        }    
                                    }

                                    Function Invoke-LcmConfig {
                                        Write-Output 'Getting the DSC cert thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        [DSCLocalConfigurationManager()]
                                        Configuration LCMConfig
                                        {
                                            Node 'localhost' {
                                                Settings {
                                                    RefreshMode = 'Push'
                                                    ConfigurationModeFrequencyMins = 15
                                                    ActionAfterReboot = 'StopConfiguration'
                                                    RebootNodeIfNeeded = $false
                                                    ConfigurationMode = 'ApplyAndAutoCorrect'
                                                    CertificateId = $DscCertThumbprint
                                                }
                                            }
                                        }

                                        Write-Output 'Generating MOF file for LCM'
                                        LCMConfig -OutputPath 'C:\Temp\LCMConfig'

                                        Write-Output 'Sets LCM configuration to MOF generated in previous command'
                                        Try {
                                            Set-DscLocalConfigurationManager -Path 'C:\Temp\LCMConfig' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set LCM configuration $_"
                                            Exit 1
                                        }
                                    }

                                    Write-Output 'Installing NuGet Package Provider'
                                    Try {
                                        $Null = Install-PackageProvider -Name 'NuGet' -MinimumVersion '2.8.5' -Force -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to install NuGet Package Provider $_"
                                        Exit 1
                                    }

                                    Write-Output 'Setting PSGallery Respository to trusted'
                                    Try {
                                        Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to set PSGallery Respository to trusted $_"
                                        Exit 1
                                    }

                                    Write-Output 'Installing the needed Powershell DSC modules'
                                    Foreach ($Module in $Modules) {
                                        Try {
                                            Install-Module -Name $Module.Name -RequiredVersion $Module.Version -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to Import Modules $_"
                                            #Exit 1
                                        }
                                    }

                                    Write-Output 'Getting certificate AutoEnrollment policy'
                                    Try {
                                        $CertEnrollmentActive = Get-CertificateAutoEnrollmentPolicy -context 'Machine' -Scope 'Local' | Select-Object -ExpandProperty 'PolicyState' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get certificate AutoEnrollment policy $_"
                                        Exit 1
                                    }

                                    If ($CertEnrollmentActive -ne 'Enabled') {
                                        Write-Output 'Setting certificate AutoEnrollment policy'
                                        Try {
                                            Set-CertificateAutoEnrollmentPolicy -ExpirationPercentage 10 -PolicyState 'Enabled' -EnableTemplateCheck -EnableMyStoreManagement -StoreName 'MY' -context 'Machine' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set certificate AutoEnrollment policy $_"
                                            Exit 1
                                        }
                                    }

                                    New-VolumeFromRawDisk
                                    Invoke-PreConfig
                                    Invoke-LcmConfig
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: configureInstance
                    - name: configureInstance
                      action: aws:runCommand
                      onFailure: step:signalFailure
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{dc1InstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Get-EniConfig {
                                        Write-Output 'Getting network configuration'
                                        Try {
                                            $NetIpConfig = Get-NetIPConfiguration -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get network configuration $_"
                                            Exit 1
                                        }

                                        Write-Output 'Grabbing the current gateway address in order to static IP correctly'
                                        $GatewayAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4DefaultGateway' | Select-Object -ExpandProperty 'NextHop'

                                        Write-Output 'Formatting IP address in format needed for IPAdress DSC resource'
                                        $IpAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'IpAddress'
                                        $Prefix = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'PrefixLength'
                                        $InterfaceAlias = $NetIpConfig | Select-Object -ExpandProperty 'InterfaceAlias'                                       
                                        $IpAddr = 'IP/CIDR' -replace 'IP', $IpAddress -replace 'CIDR', $Prefix

                                        Write-Output 'Getting MAC address'
                                        Try {
                                            $MacAddress = Get-NetAdapter -ErrorAction Stop | Select-Object -ExpandProperty 'MacAddress'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get MAC address $_"
                                            Exit 1
                                        }

                                        $Output = [PSCustomObject][Ordered]@{
                                            'GatewayAddress' = $GatewayAddress
                                            'IpAddress' = $IpAddr
                                            'DnsIpAddress' = $IpAddress
                                            'MacAddress' = $MacAddress
                                            'InterfaceAlias' = $InterfaceAlias
                                        }

                                        Return $Output
                                    }

                                    Function Set-DscConfiguration {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$AltAdminCredentials,
                                            [Parameter(Mandatory = $true)][String]$AltAdminUserName,
                                            [Parameter(Mandatory = $true)][PSCredential]$DaCredentials,
                                            [Parameter(Mandatory = $true)][string]$DnsInstanceIP,
                                            [Parameter(Mandatory = $true)][string]$DomainDNSName,
                                            [Parameter(Mandatory = $true)][string]$DomainNetBIOSName,
                                            [Parameter(Mandatory = $true)][string]$GatewayAddress,
                                            [Parameter(Mandatory = $true)][string]$InterfaceAlias,
                                            [Parameter(Mandatory = $true)][string]$InstanceIP,
                                            [Parameter(Mandatory = $true)][string]$InstanceNetBIOSName,
                                            [Parameter(Mandatory = $true)][PSCredential]$LaCredentials,
                                            [Parameter(Mandatory = $true)][string]$MacAddress,
                                            [Parameter(Mandatory = $true)][string]$MadDcIP01,
                                            [Parameter(Mandatory = $true)][string]$MadDcIP02,
                                            [Parameter(Mandatory = $true)][string]$MadDNSName,
                                            [Parameter(Mandatory = $true)][PSCredential]$RestoreModeCredentials,
                                            [Parameter(Mandatory = $true)][string]$SiteName,
                                            [Parameter(Mandatory = $true)][string]$VPCCIDR
                                        )

                                        $VPCDNS = '169.254.169.253'

                                        $AClass = 0..8
                                        $BClass = 9..16
                                        $CClass = 17..24
                                        $DClass = 25..32
                                        $IP = $VPCCIDR.Split('/')[0]
                                        [System.Collections.ArrayList]$IPArray = $IP -Split "\."
                                        $Range = $VPCCIDR.Split('/')[1]
                                        If ($AClass -contains $Range) {
                                            [System.Array]$Number = $IPArray[0]
                                        } Elseif ($BClass -contains $Range) {
                                            [System.Array]$Number = $IPArray[0, 1]
                                        } Elseif ($CClass -contains $Range) {
                                            [System.Array]$Number = $IPArray[0, 1, 2]
                                        } Elseif ($DClass -contains $Range) {
                                            [System.Array]$Number = $IPArray[0, 1, 2, 3]
                                        }
                                        [System.Array]::Reverse($Number)
                                        $IpRev = $Number -Join "."
                                        $ZoneName = $IpRev + '.in-addr.arpa'

                                        Write-Output 'Getting the DSC encryption thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        Write-Output "Setting DNS client $_"
                                        Try {
                                            Set-DnsClientServerAddress -InterfaceAlias $InterfaceAlias -ServerAddresses ($VPCDNS) -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set DNS client $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating configuration data block that has the certificate information for DSC configuration processing'
                                        $ConfigurationData = @{
                                            AllNodes = @(
                                                @{
                                                    NodeName = '*'
                                                    CertificateFile = 'C:\Temp\publickeys\DscPublicKey.cer'
                                                    Thumbprint = $DscCertThumbprint
                                                    PSDscAllowDomainUser = $true
                                                },
                                                @{
                                                    NodeName = 'localhost'
                                                }
                                            )
                                        }

                                        Configuration ConfigInstance {
                                            Import-DscResource -ModuleName 'PSDesiredStateConfiguration', 'NetworkingDsc', 'ComputerManagementDsc', 'DnsServerDsc', 'ActiveDirectoryDsc', 'AuditPolicyDsc', 'SChannelDsc'
                                            Node LocalHost {
                                                NetAdapterName RenameNetAdapterPrimary {
                                                    NewName = 'Primary'
                                                    MacAddress = $MacAddress
                                                }
                                                PowerPlan SetPlanHighPerformance {
                                                    IsSingleInstance = 'Yes'
                                                    Name = 'High performance'
                                                }
                                                NetAdapterAdvancedProperty JumboPacket {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*JumboPacket'
                                                    RegistryValue = 9015
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'
                                                }
                                                NetAdapterAdvancedProperty ReceiveBuffers {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*ReceiveBuffers'
                                                    RegistryValue = 8192
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'
                                                }
                                                NetAdapterAdvancedProperty TransmitBuffers {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*TransmitBuffers'
                                                    RegistryValue = 1024
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'
                                                }
                                                NetBios DisableNetBios {
                                                    InterfaceAlias = 'Primary'
                                                    Setting = 'Disable'
                                                }
                                                NetIPInterface DisableDhcp {
                                                    Dhcp = 'Disabled'
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'
                                                }
                                                IPAddress SetIP {
                                                    IPAddress = $InstanceIP
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[NetIPInterface]DisableDhcp'
                                                }
                                                DefaultGatewayAddress SetDefaultGateway {
                                                    Address = $GatewayAddress
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[IPAddress]SetIP'
                                                }
                                                DnsServerAddress DnsServerAddress {
                                                    Address = $DnsInstanceIP, '127.0.0.1', '169.254.169.253'
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[DefaultGatewayAddress]SetDefaultGateway'
                                                }
                                                DnsConnectionSuffix DnsConnectionSuffix {
                                                    InterfaceAlias = 'Primary'
                                                    ConnectionSpecificSuffix = $DomainDNSName
                                                    RegisterThisConnectionsAddress = $True
                                                    UseSuffixWhenRegistering = $False
                                                    DependsOn = '[DnsServerAddress]DnsServerAddress'
                                                }
                                                WindowsFeature DnsTools {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-DNS-Server'
                                                    DependsOn = '[DnsConnectionSuffix]DnsConnectionSuffix'
                                                }
                                                WindowsFeature RSAT-AD-Tools {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-AD-Tools'
                                                    DependsOn = '[WindowsFeature]DnsTools'
                                                }
                                                WindowsFeature RSAT-ADDS {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-ADDS'
                                                    DependsOn = '[WindowsFeature]RSAT-AD-Tools'
                                                }
                                                WindowsFeature GPMC {
                                                    Ensure = 'Present'
                                                    Name = 'GPMC'
                                                    DependsOn = '[WindowsFeature]RSAT-ADDS'
                                                }
                                                WindowsFeature DNS {
                                                    Ensure = 'Present'
                                                    Name = 'DNS'
                                                    DependsOn = '[WindowsFeature]GPMC'
                                                }
                                                WindowsFeature AD-Domain-Services {
                                                    Ensure = 'Present'
                                                    Name = 'AD-Domain-Services'
                                                    DependsOn = '[WindowsFeature]DNS'
                                                }
                                                Service ActiveDirectoryWebServices {
                                                    Name = 'ADWS'
                                                    StartupType = 'Automatic'
                                                    State = 'Running'
                                                    DependsOn = '[WindowsFeature]AD-Domain-Services'
                                                }
                                                Computer Rename {
                                                    Name = $InstanceNetBIOSName
                                                    DependsOn = '[WindowsFeature]AD-Domain-Services'
                                                }
                                                User AdministratorPassword {
                                                    UserName  = 'Administrator'
                                                    Password  = $LaCredentials
                                                    DependsOn = '[Computer]Rename'
                                                }
                                                ADDomain PrimaryDC {
                                                    DomainName = $DomainDnsName
                                                    DomainNetBIOSName = $DomainNetBIOSName
                                                    Credential = $DaCredentials
                                                    SafemodeAdministratorPassword = $RestoreModeCredentials
                                                    DatabasePath = 'D:\NTDS'
                                                    LogPath = 'D:\NTDS'
                                                    SysvolPath = 'D:\SYSVOL'
                                                    DependsOn = '[User]AdministratorPassword'
                                                }
                                                WaitForADDomain WaitForPrimaryDC {
                                                    DomainName = $DomainDnsName
                                                    WaitTimeout = 600
                                                    DependsOn = '[ADDomain]PrimaryDC'
                                                }
                                                ADForestProperties TSL {
                                                    ForestName = $DomainDnsName
                                                    TombStoneLifetime = 60
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                ADReplicationSite RegionSite {
                                                    Name = $SiteName
                                                    RenameDefaultFirstSiteName = $true
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC', '[Service]ActiveDirectoryWebServices'
                                                }
                                                ADReplicationSubnet VPCCIDR {
                                                    Name = $VPCCIDR
                                                    Site = $SiteName
                                                    DependsOn = '[ADReplicationSite]RegionSite'
                                                }
                                                ADUser AlternateAdminUser {
                                                    Ensure = 'Present'
                                                    DomainName = $DomainDnsName
                                                    UserName = $AltAdminUserName
                                                    Password = $AltAdminCredentials
                                                    DisplayName = $AltAdminUserName
                                                    PasswordAuthentication = 'Negotiate'
                                                    UserPrincipalName = "$AltAdminUserName@$DomainDnsName"
                                                    Credential = $DaCredentials
                                                    DependsOn = '[ADReplicationSite]RegionSite'
                                                }
                                                ADGroup AddAdminToDomainAdminsGroup {
                                                    Ensure = 'Present'
                                                    GroupName = 'Domain Admins'
                                                    GroupScope = 'Global'
                                                    Category = 'Security'
                                                    MembersToInclude = @($AltAdminUserName, 'Administrator')
                                                    Credential = $DaCredentials
                                                    DependsOn = '[ADUser]AlternateAdminUser'
                                                }
                                                ADGroup AddAdminToEnterpriseAdminsGroup {
                                                    Ensure = 'Present'
                                                    GroupName = 'Enterprise Admins'
                                                    GroupScope = 'Universal'
                                                    Category = 'Security'
                                                    MembersToInclude = @($AltAdminUserName, 'Administrator')
                                                    Credential = $DaCredentials
                                                    DependsOn = '[ADUser]AlternateAdminUser'
                                                }
                                                ADGroup AddAdminToSchemaAdminsGroup {
                                                    Ensure = 'Present'
                                                    GroupName = 'Schema Admins'
                                                    GroupScope = 'Universal'
                                                    Category = 'Security'
                                                    MembersToExclude = @($AltAdminUserName, 'Administrator')
                                                    Credential = $DaCredentials
                                                    DependsOn = '[ADUser]AlternateAdminUser'
                                                }
                                                DnsServerForwarder ForwardtoVPCDNS {
                                                    IsSingleInstance = 'Yes'
                                                    IPAddresses = $VPCDNS
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                ADOptionalFeature RecycleBin {
                                                    FeatureName = 'Recycle Bin Feature'
                                                    EnterpriseAdministratorCredential = $DaCredentials
                                                    ForestFQDN = $DomainDnsName
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                ADKDSKey KdsKey {
                                                    Ensure = 'Present'
                                                    EffectiveTime = ((Get-Date).addhours(-10))
                                                    AllowUnsafeEffectiveTime = $True
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                ADServicePrincipalName WSMAN-FQDN {
                                                    ServicePrincipalName = "WSMAN/$InstanceNetBIOSName.$DomainDnsName"
                                                    Account = "$InstanceNetBIOSName$"
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                ADServicePrincipalName WSMAN-SN {
                                                    ServicePrincipalName = "WSMAN/$InstanceNetBIOSName"
                                                    Account = "$InstanceNetBIOSName$"
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                DnsServerScavenging SetServerScavenging {
                                                    DnsServer = 'localhost'
                                                    ScavengingState = $true
                                                    ScavengingInterval = '7.00:00:00'
                                                    RefreshInterval = '7.00:00:00'
                                                    NoRefreshInterval = '7.00:00:00'
                                                    DependsOn = '[WaitForADDomain]WaitForPrimaryDC'
                                                }
                                                DnsServerConditionalForwarder MADForwarder {
                                                    Name = $MadDNSName 
                                                    MasterServers = @($MadDcIP01, $MadDcIP02)
                                                    ReplicationScope = 'Forest'
                                                    Ensure = 'Present'
                                                    DependsOn = '[ADServicePrincipalName]WSMAN-FQDN'
                                                }
                                                DnsServerADZone CreateReverseLookupZone {
                                                    Ensure = 'Present'
                                                    Name = $ZoneName
                                                    DynamicUpdate = 'Secure'
                                                    ReplicationScope = 'Forest'
                                                    DependsOn = '[ADServicePrincipalName]WSMAN-FQDN'
                                                }
                                                DnsServerZoneAging DnsServerZoneAging-FL {
                                                    Name = $DomainDnsName
                                                    Enabled = $true
                                                    RefreshInterval = 168
                                                    NoRefreshInterval = 168
                                                    DependsOn = '[ADServicePrincipalName]WSMAN-FQDN'
                                                }
                                                DnsServerZoneAging DnsServerZoneAging-RL {
                                                    Name = $ZoneName
                                                    Enabled = $true
                                                    RefreshInterval = 168
                                                    NoRefreshInterval = 168
                                                    DependsOn = '[DnsServerADZone]CreateReverseLookupZone'
                                                }
                                                DnsServerDiagnostics Diagnostics {
                                                    DnsServer = 'localhost'
                                                    Answers = $true
                                                    EnableLogFileRollover = $true
                                                    EnableLoggingForLocalLookupEvent = $true
                                                    EnableLoggingForPluginDllEvent = $true
                                                    EnableLoggingForRecursiveLookupEvent = $true
                                                    EnableLoggingForRemoteServerEvent = $true
                                                    EnableLoggingForServerStartStopEvent = $true
                                                    EnableLoggingForTombstoneEvent = $true
                                                    EnableLoggingForZoneDataWriteEvent = $true
                                                    EnableLoggingForZoneLoadingEvent = $true
                                                    EnableLoggingToFile = $true
                                                    EventLogLevel = 7
                                                    FullPackets = $true
                                                    LogFilePath = 'C:\DnsLogs\dns.log'
                                                    MaxMBFileSize = 500000000
                                                    Notifications = $true
                                                    Queries = $true
                                                    QuestionTransactions = $true
                                                    ReceivePackets = $true
                                                    SaveLogsToPersistentStorage = $true
                                                    SendPackets = $true
                                                    TcpPackets = $true
                                                    UdpPackets = $true
                                                    UnmatchedResponse = $true
                                                    Update = $true
                                                    UseSystemEventLog = $true
                                                    WriteThrough = $true
                                                }
                                            }
                                        }
                                        Write-Output 'Generating MOF file'
                                        ConfigInstance -OutputPath 'C:\Temp\ConfigInstance' -ConfigurationData $ConfigurationData
                                    }

                                    Function Invoke-DscStatusCheck {
                                        $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'
                                        If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                                            Exit 3010
                                        } Else {
                                            Write-Output 'DSC Config Completed'
                                        }
                                    }

                                    $UserPassword = ConvertTo-SecureString '{{AdminPassword}}' -AsPlainText -Force
                                    $AltAdminCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('{{DomainDNSName}}\Admin', $UserPassword)
                                    $DaCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('{{DomainDNSName}}\Administrator', $UserPassword)
                                    $RestoreModeCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('Administrator', $UserPassword)
                                    $EniConfig = Get-EniConfig
                                    Set-DscConfiguration -AltAdminCredentials $AltAdminCredentials -AltAdminUserName 'Admin' -DaCredentials $DaCredentials -DnsInstanceIP $EniConfig.DnsIpAddress -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ADServer1NetBIOSName}}' -LaCredentials $RestoreModeCredentials -MacAddress $EniConfig.MacAddress -MadDcIP01 '{{MadDcIP01}}' -MadDcIP02 '{{MadDcIP02}}' -MadDNSName '{{MadDNSName}}' -RestoreModeCredentials $RestoreModeCredentials -SiteName '{{global:REGION}}' -VPCCIDR '{{VPCCIDR}}'
                                    Start-DscConfiguration 'C:\Temp\ConfigInstance' -Wait -Verbose -Force
                                    Invoke-DscStatusCheck
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: trustConfig
                    - name: trustConfig
                      action: aws:runCommand
                      onFailure: step:signalFailure
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{dc1InstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Get-EniConfig {
                                        Write-Output 'Getting network configuration'
                                        Try {
                                            $IpAddress = Get-NetIPConfiguration -ErrorAction Stop | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'IpAddress'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get network configuration $_"
                                            Exit 1
                                        }

                                        $Output = [PSCustomObject][Ordered]@{
                                            'DnsIpAddress'   = $IpAddress
                                        }

                                        Return $Output
                                    }

                                    Function Invoke-TrustAction {
                                        [CmdletBinding()]
                                        Param(
                                            [parameter(Mandatory = $true)][String]$RemoteFQDN,
                                            [parameter(Mandatory = $true)][String]$TrustDirection,
                                            [parameter(Mandatory = $true)][String]$TrustPassword
                                        )

                                        $LocalForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest() 
                                        $AdTrustDir = [System.DirectoryServices.ActiveDirectory.TrustDirection]::$TrustDirection
                                        $Null = Clear-DnsServerCache -Force -ErrorAction SilentlyContinue
                                        $Null = Clear-DnsClientCache -ErrorAction SilentlyContinue
                                        $LocalForest.CreateLocalSideOfTrustRelationship($RemoteFQDN, $AdTrustDir, $TrustPassword)
                                        & ksetup.exe /SetEncTypeAttr $RemoteFQDN 'RC4-HMAC-MD5' 'AES128-CTS-HMAC-SHA1-96' 'AES256-CTS-HMAC-SHA1-96'
                                    }

                                    Function Add-FSxOuAcl {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][string]$AclPath,
                                            [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                                            [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,
                                            [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,
                                            [Parameter(Mandatory = $false)][Guid]$ObjectGuid,        
                                            [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,
                                            [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid
                                        )

                                        Import-Module -Name 'ActiveDirectory' -Force

                                        [Security.Principal.SecurityIdentifier]$IdentityReference = $IdentityReference | Select-Object -ExpandProperty 'Value'

                                        $ArgumentList = $IdentityReference, $ActiveDirectoryRights, $AccessControlType, $ObjectGuid, $ActiveDirectorySecurityInheritance, $InheritedObjectGuid
                                        $ArgumentList = $ArgumentList.Where( { $_ -ne $Null })

                                        Write-Output 'Creating ACL object'
                                        Try {
                                            $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create ACL object $_"
                                            Exit 1
                                        }

                                        Write-Output "Getting ACL for $AclPath"
                                        Try {
                                            $ObjectAcl = Get-Acl -Path "AD:\$AclPath" -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get ACL for $AclPath $_"
                                            Exit 1
                                        }

                                        $ObjectAcl.AddAccessRule($Rule) 

                                        Write-Output "Setting ACL for $AclPath"
                                        Try {
                                            Set-Acl -AclObject $ObjectAcl -Path "AD:\$AclPath" -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set ACL for $AclPath $_"
                                            Exit 1
                                        }
                                    }

                                    Write-Output 'Getting domain information'
                                    Try {
                                        $Domain = Get-ADDomain -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get domain information $_"
                                        Exit 1
                                    }

                                    $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'
                                    $BaseDn = $Domain | Select-Object -ExpandProperty 'DistinguishedName'

                                    Write-Output 'Creating OU FSx'
                                    Try {
                                        New-ADOrganizationalUnit -Name 'FSx' -Path $BaseDn -ProtectedFromAccidentalDeletion $True -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to create OU FSx $_"
                                        Exit 1
                                    }

                                    $User = @{
                                        AccountPassword        = '{{AdminPassword}}' | ConvertTo-SecureString -AsPlainText -Force
                                        Name                   = 'FSxServiceAccount'
                                        DisplayName            = 'FSxServiceAccount'
                                        SamAccountName         = 'FSxServiceAccount'
                                        UserPrincipalName      = "FSxServiceAccount@$FQDN"
                                        KerberosEncryptionType = 'AES128', 'AES256'
                                        PasswordNeverExpires   = $True
                                        Enabled                = $True
                                        Path                   = "OU=FSx,$BaseDn"
                                    }

                                    Write-Output 'Creating FSxServiceAccount'
                                    Try {
                                        New-ADUser @User
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to create FSxServiceAccount $_"
                                        Exit 1
                                    }
                                    
                                    Try {
                                        New-ADGroup -DisplayName 'FSxAdmins' -GroupCategory 'Security' -GroupScope 'DomainLocal' -Name 'FSxAdmins' -Path "OU=FSx,$BaseDn" -SamAccountName 'FSxAdmins'
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to create FSxServiceAccount $_"
                                        Exit 1
                                    }

                                    Write-Output 'Getting RootDSE information'
                                    Try {
                                        $RootDse = Get-ADRootDSE -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get RootDSE information $_"
                                        Exit 1
                                    }

                                    Write-Output 'Getting computer SchemaNamingContext'
                                    Try {
                                        [System.GUID]$ComputerNameGuid = (Get-ADObject -SearchBase $RootDse.SchemaNamingContext -Filter { lDAPDisplayName -eq 'computer' } -Properties 'schemaIDGUID' -ErrorAction Stop).schemaIDGUID
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get computer SchemaNamingContext $_"
                                        Exit 1
                                    }

                                    $ExtendedRightsMap = @{ }

                                    Write-Output 'Getting ExtendedRightsMap'
                                    Try {
                                        $ErNamingContexts = Get-ADObject -SearchBase $RootDse.ConfigurationNamingContext -LDAPFilter '(&(objectclass=controlAccessRight)(rightsguid=*))' -Properties displayName, rightsGuid -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get ExtendedRightsMap $_"
                                        Exit 1
                                    }

                                    ForEach ($ErNamingContext in $ErNamingContexts) {
                                        $ExtendedRightsMap[$ErNamingContext.displayName] = [System.GUID]$ErNamingContext.rightsGuid
                                    }

                                    $NullGuid = [guid]'00000000-0000-0000-0000-000000000000'

                                    $AclRules = @(
                                        @{
                                            ActiveDirectoryRights              = 'CreateChild, DeleteChild'
                                            AccessControlType                  = 'Allow'
                                            ObjectGUID                         = $ComputerNameGuid
                                            ActiveDirectorySecurityInheritance = 'All'
                                            InheritedObjectGuid                = $NullGuid
                                        },
                                        @{
                                            ActiveDirectoryRights              = 'ExtendedRight'
                                            AccessControlType                  = 'Allow'
                                            ObjectGUID                         = $ExtendedRightsMap['Validated write to service principal name']
                                            ActiveDirectorySecurityInheritance = 'Descendents'
                                            InheritedObjectGuid                = $ComputerNameGuid
                                        },
                                        @{
                                            ActiveDirectoryRights              = 'ExtendedRight'
                                            AccessControlType                  = 'Allow'
                                            ObjectGUID                         = $ExtendedRightsMap['Account Restrictions']
                                            ActiveDirectorySecurityInheritance = 'Descendents'
                                            InheritedObjectGuid                = $ComputerNameGuid
                                        },
                                        @{
                                            ActiveDirectoryRights              = 'ExtendedRight'
                                            AccessControlType                  = 'Allow'
                                            ObjectGUID                         = $ExtendedRightsMap['Reset Password']
                                            ActiveDirectorySecurityInheritance = 'Descendents'
                                            InheritedObjectGuid                = $ComputerNameGuid
                                        },
                                        @{
                                            ActiveDirectoryRights              = 'ExtendedRight'
                                            AccessControlType                  = 'Allow'
                                            ObjectGUID                         = $ExtendedRightsMap['Validated write to DNS host name']
                                            ActiveDirectorySecurityInheritance = 'Descendents'
                                            InheritedObjectGuid                = $ComputerNameGuid
                                        }
                                    )

                                    Write-Output 'Getting FSxServiceAccount SID'
                                    Try {
                                        $IdentityReference = Get-ADUser -Identity 'FSxServiceAccount' -ErrorAction Stop | Select-Object -ExpandProperty 'SID'
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get FSxServiceAccount SID $_"
                                        Exit 1
                                    }

                                    Foreach ($AclRule in $AclRules) {
                                        Add-FSxOuAcl -AclPath "OU=FSx,$BaseDn" -IdentityReference $IdentityReference -ActiveDirectoryRights $AclRule.ActiveDirectoryRights -AccessControlType $AclRule.AccessControlType -ObjectGUID $AclRule.ObjectGUID -ActiveDirectorySecurityInheritance $AclRule.ActiveDirectorySecurityInheritance -InheritedObjectGuid $AclRule.InheritedObjectGuid
                                    }

                                    $TrustDirection = '{{TrustDirection}}'
                                    Switch ($TrustDirection) {
                                        'Two-Way' {
                                            $TrustDirOnprem = 'Bidirectional'
                                            $TrustDirMAD = 'Two-Way'
                                        }
                                        'One-way' {
                                            $TrustDirOnprem = 'Inbound'
                                            $TrustDirMAD = 'OneWayOutgoing'
                                        }
                                        Default { Throw 'InvalidArgument: Invalid value is passed for parameter TrustDirection' }
                                    }

                                    $TrustPassword = '{{AdminPassword}}'

                                    $EniConfig = Get-EniConfig
                                    Write-Output 'Creating Onprem side of trust.'
                                    Invoke-TrustAction -RemoteFQDN '{{MadDNSName}}' -TrustPassword $TrustPassword $TrustDirOnprem

                                    $CidrRange = @{ IpProtocol = "-1"; IpRanges = '0.0.0.0/0' }
                                    
                                    Write-Output 'Modifying the AWS Managed Microsoft Active Directory Security Group.'
                                    Try {
                                        $SecurityGroupId = Get-EC2SecurityGroup -Filter @{ Name = 'group-name'; Values = "{{MadDirectoryID}}_controllers" } -ErrorAction Stop | Select-Object -Property 'GroupId' -ExpandProperty 'GroupId'
                                        $Null = Grant-EC2SecurityGroupEgress -GroupId $SecurityGroupId -IpPermission $CidrRange -Region $Region -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get or modify the AWS Managed Microsoft Active Directory Security Group. $_"
                                        Exit 1
                                    }

                                    $TrustTypeForest = New-Object -TypeName 'Amazon.DirectoryService.TrustType' -ArgumentList 'Forest'
                                    $TrustDir = New-Object -TypeName 'Amazon.DirectoryService.TrustDirection' -ArgumentList $TrustDirMAD
                                    $SelectiveAuthDis = New-Object -TypeName 'Amazon.DirectoryService.SelectiveAuth' -ArgumentList 'Disabled'

                                    Write-Output 'Creating trust between MAD and Onprem.'
                                    Try {
                                        $Trust = New-DSTrust -DirectoryId '{{MadDirectoryID}}' -ConditionalForwarderIpAddr $EniConfig.DnsIpAddress -RemoteDomainName '{{DomainDNSName}}' -SelectiveAuth $SelectiveAuthDis -TrustDirection $TrustDir -TrustType $TrustTypeForest -TrustPassword $TrustPassword
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to create trust between MAD and Onprem. $_"
                                        Exit 1
                                    }
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: runOnPremDomainControllerAuditPolSsmAuto
                    - name: runOnPremDomainControllerAuditPolSsmAuto
                      action: aws:executeAutomation
                      onFailure: step:signalFailure
                      inputs:
                          DocumentName: !Ref OnPremDomainControllerAuditPolSsmAuto
                          RuntimeParameters:
                            ADServer1NetBIOSName:
                                - "{{ADServer1NetBIOSName}}"
                            StackName:
                                - "{{StackName}}"
                            VPCCIDR:
                                - "{{VPCCIDR}}"
                    - name: cfnSignalEnd
                      action: aws:branch
                      inputs:
                          Choices:
                              - NextStep: signalSuccess
                                Not:
                                    Variable: "{{StackName}}"
                                    StringEquals: ""
                              - NextStep: sleepEnd
                                Variable: "{{StackName}}"
                                StringEquals: ""
                    - name: signalSuccess
                      action: aws:executeAwsApi
                      isEnd: true
                      inputs:
                          Service: cloudformation
                          Api: SignalResource
                          LogicalResourceId: OnPremDomainController
                          StackName: "{{StackName}}"
                          Status: SUCCESS
                          UniqueId: "{{dc1InstanceId.InstanceId}}"
                    - name: sleepEnd
                      action: aws:sleep
                      isEnd: true
                      inputs:
                          Duration: PT1S
                    - name: signalFailure
                      action: aws:executeAwsApi
                      inputs:
                          Service: cloudformation
                          Api: SignalResource
                          LogicalResourceId: OnPremDomainController
                          StackName: "{{StackName}}"
                          Status: FAILURE
                          UniqueId: "{{dc1InstanceId.InstanceId}}"
            DocumentType: Automation
            Tags:
                - Key: StackName
                  Value:
                      Ref: AWS::StackName
    OnPremDomainControllerAuditPolSsmAuto:
        Type: AWS::SSM::Document
        Properties:
            Content:
                schemaVersion: "0.3"
                description: Deploy AD with SSM Automation
                parameters:
                    ADServer1NetBIOSName:
                        description: NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)
                        type: String
                    StackName:
                        description: Stack Name Input for cfn resource signal
                        type: String
                    VPCCIDR:
                        description: CIDR Block for the VPC
                        type: String                        
                mainSteps:
                    - name: dc1InstanceId
                      action: aws:executeAwsApi
                      inputs:
                          Service: ec2
                          Api: DescribeInstances
                          Filters:
                              - Name: tag:Name
                                Values:
                                    - "{{ADServer1NetBIOSName}}"
                              - Name: tag:aws:cloudformation:stack-name
                                Values:
                                    - "{{StackName}}"
                              - Name: instance-state-name
                                Values:
                                    - running
                      outputs:
                          - Name: InstanceId
                            Selector: $.Reservations[0].Instances[0].InstanceId
                            Type: String
                      nextStep: configureInstance
                    - name: configureInstance
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{dc1InstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Invoke-Cleanup {
                                        [CmdletBinding()]
                                        Param (
                                            [Parameter(Mandatory = $true)][String]$VPCCIDR
                                        )

                                        Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                                        Try {
                                            Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR
                                        } Catch [System.Exception] {
                                            Write-Output "Failed allow WinRM Traffic from VPC CIDR $_"
                                        }

                                        Write-Output 'Removing DSC Configuration'
                                        Try {
                                            Remove-DscConfigurationDocument -Stage 'Current' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed build DSC Configuration $_"
                                        }

                                        Write-Output 'Re-enabling Windows Firewall'
                                        Try {
                                            Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled 'True' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed re-enable firewall $_"
                                        }

                                        Write-Output 'Removing build files'
                                        Try {
                                            Remove-Item -Path 'C:\Temp' -Recurse -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed remove build files $_"
                                        }

                                        Write-Output 'Removing self signed cert'
                                        Try {
                                            $SelfSignedThumb = Get-ChildItem -Path 'cert:\LocalMachine\My\' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                            Remove-Item -Path "cert:\LocalMachine\My\$SelfSignedThumb" -DeleteKey -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed remove self signed cert $_"
                                        }
                                    }

                                    Function Set-DscConfiguration {
                                        Write-Output 'Getting the DSC encryption thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating configuration data block that has the certificate information for DSC configuration processing'
                                        $ConfigurationData = @{
                                            AllNodes = @(
                                                @{
                                                    NodeName = '*'
                                                    CertificateFile = 'C:\Temp\publickeys\DscPublicKey.cer'
                                                    Thumbprint = $DscCertThumbprint
                                                    PSDscAllowDomainUser = $true
                                                },
                                                @{
                                                    NodeName = 'localhost'
                                                }
                                            )
                                        }

                                        Configuration ConfigInstance {
                                            Import-DscResource -ModuleName 'AuditPolicyDsc'
                                            Node LocalHost {
                                                AuditPolicySubcategory CredentialValidationSuccess {
                                                    Name = 'Credential Validation'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory CredentialValidationFailure {
                                                    Name = 'Credential Validation'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory KerberosAuthenticationServiceSuccess {
                                                    Name = 'Kerberos Authentication Service'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory KerberosAuthenticationServiceFailure {
                                                    Name = 'Kerberos Authentication Service'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory KerberosServiceTicketOperationsSuccess {
                                                    Name = 'Kerberos Service Ticket Operations'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory KerberosServiceTicketOperationsFailure {
                                                    Name = 'Kerberos Service Ticket Operations'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherAccountLogonEventsSuccess {
                                                    Name = 'Other Account Logon Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory OtherAccountLogonEventsFailure {
                                                    Name = 'Other Account Logon Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ApplicationGroupManagementSuccess {
                                                    Name = 'Application Group Management'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ApplicationGroupManagementFailure {
                                                    Name = 'Application Group Management'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ComputerAccountManagementSuccess {
                                                    Name = 'Computer Account Management'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory ComputerAccountManagementFailure {
                                                    Name = 'Computer Account Management'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory DistributionGroupManagementSuccess {
                                                    Name = 'Distribution Group Management'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DistributionGroupManagementFailure {
                                                    Name = 'Distribution Group Management'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory OtherAccountManagementEventsSuccess {
                                                    Name = 'Other Account Management Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherAccountManagementEventsFailure {
                                                    Name = 'Other Account Management Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory SecurityGroupManagementSuccess {
                                                    Name = 'Security Group Management'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SecurityGroupManagementFailure {
                                                    Name = 'Security Group Management'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory UserAccountManagementSuccess {
                                                    Name = 'User Account Management'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory UserAccountManagementFailure {
                                                    Name = 'User Account Management'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DPAPIActivitySuccess {
                                                    Name = 'DPAPI Activity'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DPAPIActivityFailure {
                                                    Name = 'DPAPI Activity'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory PNPActivitySuccess {
                                                    Name = 'Plug and Play Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory PNPActivityFailure {
                                                    Name = 'Plug and Play Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ProcessCreationSuccess {
                                                    Name = 'Process Creation'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory ProcessCreationFailure {
                                                    Name = 'Process Creation'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ProcessTerminationSuccess {
                                                    Name = 'Process Termination'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory ProcessTerminationFailure {
                                                    Name = 'Process Termination'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory RPCEventsSuccess {
                                                    Name = 'RPC Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory RPCEventsFailure {
                                                    Name = 'RPC Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory TokenRightAdjustedSuccess {
                                                    Name = 'Token Right Adjusted Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory TokenRightAdjustedFailure {
                                                    Name = 'Token Right Adjusted Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory DetailedDirectoryServiceReplicationSuccess {
                                                    Name = 'Detailed Directory Service Replication'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DetailedDirectoryServiceReplicationFailure {
                                                    Name = 'Detailed Directory Service Replication'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DirectoryServiceAccessSuccess {
                                                    Name = 'Directory Service Access'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory DirectoryServiceAccessFailure {
                                                    Name = 'Directory Service Access'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DirectoryServiceChangesSuccess {
                                                    Name = 'Directory Service Changes'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DirectoryServiceChangesFailure {
                                                    Name = 'Directory Service Changes'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory DirectoryServiceReplicationSuccess {
                                                    Name = 'Directory Service Replication'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory DirectoryServiceReplicationFailure {
                                                    Name = 'Directory Service Replication'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory AccountLockoutSuccess {
                                                    Name = 'Account Lockout'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory AccountLockoutFailure {
                                                    Name = 'Account Lockout'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory UserDeviceClaimsSuccess {
                                                    Name = 'User / Device Claims'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory UserDeviceClaimsFailure {
                                                    Name = 'User / Device Claims'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory GroupMembershipSuccess {
                                                    Name = 'Group Membership'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory GroupMembershipFailure {
                                                    Name = 'Group Membership'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory IPsecExtendedModeSuccess {
                                                    Name = 'IPsec Extended Mode'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecExtendedModeFailure {
                                                    Name = 'IPsec Extended Mode'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecMainModeSuccess {
                                                    Name = 'IPsec Main Mode'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecMainModeFailure {
                                                    Name = 'IPsec Main Mode'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecQuickModeSuccess {
                                                    Name = 'IPsec Quick Mode'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecQuickModeFailure {
                                                    Name = 'IPsec Quick Mode'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory LogoffSuccess {
                                                    Name = 'Logoff'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory Logoffailure {
                                                    Name = 'Logoff'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory LogonSuccess {
                                                    Name = 'Logon'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory LogonFailure {
                                                    Name = 'Logon'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory NetworkPolicyServerSuccess {
                                                    Name = 'Network Policy Server'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory NetworkPolicyServerFailure {
                                                    Name = 'Network Policy Server'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherLogonLogoffEventsSuccess {
                                                    Name = 'Other Logon/Logoff Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherLogonLogoffEventsFailure {
                                                    Name = 'Other Logon/Logoff Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SpecialLogonSuccess {
                                                    Name = 'Special Logon'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SpecialLogonFailure {
                                                    Name = 'Special Logon'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ApplicationGeneratedSuccess {
                                                    Name = 'Application Generated'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory ApplicationGeneratedFailure {
                                                    Name = 'Application Generated'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory CertificationServicesSuccess {
                                                    Name = 'Certification Services'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory CertificationServicesFailure {
                                                    Name = 'Certification Services'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory DetailedFileShareSuccess {
                                                    Name = 'Detailed File Share'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory DetailedFileShareFailure {
                                                    Name = 'Detailed File Share'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FileShareSuccess {
                                                    Name = 'File Share'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FileShareFailure {
                                                    Name = 'File Share'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FileSystemSuccess {
                                                    Name = 'File System'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FileSystemFailure {
                                                    Name = 'File System'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FilteringPlatformConnectionSuccess {
                                                    Name = 'Filtering Platform Connection'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FilteringPlatformConnectionFailure {
                                                    Name = 'Filtering Platform Connection'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory FilteringPlatformPacketDropSuccess {
                                                    Name = 'Filtering Platform Packet Drop'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory FilteringPlatformPacketDropFailure {
                                                    Name = 'Filtering Platform Packet Drop'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory HandleManipulationSuccess {
                                                    Name = 'Handle Manipulation'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory HandleManipulationFailure {
                                                    Name = 'Handle Manipulation'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory KernelObjectSuccess {
                                                    Name = 'Kernel Object'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory KernelObjectFailure {
                                                    Name = 'Kernel Object'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory OtherObjectAccessEventsSuccess {
                                                    Name = 'Other Object Access Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherObjectAccessEventsFailure {
                                                    Name = 'Other Object Access Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory RegistrySuccess {
                                                    Name = 'Registry'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory RegistryFailure {
                                                    Name = 'Registry'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory RemovableStorageSuccess {
                                                    Name = 'Removable Storage'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory RemovableStorageFailure {
                                                    Name = 'Removable Storage'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory CentralAccessPolicyStagingSuccess {
                                                    Name = 'Central Policy Staging'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory CentralAccessPolicyStagingFailure {
                                                    Name = 'Central Policy Staging'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory AuditPolicyChangeSuccess {
                                                    Name = 'Audit Policy Change'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory AuditPolicyChangeFailure {
                                                    Name = 'Audit Policy Change'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory AuthenticationPolicyChangeSuccess {
                                                    Name = 'Authentication Policy Change'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory AuthenticationPolicyChangeFailure {
                                                    Name = 'Authentication Policy Change'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory AuthorizationPolicyChangeSuccess {
                                                    Name = 'Authorization Policy Change'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory AuthorizationPolicyChangeFailure {
                                                    Name = 'Authorization Policy Change'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory MPSSVCRule-LevelPolicyChangeSuccess {
                                                    Name = 'MPSSVC Rule-Level Policy Change'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory MPSSVCRule-LevelPolicyChangeFailure {
                                                    Name = 'MPSSVC Rule-Level Policy Change'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherPolicyChangeEventsSuccess {
                                                    Name = 'Other Policy Change Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory OtherPolicyChangeEventsFailure {
                                                    Name = 'Other Policy Change Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory NonSensitivePrivilegeUseSuccess {
                                                    Name = 'Non Sensitive Privilege Use'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory NonSensitivePrivilegeUseFailure {
                                                    Name = 'Non Sensitive Privilege Use'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory OtherPrivilegeUseEventsSuccess {
                                                    Name = 'Other Privilege Use Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory OtherPrivilegeUseEventsFailure {
                                                    Name = 'Other Privilege Use Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory SensitivePrivilegeUseSuccess {
                                                    Name = 'Sensitive Privilege Use'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SensitivePrivilegeUseFailure {
                                                    Name = 'Sensitive Privilege Use'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecDriverSuccess {
                                                    Name = 'IPsec Driver'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory IPsecDriverFailure {
                                                    Name = 'IPsec Driver'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherSystemEventsSuccess {
                                                    Name = 'Other System Events'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory OtherSystemEventsFailure {
                                                    Name = 'Other System Events'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SecurityStateChangeSuccess {
                                                    Name = 'Security State Change'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SecurityStateChangeFailure {
                                                    Name = 'Security State Change'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory SecuritySystemExtensionSuccess {
                                                    Name = 'Security System Extension'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SecuritySystemExtensionFailure {
                                                    Name = 'Security System Extension'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Absent'
                                                }
                                                AuditPolicySubcategory SystemIntegritySuccess {
                                                    Name = 'System Integrity'
                                                    AuditFlag = 'Success'
                                                    Ensure = 'Present'
                                                }
                                                AuditPolicySubcategory SystemIntegrityFailure {
                                                    Name = 'System Integrity'
                                                    AuditFlag = 'Failure'
                                                    Ensure = 'Present'
                                                }
                                            }
                                        }
                                        Write-Output 'Generating MOF file'
                                        ConfigInstance -OutputPath 'C:\Temp\AuditConfigInstance' -ConfigurationData $ConfigurationData
                                    }

                                    Function Invoke-DscStatusCheck {
                                        $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'
                                        If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                                            Exit 3010
                                        } Else {
                                            Write-Output 'DSC Config Completed'
                                        }
                                    }

                                    Set-DscConfiguration
                                    Start-DscConfiguration 'C:\Temp\AuditConfigInstance' -Wait -Verbose -Force
                                    Invoke-DscStatusCheck

                                    Try {
                                        $Version = Invoke-WebRequest 'https://github.com/awslabs/kinesis-agent-windows/releases/latest' -Headers @{"Accept" = "application/json" } -UseBasicParsing -ErrorAction Stop | Select-Object -ExpandProperty 'Content' | ConvertFrom-Json | Select-Object -ExpandProperty 'tag_name'
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get latest KTAP version $_"
                                        Exit 1
                                    }

                                    $VersionMinusV = $Version.Substring(1)

                                    (New-Object -TypeName 'System.Net.WebClient').DownloadFile("https://github.com/awslabs/kinesis-agent-windows/releases/download/$Version/AWSKinesisTap.$VersionMinusV.msi", 'C:\Temp\AWSKinesisTap.msi')

                                    Write-Output 'Installing KinesisTap'
                                    $DeployArguments = @('/quiet', '/l', 'C:\Temp\ktap-install-log.txt')
                                    $Process = Start-Process 'C:\Temp\AWSKinesisTap.msi' -ArgumentList $DeployArguments -Wait -PassThru

                                    If ($Process.ExitCode -ne 0) {
                                        Write-Output "Error installing KinesisTap -exit code $($Process.ExitCode)"
                                        Exit 1
                                    }

                                    $KenesisAgentSettings = @{
                                        'Sources' = @(
                                            @{
                                                'Id' = 'PerformanceCounter'
                                                'SourceType' = 'WindowsPerformanceCounterSource'
                                                'Categories' = @(
                                                    @{
                                                        'Category' = 'ENA Packets Shaping'
                                                        'Instances' = 'ENA #1'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Aggregate inbound BW allowance exceeded'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'Aggregate outbound BW allowance exceeded'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'Connection tracking allowance exceeded'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'Link local packet rate allowance exceeded'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'PPS allowance exceeded'
                                                                'Unit' = 'Count'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'LogicalDisk'
                                                        'Instances' = 'D:'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = '% Free Space'
                                                                'Unit' = 'Percent'
                                                            },
                                                            @{
                                                                'Counter' = 'Avg. Disk Queue Length'
                                                                'Unit' = 'Count'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'LogicalDisk'
                                                        'Instances' = 'C:'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = '% Free Space'
                                                                'Unit' = 'Percent'
                                                            },
                                                            @{
                                                                'Counter' = 'Avg. Disk Queue Length'
                                                                'Unit' = 'Count'
                                                            }
                                                        )
                                                    },                                                    
                                                    @{
                                                        'Category' = 'Memory'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = '% Committed Bytes in Use'
                                                                'Unit' = 'Percent'
                                                            },
                                                            @{
                                                                'Counter' = 'Available MBytes'
                                                                'Unit' = 'Megabytes'
                                                            },
                                                            @{
                                                                'Counter' = 'Long-Term Average Standby Cache Lifetime (s)'
                                                                'Unit' = 'Seconds'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'Network Interface'
                                                        'Instances' = 'Amazon Elastic Network Adapter'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Bytes Received/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'Bytes Sent/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'Current Bandwidth'
                                                                'Unit' = 'Bits/Second'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'PhysicalDisk'
                                                        'Instances' = '0 C:'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Avg. Disk Queue Length'
                                                                'Unit' = 'Count'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'PhysicalDisk'
                                                        'Instances' = '1 D:'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Avg. Disk Queue Length'
                                                                'Unit' = 'Count'
                                                            }
                                                        )
                                                    },                                                    
                                                    @{
                                                        'Category' = 'Processor'
                                                        'Instances' = '*'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = '% Processor Time'
                                                                'Unit' = 'Percent'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'ADWS'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Active Web Service Sessions'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'ChangePassword Operations Per Second'
                                                                'Unit' = 'Count/Second'
                                                            }
                                                            @{
                                                                'Counter' = 'Delete Operations Per Second'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'SetPassword Operations Per Second'
                                                                'Unit' = 'Count/Second'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'Database ==> Instances'
                                                        'Instances' = 'NTDSA'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Database Cache % Hit'
                                                                'Unit' = 'Percent'
                                                            },                                                        
                                                            @{
                                                                'Counter' = 'Database Cache Size (MB)'
                                                                'Unit' = 'Megabytes'
                                                            },
                                                            @{
                                                                'Counter' = 'I/O Database Reads Average Latency'
                                                                'Unit' = 'Milliseconds'
                                                            },
                                                            @{
                                                                'Counter' = 'I/O Database Reads/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'I/O Log Writes Average Latency'
                                                                'Unit' = 'Milliseconds'
                                                            },
                                                            @{
                                                                'Counter' = 'I/O Database Writes/sec'
                                                                'Unit' = 'Count/Second'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'DFS Replication Service Volumes'
                                                        'Instances' = '*'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'USN Journal Unread Percentage'
                                                                'Unit' = 'Percent'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'DNS'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Dynamic Update Rejected'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'Recursive Queries/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'Recursive Query Failure/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'Secure Update Failure'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'TCP Query Received/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'Total Query Received/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'Total Response Sent/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'UDP Query Received/sec'
                                                                'Unit' = 'Count/Second'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'NTDS'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'ATQ Estimated Queue Delay'
                                                                'Unit' = 'Milliseconds'
                                                            },
                                                            @{
                                                                'Counter' = 'ATQ Request Latency'
                                                                'Unit' = 'Milliseconds'
                                                            },
                                                            @{
                                                                'Counter' = 'DRA Pending Replication Operations'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'DRA Pending Replication Synchronizations'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'DS Directory Reads/Sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'DS Directory Searches/Sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'DS Directory Writes/Sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'LDAP Bind Time'
                                                                'Unit' = 'Milliseconds'
                                                            },
                                                            @{
                                                                'Counter' = 'LDAP Client Sessions'
                                                                'Unit' = 'Count'
                                                            },
                                                            @{
                                                                'Counter' = 'LDAP Searches/sec'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'LDAP Successful Binds/sec'
                                                                'Unit' = 'Count/Second'
                                                            }
                                                        )
                                                    },
                                                    @{
                                                        'Category' = 'Security System-Wide Statistics'
                                                        'Counters' = @(
                                                            @{
                                                                'Counter' = 'Kerberos Authentications'
                                                                'Unit' = 'Count/Second'
                                                            },
                                                            @{
                                                                'Counter' = 'NTLM Authentications'
                                                                'Unit' = 'Count/Second'
                                                            }
                                                        )
                                                    }
                                                )
                                            },
                                            @{
                                                'Id' = 'ApplicationLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Application'
                                            },
                                            @{
                                                'Id' = 'SecurityLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Security'
                                            },
                                            @{
                                                'Id' = 'SystemLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'System'
                                            },
                                            @{
                                                'Id' = 'DFSReplicationLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'DFS Replication'
                                            },
                                            @{
                                                'Id' = 'DirectoryServiceLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Directory Service'
                                            },
                                            @{
                                                'Id' = 'DNSServerLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'DNS Server'
                                            },
                                            @{
                                                'Id' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational'
                                            },
                                            @{
                                                'Id' = 'DNSServerAuditLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Microsoft-Windows-DNSServer/Audit'
                                            },
                                            @{
                                                'Id' = 'KerberosOperationalLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Microsoft-Windows-Kerberos/Operational'
                                            },                                            
                                            @{
                                                'Id' = 'Kerberos-Key-Distribution-CenterOperationalLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Microsoft-Windows-Kerberos-Key-Distribution-Center/Operational'
                                            },
                                            @{
                                                'Id' = 'NTLMOperationalLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Microsoft-Windows-NTLM/Operational'
                                            },
                                            @{
                                                'Id' = 'Security-NetlogonOperationalLog'
                                                'SourceType' = 'WindowsEventLogSource'
                                                'LogName' = 'Microsoft-Windows-Security-Netlogon/Operational'
                                            },
                                            @{
                                                'Id' = 'DNSLogs'
                                                'SourceType' = 'DirectorySource'
                                                'Directory' = 'C:\DnsLogs'
                                                'FileNameFilter' = '*.log|*.txt'
                                                'RecordParser' = 'SingleLine'
                                            }
                                        )
                                        'Sinks'      = @(
                                            @{
                                                'Namespace' = 'EC2-Domain-Controller-Metrics'
                                                'Region' = 'ReplaceMe'
                                                'Id' = 'CloudWatchSink'
                                                'SinkType' = 'CloudWatch'
                                            },
                                            @{
                                                'Id' = 'ApplicationLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'ApplicationLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'SecurityLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'SecurityLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'SystemLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'SystemLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'DFSReplicationLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'DFSReplicationLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'DirectoryServiceLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'DirectoryServiceLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },                                            
                                            @{
                                                'Id' = 'DNSServerLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'DNSServerLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'DNSServerAuditLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'DNSServerAuditLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'KerberosOperationalLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'KerberosOperationalLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'Kerberos-Key-Distribution-CenterOperationalLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'Kerberos-Key-Distribution-CenterOperationalLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'NTLMOperationalLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'NTLMOperationalLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'Security-NetlogonOperationalLog-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'Security-NetlogonOperationalLog-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            },
                                            @{
                                                'Id' = 'DNSLogs-CloudWatchLogsSink'
                                                'SinkType' = 'CloudWatchLogs'
                                                'BufferInterval' = '60'
                                                'LogGroup' = '{ComputerName}-Log-Group'
                                                'LogStream' = 'DNSLogs-Stream'
                                                'Region' = 'ReplaceMe'
                                                'Format' = 'json'
                                            }
                                        )
                                        'Pipes'      = @(
                                            @{
                                                'Id' = 'PerformanceCounterToCloudWatch'
                                                'SourceRef' = 'PerformanceCounter'
                                                'SinkRef' = 'CloudWatchSink'
                                            },
                                            @{
                                                'Id' = 'ApplicationLogToCloudWatch'
                                                'SourceRef' = 'ApplicationLog'
                                                'SinkRef' = 'ApplicationLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'SecurityLogToCloudWatch'
                                                'SourceRef' = 'SecurityLog'
                                                'SinkRef' = 'SecurityLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'SystemLogToCloudWatch'
                                                'SourceRef' = 'SystemLog'
                                                'SinkRef' = 'SystemLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'DFSReplicationLogToCloudWatch'
                                                'SourceRef' = 'DFSReplicationLog'
                                                'SinkRef' = 'DFSReplicationLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'DirectoryServiceLogToCloudWatch'
                                                'SourceRef' = 'DirectoryServiceLog'
                                                'SinkRef' = 'DirectoryServiceLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'DNSServerLogToCloudWatch'
                                                'SourceRef' = 'DNSServerLog'
                                                'SinkRef' = 'DNSServerLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'CertificateServicesClient-Lifecycle-SystemOperationalLogToCloudWatch'
                                                'SourceRef' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog'
                                                'SinkRef' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'DNSServerAuditLogToCloudWatch'
                                                'SourceRef' = 'DNSServerAuditLog'
                                                'SinkRef' = 'DNSServerAuditLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'KerberosOperationalLogToCloudWatch'
                                                'SourceRef' = 'KerberosOperationalLog'
                                                'SinkRef' = 'KerberosOperationalLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'Kerberos-Key-Distribution-CenterOperationalLogToCloudWatch'
                                                'SourceRef' = 'Kerberos-Key-Distribution-CenterOperationalLog'
                                                'SinkRef' = 'Kerberos-Key-Distribution-CenterOperationalLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'NTLMOperationalLogToCloudWatch'
                                                'SourceRef' = 'NTLMOperationalLog'
                                                'SinkRef' = 'NTLMOperationalLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'Security-NetlogonOperationalLogToCloudWatch'
                                                'SourceRef' = 'Security-NetlogonOperationalLog'
                                                'SinkRef' = 'Security-NetlogonOperationalLog-CloudWatchLogsSink'
                                            },
                                            @{
                                                'Id' = 'DNSLogsToCloudWatch'
                                                'SourceRef' = 'DNSLogs'
                                                'SinkRef' = 'DNSLogs-CloudWatchLogsSink'
                                            }
                                        )
                                        'SelfUpdate' = 0
                                    }

                                    Write-Output 'Getting region'
                                    Try {
                                        [string]$Token = Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token-ttl-seconds' = '3600' } -Method 'PUT' -Uri 'http://169.254.169.254/latest/api/token' -UseBasicParsing -ErrorAction Stop
                                        $Region = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $Token } -Method 'GET' -Uri 'http://169.254.169.254/latest/dynamic/instance-identity/document' -UseBasicParsing -ErrorAction Stop | Select-Object -ExpandProperty 'Region').ToUpper()
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get region $_"
                                        Exit 1
                                    }

                                    $KenesisAgentSettings.Sinks | Where-Object { $_.Region -eq 'ReplaceMe' } | ForEach-Object { $_.Region = $Region }

                                    Write-Output 'Exporting appsettings.json content'
                                    Try {
                                        $KenesisAgentSettings | ConvertTo-Json -Depth 10 -ErrorAction Stop | Out-File 'C:\Program Files\Amazon\AWSKinesisTap\appsettings.json' -Encoding 'ascii' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Unable to export appsettings.json $_"
                                        Exit 1
                                    }

                                    Write-Output 'Restarting AWSKinesisTap service'
                                    Try {
                                        Restart-Service 'AWSKinesisTap' -Force
                                    } Catch [System.Exception] {
                                        Write-Output "Unable to restart AWSKinesisTap $_"
                                        Exit 1
                                    }

                                    Invoke-Cleanup -VPCCIDR '{{VPCCIDR}}'
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
            DocumentType: Automation
            Tags:
                - Key: StackName
                  Value:
                      Ref: AWS::StackName
    OnPremDomainController:
        Type: AWS::EC2::Instance
        DependsOn: ManagedAD
        CreationPolicy:
            ResourceSignal:
                Count: 1
                Timeout: PT60M
        Properties:
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      DeleteOnTermination: true
                      Encrypted: true
                      KmsKeyId: alias/aws/ebs
                      VolumeSize: 60
                      VolumeType: gp3
                - DeviceName: /dev/xvdf
                  Ebs:
                      DeleteOnTermination: true
                      Encrypted: true
                      KmsKeyId: alias/aws/ebs
                      VolumeSize: 10
                      VolumeType: gp3
            IamInstanceProfile: !Ref InstanceProfile
            ImageId: !Ref AMI
            InstanceType: t3.large
            SecurityGroupIds:
                - Ref: OnPremDomainControllerSG
            SubnetId: !Ref VPCPublicSubnet1Subnet
            Tags:
                - Key: Domain
                  Value: !Ref OnpremDomainName
                - Key: Name
                  Value: ONPREM-DC01
                - Key: Role
                  Value: Domain Controller                 
            UserData:
                Fn::Base64: !Sub
                    - |
                        <powershell>
                        $Params = @{
                            AdminPassword = '${AdminPassword}'
                            ADServer1NetBIOSName = 'ONPREM-DC01'
                            DomainDNSName = '${DomainDNSName}'
                            DomainNetBIOSName = '${DomainNetBIOSName}'
                            MadDcIP01 = '${MadDcIP01}'
                            MadDcIP02 = '${MadDcIP02}'
                            MadDirectoryID = '${MadDirectoryID}'
                            MadDNSName = '${MadDNSName}'
                            StackName = '${AWS::StackName}'
                            TrustDirection = '${TrustDirection}'
                            URLSuffix = '${AWS::URLSuffix}'
                            VPCCIDR = '${VPCCIDR}'
                        }
                        Start-SSMAutomationExecution -DocumentName '${OnPremDomainControllerSsmAuto}' -Parameter $Params
                        </powershell>
                    - AdminPassword: !Ref AdminPassword
                      DomainDNSName: !Ref OnpremDomainName
                      DomainNetBIOSName: !Ref OnpremNetBIOSName
                      MadDcIP01: !Select [0, !GetAtt ManagedAD.DnsIpAddresses]
                      MadDcIP02: !Select [1, !GetAtt ManagedAD.DnsIpAddresses]
                      MadDirectoryID: !Ref ManagedAD
                      MadDNSName: !Ref MADDomainName
                      TrustDirection: !Ref TrustDirection
                      VPCCIDR: !GetAtt VPC.CidrBlock
    OnpremPkiInstanceSSMAuto:
        Type: AWS::SSM::Document
        Properties:
            Content:
                schemaVersion: "0.3"
                description: Deploy AD with SSM Automation
                parameters:
                    AdminPassword:
                        description: Password for the Admin account (Also used to create the trust)
                        type: String
                    DomainDNSName:
                        description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
                        type: String
                    DomainNetBIOSName:
                        description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE
                        type: String
                    ExistingDcIP01:
                        description: IP of DNS server that can resolve domain (Must be accessible)
                        type: String
                    ServerNetBIOSName:
                        description: NetBIOS name of the Management Instance server (up to 15 characters)
                        type: String
                    StackName:
                        description: Stack Name Input for cfn resource signal
                        type: String
                    URLSuffix:
                        description: AWS URL suffix
                        type: String
                    VPCCIDR:
                        description: CIDR Block for the VPC
                        type: String
                mainSteps:
                    - name: pkiInstanceId
                      action: aws:executeAwsApi
                      onFailure: step:signalFailure
                      inputs:
                          Service: ec2
                          Api: DescribeInstances
                          Filters:
                              - Name: tag:Name
                                Values: ["{{ServerNetBIOSName}}"]
                              - Name: tag:aws:cloudformation:stack-name
                                Values: ["{{StackName}}"]
                              - Name: instance-state-name
                                Values: ["running"]
                      outputs:
                          - Name: InstanceId
                            Selector: $.Reservations[0].Instances[0].InstanceId
                            Type: String
                      nextStep: intializeInstance
                    - name: intializeInstance
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{pkiInstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

                                    $Modules = @(
                                        @{
                                            Name = 'NetworkingDsc'
                                            Version = '8.2.0'
                                        },
                                        @{
                                            Name = 'ActiveDirectoryDsc'
                                            Version = '6.0.1'
                                        },
                                        @{
                                            Name = 'ComputerManagementDsc'
                                            Version = '8.5.0'
                                        },
                                        @{
                                            Name = 'DnsServerDsc'
                                            Version = '3.0.0'
                                        }
                                    )

                                    Function New-VolumeFromRawDisk {
                                        Write-Output 'Finding RAW Disk'
                                        $Counter = 0
                                        Do {
                                            Try {
                                                $BlankDisks = Get-Disk -ErrorAction Stop | Where-Object { $_.PartitionStyle -eq 'RAW' } | Select-Object -ExpandProperty 'Number'
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get disk $_"
                                                $BlankDisks = $Null
                                            }
                                            If (-not $BlankDisks) {
                                                $Counter ++
                                                Write-Output 'RAW Disk not found sleeping 10 seconds and will try again.'
                                                Start-Sleep -Seconds 10
                                            }
                                        } Until ($BlankDisks -or $Counter -eq 12)

                                        If ($Counter -ge 12) {
                                            Write-Output 'RAW Disk not found exiting'
                                            Return
                                        }

                                        Foreach ($BlankDisk in $BlankDisks) {
                                            Write-Output 'Data Volume not initialized attempting to bring online'
                                            Try {
                                                Initialize-Disk -Number $BlankDisk -PartitionStyle 'GPT' -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed attempting to bring online Data Volume $_"
                                                Exit 1
                                            }

                                            Start-Sleep -Seconds 5

                                            Write-Output 'Data Volume creating new partition'
                                            Try {
                                                $DriveLetter = New-Partition -DiskNumber $BlankDisk -AssignDriveLetter -UseMaximumSize -ErrorAction Stop | Select-Object -ExpandProperty 'DriveLetter'
                                            } Catch [System.Exception] {
                                                Write-Output "Failed creating new partition $_"
                                                Exit 1
                                            }

                                            Start-Sleep -Seconds 5

                                            Write-Output 'Data Volume formatting partition'
                                            Try {
                                                $Null = Format-Volume -DriveLetter $DriveLetter -FileSystem 'NTFS' -NewFileSystemLabel 'Data' -Confirm:$false -Force -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed formatting partition $_"
                                                Exit 1
                                            }

                                            Try {
                                                $Null = Get-CimInstance -ClassName 'Win32_Volume' -Filter "DriveLetter='$($DriveLetter):'" -ErrorAction Stop | Set-CimInstance -Arguments @{ IndexingEnabled = $False }
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to turn off indexing $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Invoke-PreConfig {
                                        Write-Output 'Temporarily disabling Windows Firewall'
                                        Try {
                                            Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled False -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to disable Windows Firewall $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating file directory for DSC public cert'
                                        Try {
                                            $Null = New-Item -Path 'C:\Temp\publickeys' -ItemType 'Directory' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create publickeys file directory $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating certificate to encrypt credentials in MOF file'
                                        Try {
                                            $cert = New-SelfSignedCertificate -Type 'DocumentEncryptionCertLegacyCsp' -DnsName 'DscEncryptCert' -HashAlgorithm 'SHA256' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create self signed cert $_"
                                            Exit 1
                                        }

                                        Write-Output 'Exporting the self signed public key certificate'
                                        Try {
                                            $Null = $cert | Export-Certificate -FilePath 'C:\Temp\publickeys\DscPublicKey.cer' -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to copy self signed cert to publickeys directory $_"
                                            Exit 1
                                        }
                                    }

                                    Function Invoke-LcmConfig {
                                        Write-Output 'Getting the DSC cert thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        [DSCLocalConfigurationManager()]
                                        Configuration LCMConfig
                                        {
                                            Node 'localhost' {
                                                Settings {
                                                    RefreshMode = 'Push'
                                                    ConfigurationModeFrequencyMins = 15
                                                    ActionAfterReboot = 'StopConfiguration'
                                                    RebootNodeIfNeeded = $false
                                                    ConfigurationMode = 'ApplyAndAutoCorrect'
                                                    CertificateId = $DscCertThumbprint
                                                }
                                            }
                                        }

                                        Write-Output 'Generating MOF file for LCM'
                                        LCMConfig -OutputPath 'C:\Temp\LCMConfig'

                                        Write-Output 'Sets LCM configuration to MOF generated in previous command'
                                        Try {
                                            Set-DscLocalConfigurationManager -Path 'C:\Temp\LCMConfig' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set LCM configuration $_"
                                            Exit 1
                                        } 
                                    }

                                    Write-Output 'Installing NuGet Package Provider'
                                    Try {
                                        $Null = Install-PackageProvider -Name 'NuGet' -MinimumVersion '2.8.5' -Force -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to install NuGet Package Provider $_"
                                        Exit 1
                                    }

                                    Write-Output 'Setting PSGallery Respository to trusted'
                                    Try {
                                        Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to set PSGallery Respository to trusted $_"
                                        Exit 1
                                    }

                                    Write-Output 'Installing the needed Powershell DSC modules'
                                    Foreach ($Module in $Modules) {
                                        Try {
                                            Install-Module -Name $Module.Name -RequiredVersion $Module.Version -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to Import Modules $_"
                                            Exit 1
                                        }
                                    }

                                    Write-Output 'Getting certificate AutoEnrollment policy'
                                    Try {
                                        $CertEnrollmentActive = Get-CertificateAutoEnrollmentPolicy -context 'Machine' -Scope 'Local' | Select-Object -ExpandProperty 'PolicyState' -ErrorAction Stop
                                    } Catch [System.Exception] {
                                        Write-Output "Failed to get certificate AutoEnrollment policy $_"
                                        Exit 1
                                    }

                                    If ($CertEnrollmentActive -ne 'Enabled') {
                                        Write-Output 'Setting certificate AutoEnrollment policy'
                                        Try {
                                            Set-CertificateAutoEnrollmentPolicy -ExpirationPercentage 10 -PolicyState 'Enabled' -EnableTemplateCheck -EnableMyStoreManagement -StoreName 'MY' -context 'Machine' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set certificate AutoEnrollment policy $_"
                                            Exit 1
                                        }
                                    }

                                    New-VolumeFromRawDisk
                                    Invoke-PreConfig
                                    Invoke-LcmConfig
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: configureInstance
                    - name: configureInstance
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{pkiInstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Get-EniConfig {
                                        Write-Output 'Getting network configuration'
                                        Try {
                                            $NetIpConfig = Get-NetIPConfiguration -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get network configuration $_"
                                            Exit 1
                                        }

                                        Write-Output 'Grabbing the current gateway address in order to static IP correctly'
                                        $GatewayAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4DefaultGateway' | Select-Object -ExpandProperty 'NextHop'

                                        Write-Output 'Formatting IP address in format needed for IPAdress DSC resource'
                                        $IpAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'IpAddress'
                                        $Prefix = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'PrefixLength'
                                        $IpAddr = 'IP/CIDR' -replace 'IP', $IpAddress -replace 'CIDR', $Prefix

                                        Write-Output 'Getting MAC address'
                                        Try {
                                            $MacAddress = Get-NetAdapter -ErrorAction Stop | Select-Object -ExpandProperty 'MacAddress'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get MAC address $_"
                                            Exit 1
                                        }

                                        $Output = [PSCustomObject][Ordered]@{
                                            'GatewayAddress' = $GatewayAddress
                                            'IpAddress' = $IpAddr
                                            'MacAddress' = $MacAddress
                                        }

                                        Return $Output
                                    }

                                    Function Set-DscConfiguration {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$DaCredentials,
                                            [Parameter(Mandatory = $true)][string]$DomainDNSName,
                                            [Parameter(Mandatory = $true)][string]$DomainNetBIOSName,
                                            [Parameter(Mandatory = $false)][string]$ExistingDcIP01,
                                            [Parameter(Mandatory = $true)][string]$GatewayAddress,
                                            [Parameter(Mandatory = $true)][string]$InstanceIP,
                                            [Parameter(Mandatory = $true)][string]$InstanceNetBIOSName,
                                            [Parameter(Mandatory = $true)][string]$MacAddress
                                        )

                                        $VPCDNS = '169.254.169.253'

                                        Write-Output 'Getting the DSC encryption thumbprint to secure the MOF file'
                                        Try {
                                            $DscCertThumbprint = Get-ChildItem -Path 'cert:\LocalMachine\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get DSC cert thumbprint $_"
                                            Exit 1
                                        }

                                        Write-Output 'Creating configuration data block that has the certificate information for DSC configuration processing'
                                        $ConfigurationData = @{
                                            AllNodes = @(
                                                @{
                                                    NodeName = '*'
                                                    CertificateFile = 'C:\Temp\publickeys\DscPublicKey.cer'
                                                    Thumbprint = $DscCertThumbprint
                                                    PSDscAllowDomainUser = $true
                                                },
                                                @{
                                                    NodeName = 'localhost'
                                                }
                                            )
                                        }

                                        Configuration ConfigInstance {
                                            Import-DscResource -ModuleName 'PSDesiredStateConfiguration', 'NetworkingDsc', 'ComputerManagementDsc', 'DnsServerDsc', 'ActiveDirectoryDsc'
                                            Node LocalHost {
                                                NetAdapterName RenameNetAdapterPrimary {
                                                    NewName = 'Primary'
                                                    MacAddress = $MacAddress
                                                }
                                                PowerPlan 'SetPlanHighPerformance' {
                                                    IsSingleInstance = 'Yes'
                                                    Name = 'High performance'
                                                }
                                                NetAdapterAdvancedProperty JumboPacket {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*JumboPacket'
                                                    RegistryValue = 9015
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'                                                    
                                                }
                                                NetAdapterAdvancedProperty ReceiveBuffers {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*ReceiveBuffers'
                                                    RegistryValue = 8192
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'                                                    
                                                }
                                                NetAdapterAdvancedProperty TransmitBuffers {
                                                    NetworkAdapterName = 'Primary'
                                                    RegistryKeyword = '*TransmitBuffers'
                                                    RegistryValue = 1024
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'                                                    
                                                }
                                                NetBios DisableNetBios {
                                                    InterfaceAlias = 'Primary'
                                                    Setting = 'Disable'
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'                                                    
                                                }
                                                NetIPInterface DisableDhcp {
                                                    Dhcp = 'Disabled'
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[NetAdapterName]RenameNetAdapterPrimary'
                                                }
                                                IPAddress SetIP {
                                                    IPAddress = $InstanceIP
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[NetIPInterface]DisableDhcp'
                                                }
                                                DefaultGatewayAddress SetDefaultGateway {
                                                    Address = $GatewayAddress
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[IPAddress]SetIP'
                                                }
                                                DnsServerAddress DnsServerAddress {
                                                    Address = $ExistingDcIP01, '169.254.169.253'
                                                    InterfaceAlias = 'Primary'
                                                    AddressFamily = 'IPv4'
                                                    DependsOn = '[DefaultGatewayAddress]SetDefaultGateway'
                                                }
                                                DnsConnectionSuffix DnsConnectionSuffix {
                                                    InterfaceAlias = 'Primary'
                                                    ConnectionSpecificSuffix = $DomainDNSName
                                                    RegisterThisConnectionsAddress = $True
                                                    UseSuffixWhenRegistering = $False
                                                    DependsOn = '[DnsServerAddress]DnsServerAddress'
                                                }
                                                WindowsFeature DnsTools {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-DNS-Server'
                                                    DependsOn = '[DnsConnectionSuffix]DnsConnectionSuffix'
                                                }
                                                WindowsFeature RSAT-AD-Tools {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-AD-Tools'
                                                    DependsOn = '[WindowsFeature]DnsTools'
                                                }
                                                WindowsFeature RSAT-ADDS {
                                                    Ensure = 'Present'
                                                    Name = 'RSAT-ADDS'
                                                    DependsOn = '[WindowsFeature]RSAT-AD-Tools'
                                                }
                                                WindowsFeature GPMC {
                                                    Ensure = 'Present'
                                                    Name = 'GPMC'
                                                    DependsOn = '[WindowsFeature]RSAT-ADDS'
                                                }
                                                Computer JoinDomain {
                                                    Name = $InstanceNetBIOSName
                                                    DomainName = $DomainDnsName
                                                    Credential = $DaCredentials
                                                    DependsOn  = '[WindowsFeature]GPMC'
                                                }
                                            }
                                        }
                                        Write-Output 'Generating MOF file'
                                        ConfigInstance -OutputPath 'C:\Temp\ConfigInstance' -ConfigurationData $ConfigurationData
                                    }

                                    Function Invoke-DscStatusCheck {
                                        $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'
                                        If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                                            Exit 3010
                                        } Else {
                                            Write-Output 'DSC Config Completed'
                                        }
                                    }

                                    $UserPassword = ConvertTo-SecureString '{{AdminPassword}}' -AsPlainText -Force
                                    $AltAdminCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('{{DomainDNSName}}\Administrator', $UserPassword)
                                    $EniConfig = Get-EniConfig
                                    Set-DscConfiguration -DaCredentials $AltAdminCredentials -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -ExistingDcIP01 '{{ExistingDcIP01}}' -GatewayAddress $EniConfig.GatewayAddress -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -MacAddress $EniConfig.MacAddress
                                    Start-DscConfiguration 'C:\Temp\ConfigInstance' -Wait -Verbose -Force
                                    Invoke-DscStatusCheck
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                      nextStep: postConfig
                    - name: postConfig
                      action: aws:runCommand
                      inputs:
                          DocumentName: AWS-RunPowerShellScript
                          InstanceIds:
                              - "{{pkiInstanceId.InstanceId}}"
                          Parameters:
                              commands: |-
                                    Function Invoke-EnterpriseCaConfig {
                                        [CmdletBinding()]
                                        Param (
                                            [Parameter(Mandatory = $true)][System.Management.Automation.PSCredential]$Credentials,
                                            [Parameter(Mandatory = $true)][String]$EntCaCommonName,
                                            [Parameter(Mandatory = $true)][ValidateSet('SHA256', 'SHA384', 'SHA512')][String]$EntCaHashAlgorithm,
                                            [Parameter(Mandatory = $true)][ValidateSet('2048', '4096')][String]$EntCaKeyLength,
                                            [Parameter(Mandatory = $true)][String]$EntCaValidityPeriodUnits,
                                            [Parameter(Mandatory = $true)][String]$VPCCIDR
                                        )

                                        $ServiceName = $MyInvocation.MyCommand.Name
                                        $CompName = $env:COMPUTERNAME
                                        $Folders = @(
                                            'D:\Pki\Req',
                                            'D:\ADCS\DB',
                                            'D:\ADCS\Log'
                                        )
                                        $FilePath = 'D:\Pki'
                                        $Principals = @(
                                            'ANONYMOUS LOGON',
                                            'EVERYONE'
                                        )

                                        Write-Output 'Installing Windows Features'
                                        Try {
                                            Install-WindowsFeature -Name 'Adcs-Cert-Authority', 'RSAT-AD-Tools', 'RSAT-DNS-Server', 'Web-WebServer' -IncludeManagementTools -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to install Windows Features $_"
                                            Exit 1
                                        }

                                        Write-Output 'Getting AD domain'
                                        Try {
                                            $Domain = Get-ADDomain -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get AD domain $_"
                                            Exit 1
                                        }
                                        $BaseDn = $Domain | Select-Object -ExpandProperty 'DistinguishedName'
                                        $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'
                                        $Netbios = $Domain | Select-Object -ExpandProperty 'NetBIOSName'

                                        Write-Output 'Getting a domain controller to perform actions against'
                                        Try {
                                            $DC = Get-ADDomainController -Discover -ForceDiscover -ErrorAction Stop | Select-Object -ExpandProperty 'HostName'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get a domain controller $_"
                                            Exit 1
                                        }

                                        $Counter = 0
                                        Do {
                                            $ARecordPresent = Resolve-DnsName -Name "$CompName.$FQDN" -DnsOnly -Server $DC -ErrorAction SilentlyContinue
                                            If (-not $ARecordPresent) {
                                                $Counter ++
                                                Write-Output 'A record missing, registering it.'
                                                Register-DnsClient
                                                If ($Counter -gt '1') {
                                                    Start-Sleep -Seconds 10
                                                }
                                            }
                                        } Until ($ARecordPresent -or $Counter -eq 12)

                                        If ($Counter -ge 12) {
                                            Write-Output 'A record never created'
                                            Exit 1
                                        }

                                        Write-Output 'Creating PKI CNAME record'
                                        $Counter = 0
                                        Do {
                                            $CnameRecordPresent = Resolve-DnsName -Name "PKI.$FQDN" -DnsOnly -Server $DC -ErrorAction SilentlyContinue
                                            If (-not $CnameRecordPresent) {
                                                $Counter ++
                                                Write-Output 'CNAME record missing, creating it'
                                                $HostNameAlias = "$CompName.$FQDN"
                                                Invoke-Command -ComputerName $DC -Credential $Credentials -ScriptBlock { Add-DnsServerResourceRecordCName -Name 'PKI' -HostNameAlias $using:HostNameAlias -ZoneName $using:FQDN }
                                                If ($Counter -gt '1') {
                                                    Start-Sleep -Seconds 10
                                                }
                                            }
                                        } Until ($CnameRecordPresent -or $Counter -eq 12)

                                        If ($Counter -ge 12) {
                                            Write-Output 'CNAME record never created'
                                            Exit 1
                                        }

                                        Write-Output 'Creating PKI folders'
                                        Foreach ($Folder in $Folders) {
                                            $PathPresent = Test-Path -Path $Folder -ErrorAction SilentlyContinue
                                            If (-not $PathPresent) {
                                                Try {
                                                    $Null = New-Item -Path $Folder -Type 'Directory' -ErrorAction Stop
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to create $Folder directory $_"
                                                    Exit 1
                                                }
                                            } 
                                        }

                                        Write-Output 'Example CPS statement' | Out-File 'D:\Pki\cps.txt'

                                        Write-Output 'Sharing PKI folder'
                                        $SharePresent = Get-SmbShare -Name 'Pki' -ErrorAction SilentlyContinue
                                        If (-not $SharePresent) {
                                            Try {
                                                $Null = New-SmbShare -Name 'Pki' -Path 'D:\Pki' -FullAccess 'SYSTEM', "$Netbios\Domain Admins" -ChangeAccess "$Netbios\Cert Publishers" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create PKI SMB Share $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Creating PKI IIS virtual directory'
                                        $VdPresent = Get-WebVirtualDirectory -Name 'Pki'
                                        If (-not $VdPresent) {
                                            Try {
                                                $Null = New-WebVirtualDirectory -Site 'Default Web Site' -Name 'Pki' -PhysicalPath 'D:\Pki' -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create PKI IIS virtual directory $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Setting PKI IIS virtual directory requestFiltering'
                                        Try {
                                            Set-WebConfigurationProperty -Filter '/system.webServer/security/requestFiltering' -Name 'allowDoubleEscaping' -Value 'true' -PSPath 'IIS:\Sites\Default Web Site\Pki' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set PKI IIS virtual directory requestFiltering $_"
                                            Exit 1
                                        }

                                        Write-Output 'Setting PKI IIS virtual directory directoryBrowse'
                                        Try {
                                            Set-WebConfigurationProperty -Filter '/system.webServer/directoryBrowse' -Name 'enabled' -Value 'true' -PSPath 'IIS:\Sites\Default Web Site\Pki' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to set PKI IIS virtual directory directoryBrowse $_"
                                            Exit 1
                                        }

                                        Write-Output 'Setting PKI folder file system ACLs'
                                        Foreach ($Princ in $Principals) {
                                            $Principal = New-Object -TypeName 'System.Security.Principal.NTAccount'($Princ)
                                            $Perms = [System.Security.AccessControl.FileSystemRights]'Read, ReadAndExecute, ListDirectory'
                                            $Inheritance = [System.Security.AccessControl.InheritanceFlags]::'ContainerInherit', 'ObjectInherit'
                                            $Propagation = [System.Security.AccessControl.PropagationFlags]::'None'
                                            $Access = [System.Security.AccessControl.AccessControlType]::'Allow'
                                            $AccessRule = New-Object -TypeName 'System.Security.AccessControl.FileSystemAccessRule'($Principal, $Perms, $Inheritance, $Propagation, $Access) 
                                            Try {
                                                $Acl = Get-Acl -Path $FilePath -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for PKI directory $_"
                                                Exit 1
                                            }
                                            $Acl.AddAccessRule($AccessRule)
                                            Try {
                                                Set-Acl -Path $FilePath -AclObject $Acl -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to set ACL for PKI directory $_"
                                                Exit 1
                                            }
                                        }

                                        Write-Output 'Resetting IIS service'
                                        Try {
                                            & iisreset.exe > $null
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to reset IIS service $_"
                                            Exit 1
                                        }

                                        $URL = "URL=http://pki.$FQDN/pki/cps.txt"

                                        $Inf = @(
                                            '[Version]',
                                            'Signature="$Windows NT$"',
                                            '[PolicyStatementExtension]',
                                            'Policies=InternalPolicy',
                                            '[InternalPolicy]',
                                            'OID=1.2.3.4.1455.67.89.5', 
                                            'Notice="Legal Policy Statement"',
                                            $URL
                                            '[Certsrv_Server]',
                                            "RenewalKeyLength=$EntCaKeyLength",
                                            'RenewalValidityPeriod=Years',
                                            "RenewalValidityPeriodUnits=$EntCaValidityPeriodUnits",
                                            'CRLPeriod=Weeks',
                                            'CRLPeriodUnits=1',
                                            'CRLDeltaPeriod=Days',  
                                            'CRLDeltaPeriodUnits=0',
                                            'LoadDefaultTemplates=0',
                                            'AlternateSignatureAlgorithm=0',
                                            '[CRLDistributionPoint]',
                                            '[AuthorityInformationAccess]'
                                        )

                                        Write-Output 'Creating CAPolicy.inf'
                                        Try {
                                            $Inf | Out-File -FilePath 'C:\Windows\CAPolicy.inf' -Encoding 'ascii'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create CAPolicy.inf $_"
                                            Exit 1
                                        }

                                        Write-Output 'Installing Enterprise Root CA'
                                        Try {
                                            $Null = Install-AdcsCertificationAuthority -CAType 'EnterpriseRootCA' -CACommonName $EntCaCommonName -KeyLength $EntCaKeyLength -HashAlgorithm $EntCaHashAlgorithm -CryptoProviderName 'RSA#Microsoft Software Key Storage Provider' -ValidityPeriod 'Years' -ValidityPeriodUnits $EntCaValidityPeriodUnits -DatabaseDirectory 'D:\ADCS\DB' -LogDirectory 'D:\ADCS\Log' -Force -ErrorAction Stop -Credential $Credentials
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to install Enterprise Root CA $_"
                                            Exit 1
                                        }

                                        $CDP = "http://pki.$FQDN/pki/<CaName><CRLNameSuffix><DeltaCRLAllowed>.crl"
                                        $AIA = "http://pki.$FQDN/pki/<ServerDNSName>_<CaName><CertificateName>.crt"

                                        Write-Output 'Configuring CRL distro points'
                                        Try {
                                            $Null = Get-CACRLDistributionPoint | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CACRLDistributionPoint -Force -ErrorAction Stop
                                            $Null = Add-CACRLDistributionPoint -Uri $CDP -AddToCertificateCDP -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to configure CRL Distro $_"
                                            Exit 1
                                        }

                                        Write-Output 'Configuring AIA distro points'
                                        Try {
                                            $Null = Get-CAAuthorityInformationAccess | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CAAuthorityInformationAccess -Force -ErrorAction Stop
                                            $Null = Add-CAAuthorityInformationAccess -AddToCertificateAia -Uri $AIA -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to configure AIA Distro $_"
                                            Exit 1
                                        }

                                        Write-Output 'Configuring Enterprise CA'
                                        & certutil.exe -setreg CA\CRLOverlapPeriodUnits '12' > $null
                                        & certutil.exe -setreg CA\CRLOverlapPeriod 'Hours' > $null
                                        & certutil.exe -setreg CA\ValidityPeriodUnits '5' > $null
                                        & certutil.exe -setreg CA\ValidityPeriod 'Years' > $null
                                        & certutil.exe -setreg CA\AuditFilter '127' > $null
                                        & auditpol.exe /set /subcategory:'Certification Services' /failure:enable /success:enable > $null

                                        Write-Output 'Restarting CA service'
                                        Try {
                                            Restart-Service -Name 'certsvc' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to restart CA service $_"
                                            Exit 1
                                        }

                                        Start-Sleep -Seconds 10

                                        Write-Output 'Publishing CRL'
                                        & certutil.exe -crl > $null

                                        Write-Output 'Copying CRL to PKI folder'
                                        Try {
                                            Copy-Item -Path 'C:\Windows\System32\CertSrv\CertEnroll\*.cr*' -Destination 'D:\Pki\' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to copy CRL to PKI folder  $_"
                                            Exit 1
                                        }

                                        Write-Output 'Restarting CA service'
                                        Try {
                                            Restart-Service -Name 'certsvc' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to restart CA service $_"
                                        }

                                        Write-Output 'Creating LdapOverSSL certificate template'
                                        New-KerbCertTemplate -BaseDn $BaseDn -Credential $Credentials -Server $DC

                                        Write-Output 'Getting domain controllers'
                                        Try {
                                            $DomainControllers = Get-ADComputer -SearchBase "OU=Domain Controllers,$BaseDn" -Filter * | Select-Object -ExpandProperty 'DNSHostName'
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to get domain controllers $_"
                                        }

                                        Write-Output 'Running Group Policy update on all domain controllers'
                                        Foreach ($DomainController in $DomainControllers) {
                                            Invoke-Command -ComputerName $DomainController -Credential $Credentials -ScriptBlock { Invoke-GPUpdate -RandomDelayInMinutes '0' -Force }
                                        }

                                        Write-Output 'Creating Update CRL scheduled task'
                                        Try {
                                            $ScheduledTaskAction = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument '& certutil.exe -crl; Copy-Item -Path C:\Windows\System32\CertSrv\CertEnroll\*.cr* -Destination D:\Pki\'
                                            $ScheduledTaskTrigger = New-ScheduledTaskTrigger -Daily -DaysInterval '5' -At '12am' -ErrorAction Stop
                                            $ScheduledTaskPrincipal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType 'ServiceAccount' -RunLevel 'Highest' -ErrorAction Stop
                                            $ScheduledTaskSettingsSet = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -Compatibility 'Win8' -ExecutionTimeLimit (New-TimeSpan -Hours '1') -ErrorAction Stop
                                            $ScheduledTask = New-ScheduledTask -Action $ScheduledTaskAction -Principal $ScheduledTaskPrincipal -Trigger $ScheduledTaskTrigger -Settings $ScheduledTaskSettingsSet -Description 'Updates CRL to Local Pki Folder' -ErrorAction Stop
                                            $Null = Register-ScheduledTask 'Update CRL' -InputObject $ScheduledTask -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to register Update CRL scheduled task $_" -Severity 'WARN'
                                        }

                                        Write-Output 'Running CRL scheduled task'
                                        Try {
                                            Start-ScheduledTask -TaskName 'Update CRL' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to run CRL scheduled task $_" -Severity 'WARN'
                                        }

                                        Write-Output 'Restarting CA service'
                                        Try {
                                            Restart-Service -Name 'certsvc' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to restart CA service $_" -Severity 'WARN'
                                        }

                                        Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                                        Try {
                                            Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to allow WinRM traffic from VPC CIDR $_" -Severity 'WARN'
                                        }
                                    }

                                    Function Set-CredSSP {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][ValidateSet('Enable', 'Disable')][string]$Action
                                        )

                                        $RootKey = 'Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows'
                                        $CredDelKey = 'CredentialsDelegation'
                                        $FreshCredKey = 'AllowFreshCredentials'
                                        $FreshCredKeyNTLM = 'AllowFreshCredentialsWhenNTLMOnly'
                                        $ServiceName = $MyInvocation.MyCommand.Name

                                        Switch ($Action) {
                                            'Enable' {
                                                Write-Output 'Enabling CredSSP'
                                                Try {
                                                    $Null = Enable-WSManCredSSP -Role 'Client' -DelegateComputer '*' -Force -ErrorAction Stop
                                                    $Null = Enable-WSManCredSSP -Role 'Server' -Force -ErrorAction Stop
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to enable CredSSP $_"
                                                    $Null = Disable-WSManCredSSP -Role 'Client' -ErrorAction SilentlyContinue
                                                    $Null = Disable-WSManCredSSP -Role 'Server' -ErrorAction SilentlyContinue
                                                    Exit 1
                                                }

                                                Write-Output 'Setting CredSSP registry entries'
                                                $CredDelKeyPresent = Test-Path -Path (Join-Path -Path $RootKey -ChildPath $CredDelKey) -ErrorAction SilentlyContinue
                                                If (-not $CredDelKeyPresent) {
                                                    Try {
                                                        $CredDelPath = New-Item -Path $RootKey -Name $CredDelKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'

                                                        $FreshCredKeyPresent = Test-Path -Path (Join-Path -Path "Registry::$CredDelPath" -ChildPath $FreshCredKey) -ErrorAction SilentlyContinue
                                                        If (-not $FreshCredKeyPresent) {
                                                            $FreshCredKeyPath = New-Item -Path "Registry::$CredDelPath" -Name $FreshCredKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                                        }

                                                        $FreshCredKeyNTLMPresent = Test-Path -Path (Join-Path -Path "Registry::$CredDelPath" -ChildPath $FreshCredKeyNTLM) -ErrorAction SilentlyContinue
                                                        If (-not $FreshCredKeyNTLMPresent) {
                                                            $FreshCredKeyNTLMPath = New-Item -Path "Registry::$CredDelPath" -Name $FreshCredKeyNTLM -ErrorAction Stop | Select-Object -ExpandProperty 'Name'
                                                        }

                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'AllowFreshCredentials' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'ConcatenateDefaults_AllowFresh' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'AllowFreshCredentialsWhenNTLMOnly' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$CredDelPath" -Name 'ConcatenateDefaults_AllowFreshNTLMOnly' -Value '1' -PropertyType 'Dword' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$FreshCredKeyPath" -Name '1' -Value 'WSMAN/*' -PropertyType 'String' -Force -ErrorAction Stop
                                                        $Null = New-ItemProperty -Path "Registry::$FreshCredKeyNTLMPath" -Name '1' -Value 'WSMAN/*' -PropertyType 'String' -Force -ErrorAction Stop
                                                    } Catch [System.Exception] {
                                                        Write-Output "Failed to create CredSSP registry entries $_"
                                                        Remove-Item -Path (Join-Path -Path $RootKey -ChildPath $CredDelKey) -Force -Recurse
                                                        Exit 1
                                                    }
                                                }
                                            }
                                            'Disable' {
                                                Write-Output 'Disabling CredSSP'
                                                Try {
                                                    Disable-WSManCredSSP -Role 'Client' -ErrorAction Continue
                                                    Disable-WSManCredSSP -Role 'Server' -ErrorAction Stop
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to disable CredSSP $_"
                                                    Exit 1
                                                }

                                                Write-Output 'Removing CredSSP registry entries'-Severity 'INFO'
                                                Try {
                                                    Remove-Item -Path (Join-Path -Path $RootKey -ChildPath $CredDelKey) -Force -Recurse
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to remove CredSSP registry entries $_"
                                                    Exit 1
                                                }
                                            }
                                            Default { 
                                                Write-Output 'InvalidArgument: Invalid value is passed for parameter Action'
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function New-TemplateOID {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][string]$Server,
                                            [Parameter(Mandatory = $true)][string]$ConfigNC
                                        )

                                        $Hex = '0123456789ABCDEF'

                                        Do {
                                            [string]$RandomHex = $null
                                            For ($i = 1; $i -le 32; $i++) {
                                                $RandomHex += $Hex.Substring((Get-Random -Minimum 0 -Maximum 16), 1)
                                            }

                                            $OID_Part_1 = Get-Random -Minimum 1000000 -Maximum 99999999
                                            $OID_Part_2 = Get-Random -Minimum 10000000 -Maximum 99999999
                                            $OID_Part_3 = $RandomHex
                                            $OID_Forest = Get-ADObject -Server $Server -Identity "CN=OID,CN=Public Key Services,CN=Services,$ConfigNC" -Properties msPKI-Cert-Template-OID | Select-Object -ExpandProperty msPKI-Cert-Template-OID -ErrorAction SilentlyContinue
                                            $msPKICertTemplateOID = "$OID_Forest.$OID_Part_1.$OID_Part_2"
                                            $Name = "$OID_Part_2.$OID_Part_3"
                                            $Search = Get-ADObject -Server $Server -SearchBase "CN=OID,CN=Public Key Services,CN=Services,$ConfigNC" -Filter { cn -eq $Name -and msPKI-Cert-Template-OID -eq $msPKICertTemplateOID } -ErrorAction SilentlyContinue
                                            If ($Search) { 
                                                $Unique = 'False'
                                            } Else { 
                                                $Unique = 'True'
                                            }
                                        } Until ($Unique = 'True')
                                        Return @{
                                            TemplateOID  = $msPKICertTemplateOID
                                            TemplateName = $Name
                                        }
                                    }

                                    Function New-KerbCertTemplate {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][string]$BaseDn,
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Server
                                        )

                                        $CA = $env:COMPUTERNAME

                                        $OID = New-TemplateOID -Server $Server -ConfigNC "CN=Configuration,$BaseDn"

                                        $TemplateOIDPath = "CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"
                                        $OidOtherAttributes = @{
                                            'DisplayName' = 'LdapOverSSL'
                                            'flags' = [System.Int32]'1'
                                            'msPKI-Cert-Template-OID' = $OID.TemplateOID
                                        }

                                        $OtherAttributes = @{
                                            'flags' = [System.Int32]'131168'
                                            'msPKI-Certificate-Application-Policy' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')
                                            'msPKI-Certificate-Name-Flag'= [System.Int32]'138412032'
                                            'msPKI-Enrollment-Flag' = [System.Int32]'40'
                                            'msPKI-Minimal-Key-Size' = [System.Int32]'2048'
                                            'msPKI-Private-Key-Flag' = [System.Int32]'84279552'
                                            'msPKI-Template-Minor-Revision' = [System.Int32]'1'
                                            'msPKI-Template-Schema-Version' = [System.Int32]'4'
                                            'msPKI-RA-Signature' = [System.Int32]'0'
                                            'pKIMaxIssuingDepth' = [System.Int32]'0'
                                            'ObjectClass' = [System.String]'pKICertificateTemplate'
                                            'pKICriticalExtensions' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('2.5.29.17', '2.5.29.15')
                                            'pKIDefaultCSPs' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1,Microsoft RSA SChannel Cryptographic Provider')
                                            'pKIDefaultKeySpec' = [System.Int32]'1'
                                            'pKIExpirationPeriod' = [System.Byte[]]@('0', '64', '57', '135', '46', '225', '254', '255')
                                            'pKIExtendedKeyUsage' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')
                                            'pKIKeyUsage' = [System.Byte[]]@('160', '0')
                                            'pKIOverlapPeriod' = [System.Byte[]]@('0', '128', '166', '10', '255', '222', '255', '255')
                                            'revision' = [System.Int32]'100'
                                            'msPKI-Cert-Template-OID' = $OID.TemplateOID
                                        }

                                        Write-Output "Creating new LdapOverSSL certificate template OID $_"
                                        Try {
                                            New-ADObject -Path $TemplateOIDPath -OtherAttributes $OidOtherAttributes -Name $OID.TemplateName -Type 'msPKI-Enterprise-Oid' -Server $Server -Credential $Credential -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create new LdapOverSSL certificate template OID $_"
                                            Exit 1
                                        }

                                        $TemplatePath = "CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"

                                        Write-Output "Creating new LdapOverSSL certificate template $_"
                                        Try {
                                            New-ADObject -Path $TemplatePath -OtherAttributes $OtherAttributes -Name 'LdapOverSSL' -DisplayName 'LdapOverSSL' -Type 'pKICertificateTemplate' -Server $Server -Credential $Credential -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed to create new LdapOverSSL certificate template $_"
                                            Exit 1
                                        }

                                        $SidsToAdd = @(
                                            [Security.Principal.SecurityIdentifier]'S-1-5-9'
                                            (Get-ADGroup -Identity 'Domain Controllers' | Select-Object -ExpandProperty 'SID')
                                        )

                                        $SidsToRemove = @(
                                            [Security.Principal.SecurityIdentifier]'S-1-5-18',
                                            (Get-ADGroup -Identity 'Domain Admins' | Select-Object -ExpandProperty 'SID')
                                        )

                                        Write-Output 'Enabling CredSSP'
                                        Set-CredSSP -Action 'Enable'

                                        Write-Output 'Sleeping to ensure replication of certificate template has completed'
                                        Start-Sleep -Seconds 60

                                        Write-Output 'Cleaning up ACLs on LdapOverSSL certificate template'
                                        $ExtendedRightGuids = @(
                                            [GUID]'0e10c968-78fb-11d2-90d4-00c04f79dc55',
                                            [GUID]'a05b8cc2-17bc-4802-a710-e7c15ab866a2'
                                        )
                                        Foreach ($SidToAdd in $SidsToAdd) {
                                            Add-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToAdd -ActiveDirectoryRights 'GenericRead,GenericWrite,WriteDacl,WriteOwner,Delete' -AccessControlType 'Allow' -ActiveDirectorySecurityInheritance 'None'

                                            Foreach ($ExtendedRightGuid in $ExtendedRightGuids) {
                                                Add-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToAdd -ActiveDirectoryRights 'ExtendedRight' -AccessControlType 'Allow' -ObjectGuid $ExtendedRightGuid -ActiveDirectorySecurityInheritance 'None'
                                            }
                                        }

                                        Set-CertTemplateAclInheritance -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn"

                                        Foreach ($SidToRemove in $SidsToRemove) {
                                            Remove-CertTemplateAcl -Credential $Credential -Path "CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn" -IdentityReference $SidToRemove -AccessControlType 'Allow'
                                        }

                                        Write-Output "Publishing LdapOverSSL template to allow enrollment"
                                        $Counter = 0
                                        Do {
                                            $TempPresent = $Null
                                            Try {
                                                $TempPresent = Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock { 
                                                    Get-ADObject "CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn" -Partition "CN=Configuration,$Using:BaseDn" -Properties 'certificateTemplates' | Select-Object -ExpandProperty 'certificateTemplates' | Where-Object { $_ -contains 'LdapOverSSL' }
                                                }
                                            } Catch [System.Exception] {
                                                Write-Output "LdapOverSSL Template missing"
                                                $TempPresent = $Null
                                            }
                                            If (-not $TempPresent) {
                                                $Counter ++
                                                Write-Output "LdapOverSSL Template missing adding it."
                                                Try {
                                                    Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                                        Set-ADObject "CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn" -Partition "CN=Configuration,$Using:BaseDn" -Add @{ 'certificateTemplates' = 'LdapOverSSL' } 
                                                    }
                                                } Catch [System.Exception] {
                                                    Write-Output "Failed to add publish LdapOverSSL template $_"
                                                }
                                                If ($Counter -gt '1') {
                                                    Start-Sleep -Seconds 10
                                                }
                                            }
                                        } Until ($TempPresent -or $Counter -eq 12)

                                        Write-Output 'Sleeping to ensure replication of certificate template publish has completed'
                                        Start-Sleep -Seconds 60

                                        Write-Output 'Disabling CredSSP'
                                        Set-CredSSP -Action 'Disable'
                                    }

                                    Function Add-CertTemplateAcl {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Path,
                                            [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                                            [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,
                                            [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,
                                            [Parameter(Mandatory = $false)][Guid]$ObjectGuid,        
                                            [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,
                                            [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid
                                        )

                                        Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                            Import-Module -Name 'ActiveDirectory' -Force

                                            [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'

                                            $ArgumentList = $IdentityReference, $Using:ActiveDirectoryRights, $Using:AccessControlType, $Using:ObjectGuid, $Using:ActiveDirectorySecurityInheritance, $Using:InheritedObjectGuid
                                            $ArgumentList = $ArgumentList.Where( { $_ -ne $Null })

                                            Write-Output 'Creating ACL object'
                                            Try {
                                                $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to create ACL object $_"
                                                Exit 1
                                            }

                                            Write-Output "Getting ACL for $Using:Path"
                                            Try {
                                                $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for $Using:Path $_"
                                                Exit 1
                                            }

                                            $ObjectAcl.AddAccessRule($Rule) 

                                            Write-Output "Setting ACL for $Using:Path"
                                            Try {
                                                Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to set ACL for $Using:Path $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Set-CertTemplateAclInheritance {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Path
                                        )

                                        Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                            Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop

                                            Write-Output "Getting ACL for $Using:Path"
                                            Try {
                                                $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for $Using:Path $_"
                                                Exit 1
                                            }

                                            $ObjectAcl.SetAccessRuleProtection($true, $false)

                                            Write-Output "Setting ACL for $Using:Path"
                                            Try {
                                                Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to set ACL for $Using:Path $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Remove-CertTemplateAcl {
                                        [CmdletBinding()]
                                        param(
                                            [Parameter(Mandatory = $true)][PSCredential]$Credential,
                                            [Parameter(Mandatory = $true)][string]$Path,
                                            [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,
                                            [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType
                                        )

                                        Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {
                                            Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop

                                            Write-Output "Getting ACL for $Using:Path"
                                            Try {
                                                $ObjectAcl = Get-Acl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to get ACL for $Using:Path $_"
                                                Exit 1
                                            }

                                            [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'

                                            $ObjectAcl.RemoveAccess($IdentityReference, $Using:AccessControlType)

                                            Write-Output "Removing ACL for $Using:Path"
                                            Try {
                                                Set-Acl -AclObject $ObjectAcl -Path "AD:\$Using:Path" -ErrorAction Stop
                                            } Catch [System.Exception] {
                                                Write-Output "Failed to remove ACL for $Using:Path $_"
                                                Exit 1
                                            }
                                        }
                                    }

                                    Function Invoke-Cleanup {
                                        [CmdletBinding()]
                                        Param (
                                            [Parameter(Mandatory = $true)][String]$VPCCIDR
                                        )

                                        Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'
                                        Try {
                                            Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR
                                        } Catch [System.Exception] {
                                            Write-Output "Failed allow WinRM Traffic from VPC CIDR $_"
                                        }

                                        Write-Output 'Removing DSC Configuration'
                                        Try {
                                            Remove-DscConfigurationDocument -Stage 'Current' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed build DSC Configuration $_"
                                        }

                                        Write-Output 'Re-enabling Windows Firewall'
                                        Try {
                                            Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled 'True' -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed re-enable firewall $_"
                                        }

                                        Write-Output 'Removing build files'
                                        Try {
                                            Remove-Item -Path 'C:\Temp' -Recurse -Force -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed remove build files $_"
                                        }

                                        Write-Output 'Removing self signed cert'
                                        Try {
                                            $SelfSignedThumb = Get-ChildItem -Path 'cert:\LocalMachine\My\' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'
                                            Remove-Item -Path "cert:\LocalMachine\My\$SelfSignedThumb" -DeleteKey -ErrorAction Stop
                                        } Catch [System.Exception] {
                                            Write-Output "Failed remove self signed cert $_"
                                        }
                                    }

                                    $UserPassword = ConvertTo-SecureString '{{AdminPassword}}' -AsPlainText -Force
                                    $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ('{{DomainDNSName}}\Admin', $UserPassword)
                                    Invoke-EnterpriseCaConfig -Credentials $Credentials -EntCaCommonName '{{ServerNetBIOSName}}' -EntCaHashAlgorithm 'SHA256' -EntCaKeyLength '2048' -EntCaValidityPeriodUnits '5' -VPCCIDR '{{VPCCIDR}}'
                                    Invoke-Cleanup -VPCCIDR '{{VPCCIDR}}'
                          CloudWatchOutputConfig:
                              CloudWatchOutputEnabled: true
                              CloudWatchLogGroupName: !Sub /aws/Demo/${AWS::StackName}
                    - name: cfnSignalEnd
                      action: aws:branch
                      inputs:
                          Choices:
                              - NextStep: signalSuccess
                                Not:
                                    Variable: "{{StackName}}"
                                    StringEquals: ""
                              - NextStep: sleepEnd
                                Variable: "{{StackName}}"
                                StringEquals: ""
                    - name: signalSuccess
                      action: aws:executeAwsApi
                      isEnd: True
                      inputs:
                          Service: cloudformation
                          Api: SignalResource
                          LogicalResourceId: OnpremPkiInstance
                          StackName: "{{StackName}}"
                          Status: SUCCESS
                          UniqueId: "{{pkiInstanceId.InstanceId}}"
                    - name: sleepEnd
                      action: aws:sleep
                      isEnd: True
                      inputs:
                          Duration: PT1S
                    - name: signalFailure
                      action: aws:executeAwsApi
                      inputs:
                          Service: cloudformation
                          Api: SignalResource
                          LogicalResourceId: OnpremPkiInstance
                          StackName: "{{StackName}}"
                          Status: FAILURE
                          UniqueId: "{{pkiInstanceId.InstanceId}}"
            DocumentType: Automation
            Tags:
                - Key: StackName
                  Value: !Ref AWS::StackName
    OnpremPkiInstance:
        Type: AWS::EC2::Instance
        CreationPolicy:
            ResourceSignal:
                Timeout: PT30M
                Count: 1
        DependsOn: OnPremDomainController
        Properties:
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 60
                      VolumeType: gp3
                      Encrypted: true
                      KmsKeyId: alias/aws/ebs
                      DeleteOnTermination: true
                - DeviceName: /dev/xvdf
                  Ebs:
                      VolumeSize: 10
                      VolumeType: gp3
                      Encrypted: true
                      KmsKeyId: alias/aws/ebs
                      DeleteOnTermination: true
            IamInstanceProfile: !Ref InstanceProfile
            ImageId: !Ref AMI
            InstanceType: t3.large
            SecurityGroupIds:
                - !Ref DomainMemberSG
            SubnetId: !Ref VPCPublicSubnet1Subnet
            Tags:
                - Key: Name
                  Value: ONPREM-PKI01
                - Key: Domain
                  Value: !Ref MADDomainName
                - Key: Role
                  Value: Enterpise CA
            UserData:
                Fn::Base64: !Sub
                    - |
                        <powershell>
                        $Params = @{
                            AdminPassword = '${AdminPassword}'
                            DomainDNSName = '${DomainDNSName}'
                            DomainNetBIOSName = '${DomainNetBIOSName}'
                            ExistingDcIP01 = '${ExistingDcIP01}'
                            ServerNetBIOSName = 'ONPREM-PKI01'
                            StackName = '${AWS::StackName}'
                            URLSuffix = '${AWS::URLSuffix}'
                            VPCCIDR = '${VPCCIDR}'
                        }
                        Start-SSMAutomationExecution -DocumentName '${OnpremPkiInstanceSSMAuto}' -Parameter $Params
                        </powershell>
                    - AdminPassword: !Ref AdminPassword
                      DomainDNSName: !Ref OnpremDomainName
                      DomainNetBIOSName: !Ref OnpremNetBIOSName
                      ExistingDcIP01: !GetAtt OnPremDomainController.PrivateIp
                      VPCCIDR: !GetAtt VPC.CidrBlock
    RdsDBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: Demo-DBSubnetGroup
            SubnetIds:
                - !Ref VPCPublicSubnet1Subnet
                - !Ref VPCPublicSubnet2Subnet
    RdsDB:
        Type: AWS::RDS::DBInstance
        DependsOn: ManagedAD
        Properties:
            AllocatedStorage: 20
            AvailabilityZone: !Select
                - 0
                - Fn::GetAZs: !Ref AWS::Region
            DBInstanceClass: db.t3.xlarge
            DBInstanceIdentifier: DemoRDS
            DBSubnetGroupName: !Ref RdsDBSubnetGroup
            Domain: !Ref ManagedAD
            DomainIAMRoleName: !Ref RDSRole
            Engine: sqlserver-se
            EngineVersion: 15.00.4073.23.v1
            LicenseModel: license-included
            MasterUsername: admin
            MasterUserPassword: !Ref RDSPassword
            StorageType: gp2
            VPCSecurityGroups:
                - !Ref DomainMemberSG
    FSxMAD:
        Type: AWS::FSx::FileSystem
        DependsOn: ManagedAD
        Properties: 
            FileSystemType: WINDOWS
            SecurityGroupIds: 
                - !Ref DomainMemberSG
            StorageCapacity: 32
            StorageType: SSD
            SubnetIds: 
                - !Ref VPCPublicSubnet1Subnet
            WindowsConfiguration: 
                ActiveDirectoryId: !Ref ManagedAD
                Aliases: 
                    - !Join [ '.', [ DemoFSx, !Ref MADDomainName] ]
                AutomaticBackupRetentionDays: 0
                DeploymentType: SINGLE_AZ_2
                ThroughputCapacity: 16
Outputs:
    MADManagementInstanceID:
        Description: MAD Management Instance ID
        Value: !Ref MgmtInstance
    MADManagementInstancePrivateIP:
        Description: MAD Management Instance Private IP
        Value: !GetAtt MgmtInstance.PrivateIp
    MADDirectoryID:
        Description: Directory Services ID
        Value: !Ref ManagedAD
    MADPrivateIP1:
        Description: MAD DNS IP 1
        Value: !Select ["0", !GetAtt "ManagedAD.DnsIpAddresses"]
    MADPrivateIP2:
        Description: MAD DNS IP 2
        Value: !Select ["1", !GetAtt "ManagedAD.DnsIpAddresses"]
    OnpremDomainControllerInstanceID:
        Description: Onprem Domain Controller Instance ID
        Value: !Ref OnPremDomainController
    OnpremDomainControllerInstancePrivateIP:
        Description: Onprem Domain Controller Instance Private IP
        Value: !GetAtt OnPremDomainController.PrivateIp
    OnpremPKIInstanceID:
        Description: Onprem PKI Instance ID
        Value: !Ref OnpremPkiInstance
    OnpremPKIInstancePrivateIP:
        Description: Onprem PKI Instance Private IP
        Value: !GetAtt OnpremPkiInstance.PrivateIp
    OnPremDomainControllerSGID:
        Description: Onprem Domain Controllers Security Group ID
        Value: !Ref OnPremDomainControllerSG
    DomainMemberSGID:
        Description: Domain Members Security Group ID
        Value: !Ref DomainMemberSG
    FSxFileSystemId:
        Description: FileSystem ID of FSx
        Value: !Ref FSx
    FSxFileSystemDNSName:
        Description: FSx DNS Name
        Value: !GetAtt FSx.DNSName
    RDSInstanceName:
        Description: Instance Name of RDS Instance
        Value: !Ref RdsDB
    RDSInstanceEnpoint:
        Description: Domain Members Security Group ID
        Value: !GetAtt RdsDB.Endpoint.Address
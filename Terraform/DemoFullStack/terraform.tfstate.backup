{
  "version": 4,
  "terraform_version": "1.2.4",
  "serial": 3917,
  "lineage": "c5dcb7f9-5137-1aa6-4fcb-fa7e45b179dd",
  "outputs": {
    "child_onprem_ad_instance_id": {
      "value": "",
      "type": "string"
    },
    "child_onprem_ad_ip": {
      "value": "",
      "type": "string"
    },
    "managed_ad_fsx_dns_name": {
      "value": "",
      "type": "string"
    },
    "managed_ad_id": {
      "value": "d-9a67198522",
      "type": "string"
    },
    "managed_ad_ips": {
      "value": [
        "10.0.0.103",
        "10.0.0.49"
      ],
      "type": [
        "set",
        "string"
      ]
    },
    "managed_ad_mgmt_instance_id": {
      "value": "i-01aa052aff1fe6a4b",
      "type": "string"
    },
    "managed_ad_mgmt_ip": {
      "value": "10.0.0.10",
      "type": "string"
    },
    "managed_ad_password_secret_id": {
      "value": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
      "type": "string"
    },
    "managed_ad_sg_id": {
      "value": "sg-00c3e5a0614b8d89d",
      "type": "string"
    },
    "onprem_ad_instance_id": {
      "value": "i-0929c3f7ba37f60b8",
      "type": "string"
    },
    "onprem_ad_ip": {
      "value": "10.0.0.54",
      "type": "string"
    },
    "onprem_ad_password_secret_id": {
      "value": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav",
      "type": "string"
    },
    "onprem_fsx_dns_name": {
      "value": "",
      "type": "string"
    },
    "onprem_fsx_svc_password_secret_id": {
      "value": "",
      "type": "string"
    },
    "onprem_pki_instance_id": {
      "value": "",
      "type": "string"
    },
    "onprem_pki_ip": {
      "value": "",
      "type": "string"
    },
    "rds_admin_password_secret_id": {
      "value": "arn:aws:secretsmanager:us-east-2:156285977455:secret:RDS-Admin-Secret-7ebugdhf-J33Mav",
      "type": "string"
    },
    "rds_endpoint": {
      "value": "demo-rds-mad.cstnyie7hyzn.us-east-2.rds.amazonaws.com:1433",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "windows_2022",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-east-2::image/ami-07be268ff83bedbfa",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0398402f72a46f561",
                  "throughput": "0",
                  "volume_size": "30",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "xvdca",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "xvdcb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              },
              {
                "device_name": "xvdcc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral2"
              },
              {
                "device_name": "xvdcd",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral3"
              },
              {
                "device_name": "xvdce",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral4"
              },
              {
                "device_name": "xvdcf",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral5"
              },
              {
                "device_name": "xvdcg",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral6"
              },
              {
                "device_name": "xvdch",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral7"
              },
              {
                "device_name": "xvdci",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral8"
              },
              {
                "device_name": "xvdcj",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral9"
              },
              {
                "device_name": "xvdck",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral10"
              },
              {
                "device_name": "xvdcl",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral11"
              },
              {
                "device_name": "xvdcm",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral12"
              },
              {
                "device_name": "xvdcn",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral13"
              },
              {
                "device_name": "xvdco",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral14"
              },
              {
                "device_name": "xvdcp",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral15"
              },
              {
                "device_name": "xvdcq",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral16"
              },
              {
                "device_name": "xvdcr",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral17"
              },
              {
                "device_name": "xvdcs",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral18"
              },
              {
                "device_name": "xvdct",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral19"
              },
              {
                "device_name": "xvdcu",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral20"
              },
              {
                "device_name": "xvdcv",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral21"
              },
              {
                "device_name": "xvdcw",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral22"
              },
              {
                "device_name": "xvdcx",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral23"
              },
              {
                "device_name": "xvdcy",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral24"
              },
              {
                "device_name": "xvdcz",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral25"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-07-13T09:28:35.000Z",
            "deprecation_time": "2024-07-13T09:28:35.000Z",
            "description": "Microsoft Windows Server 2022 Full Locale English AMI provided by Amazon",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "name",
                "values": [
                  "Windows_Server-2022-English-Full-Base*"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-07be268ff83bedbfa",
            "image_id": "ami-07be268ff83bedbfa",
            "image_location": "amazon/Windows_Server-2022-English-Full-Base-2022.07.13",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "kernel_id": "",
            "most_recent": true,
            "name": "Windows_Server-2022-English-Full-Base-2022.07.13",
            "name_regex": null,
            "owner_id": "801119661308",
            "owners": [
              "amazon"
            ],
            "platform": "windows",
            "platform_details": "Windows",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0398402f72a46f561",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "tpm_support": "",
            "usage_operation": "RunInstances:0002",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "available",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "all_availability_zones": null,
            "exclude_names": null,
            "exclude_zone_ids": null,
            "filter": [
              {
                "name": "opt-in-status",
                "values": [
                  "opt-in-not-required"
                ]
              }
            ],
            "group_names": [
              "us-east-2"
            ],
            "id": "us-east-2",
            "names": [
              "us-east-2a",
              "us-east-2b",
              "us-east-2c"
            ],
            "state": "available",
            "zone_ids": [
              "use2-az1",
              "use2-az2",
              "use2-az3"
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "156285977455",
            "arn": "arn:aws:iam::156285977455:user/girvenj",
            "id": "156285977455",
            "user_id": "AIDASIY26YNXYXAMQ3AR7"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1713828321",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:GetSecretValue\",\n        \"secretsmanager:DescribeSecret\"\n      ],\n      \"Resource\": [\n        \"arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav\",\n        \"arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv\"\n      ]\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ssm:ListCommands\",\n        \"ssm:ListCommandInvocations\",\n        \"ssm:GetAutomationExecution\",\n        \"ssm:DescribeInstanceInformation\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeInstances\",\n        \"ds:VerifyTrust\",\n        \"ds:DescribeTrusts\",\n        \"ds:CreateTrust\",\n        \"ds:CreateConditionalForwarder\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:StartAutomationExecution\",\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-Pki-7ebugdhf:$DEFAULT\",\n        \"arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-Baseline-7ebugdhf:$DEFAULT\",\n        \"arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-AuditPol-7ebugdhf:$DEFAULT\"\n      ]\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:SendCommand\",\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-2:*:document/AWS-RunRemoteScript\",\n        \"arn:aws:ssm:us-east-2:*:document/AWS-RunPowerShellScript\"\n      ]\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:SendCommand\",\n      \"Resource\": \"arn:aws:ec2:us-east-2:156285977455:instance/*\",\n      \"Condition\": {\n        \"ForAnyValue:StringEquals\": {\n          \"ssm:ResourceTag/aws:cloudformation:stack-name\": [\n            \"instance-root-dc-7ebugdhf\",\n            \"instance-child_dc-7ebugdhf\",\n            \"instance-root-pki-7ebugdhf\",\n            \"instance-mad-mgmt-7ebugdhf\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"cloudformation:SignalResource\",\n      \"Resource\": [\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-pki-7ebugdhf/*\",\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-dc-7ebugdhf/*\",\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-mad-mgmt-7ebugdhf/*\",\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-child-dc-7ebugdhf/*\"\n      ]\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "secretsmanager:DescribeSecret",
                  "secretsmanager:GetSecretValue"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
                  "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "ds:CreateConditionalForwarder",
                  "ds:CreateTrust",
                  "ds:DescribeTrusts",
                  "ds:VerifyTrust",
                  "ec2:DescribeInstances",
                  "ec2:DescribeSecurityGroups",
                  "ssm:DescribeInstanceInformation",
                  "ssm:GetAutomationExecution",
                  "ssm:ListCommandInvocations",
                  "ssm:ListCommands"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "ssm:StartAutomationExecution"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-AuditPol-7ebugdhf:$DEFAULT",
                  "arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-Baseline-7ebugdhf:$DEFAULT",
                  "arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-Pki-7ebugdhf:$DEFAULT"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "ssm:SendCommand"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ssm:us-east-2:*:document/AWS-RunPowerShellScript",
                  "arn:aws:ssm:us-east-2:*:document/AWS-RunRemoteScript"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "ssm:SendCommand"
                ],
                "condition": [
                  {
                    "test": "ForAnyValue:StringEquals",
                    "values": [
                      "instance-root-dc-7ebugdhf",
                      "instance-child_dc-7ebugdhf",
                      "instance-root-pki-7ebugdhf",
                      "instance-mad-mgmt-7ebugdhf"
                    ],
                    "variable": "ssm:ResourceTag/aws:cloudformation:stack-name"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ec2:us-east-2:156285977455:instance/*"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "cloudformation:SignalResource"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:cloudformation:us-east-2:156285977455:stack/instance-child-dc-7ebugdhf/*",
                  "arn:aws:cloudformation:us-east-2:156285977455:stack/instance-mad-mgmt-7ebugdhf/*",
                  "arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-dc-7ebugdhf/*",
                  "arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-pki-7ebugdhf/*"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "ec2_instance_assume_role_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1903849331",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "rds_instance_assume_role_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1077238154",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"rds.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "rds.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_kms_alias",
      "name": "fsx",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-2:156285977455:alias/aws/fsx",
            "id": "arn:aws:kms:us-east-2:156285977455:alias/aws/fsx",
            "name": "alias/aws/fsx",
            "target_key_arn": "arn:aws:kms:us-east-2:156285977455:key/7aef1b44-3c48-4047-a0ac-335a7b338195",
            "target_key_id": "7aef1b44-3c48-4047-a0ac-335a7b338195"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_kms_alias",
      "name": "rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-2:156285977455:alias/aws/rds",
            "id": "arn:aws:kms:us-east-2:156285977455:alias/aws/rds",
            "name": "alias/aws/rds",
            "target_key_arn": "arn:aws:kms:us-east-2:156285977455:key/5941f9ce-21e0-43cb-b150-d6f5985ed2a4",
            "target_key_id": "5941f9ce-21e0-43cb-b150-d6f5985ed2a4"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_kms_alias",
      "name": "secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:us-east-2:156285977455:alias/aws/secretsmanager",
            "id": "arn:aws:kms:us-east-2:156285977455:alias/aws/secretsmanager",
            "name": "alias/aws/secretsmanager",
            "target_key_arn": "arn:aws:kms:us-east-2:156285977455:key/2642b1f1-b842-43ae-bff7-9a5dad7cf289",
            "target_key_id": "2642b1f1-b842-43ae-bff7-9a5dad7cf289"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_partition",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "dns_suffix": "amazonaws.com",
            "id": "aws",
            "partition": "aws",
            "reverse_dns_prefix": "com.amazonaws"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_region",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "US East (Ohio)",
            "endpoint": "ec2.us-east-2.amazonaws.com",
            "id": "us-east-2",
            "name": "us-east-2"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "instance_mad_mgmt",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-2:156285977455:stack/instance-mad-mgmt-7ebugdhf/a8655820-0a0d-11ed-96fe-02b2861294e0",
            "name": "instance-mad-mgmt-7ebugdhf",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "MADMgmtInstanceID": "i-01aa052aff1fe6a4b",
              "MADMgmtInstancePrivateIP": "10.0.0.10"
            },
            "parameters": {
              "AMI": "ami-07be268ff83bedbfa",
              "DeployMadPki": "false",
              "InstanceProfile": "EC2-Instance-IAM-Role-7ebugdhf",
              "MadAdminSecret": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
              "MadDirectoryId": "d-9a67198522",
              "MadDomainName": "corp.example.com",
              "MadNetBiosName": "CORP",
              "OnpremDomainName": "onpremises.local",
              "SecurityGroupIds": "sg-03e23ba22e0118525",
              "SsmAutoDocument": "SSM-Baseline-7ebugdhf",
              "SubnetId": "subnet-097c86194d63f66eb",
              "TrustDirection": "Two-Way",
              "VPCCIDR": "10.0.0.0/24"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": null,
            "tags_all": {},
            "template_body": "    AWSTemplateFormatVersion: '2010-09-09'\r\n    Parameters:\r\n      AMI:\r\n        #Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base\r\n        Description: System Manager parameter value for latest Windows Server AMI\r\n        Type: String\r\n      DeployMadPki:\r\n        AllowedValues:\r\n          - 'true'\r\n          - 'false'\r\n        Description: Deploy Enterpise Ca with AWS Managed Microsoft AD\r\n        Type: String  \r\n      InstanceProfile:\r\n        Description: Instance profile and role to allow instances to use SSM Automation\r\n        Type: String  \r\n      MadAdminSecret:\r\n        Description: Secret containing the random password of the AWS Managed Microsoft AD Admin account\r\n        Type: String  \r\n      MadDirectoryId:\r\n        Description: Directory ID of the AWS Managed Microsoft AD\r\n        Type: String  \r\n      MadDomainName:\r\n        AllowedPattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}$\r\n        Description: Fully qualified domain name (FQDN) of the AWS Managed Microsoft AD domain e.g. corp.example.com\r\n        MaxLength: '255'\r\n        MinLength: '2'\r\n        Type: String\r\n      MadNetBiosName:\r\n        AllowedPattern: ^[^\\\\/:*?\"\u003c\u003e|.]+[^\\\\/:*?\"\u003c\u003e|]*$\r\n        Description: NetBIOS name of the AWS Managed Microsoft AD domain (up to 15 characters) e.g. CORP\r\n        MaxLength: '15'\r\n        MinLength: '1'\r\n        Type: String\r\n      OnpremDomainName:\r\n        AllowedPattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}$\r\n        Description: Fully qualified domain name (FQDN) of the On-Premises domain e.g. onpremises.local\r\n        MaxLength: '255'\r\n        MinLength: '2'\r\n        Type: String\r\n      SecurityGroupIds:\r\n        Description: Security Group Id\r\n        Type: AWS::EC2::SecurityGroup::Id\r\n      SubnetId:\r\n        Description: Subnet Id\r\n        Type: AWS::EC2::Subnet::Id\r\n      SsmAutoDocument:\r\n        Description: SSM Automation Document used to configure the instances\r\n        Type: String\r\n      TrustDirection:\r\n        AllowedValues:\r\n          - Two-Way\r\n          - 'One-Way: Incoming'\r\n          - 'One-Way: Outgoing'\r\n        Description: Trust Direction from AWS Managed Microsoft AD to on-premises domain\r\n        Type: String\r\n      VPCCIDR:\r\n        Description: VPC CIDR where instance will be deployed to\r\n        Type: String\r\n    Resources:\r\n      MADMgmtInstance:\r\n        Type: AWS::EC2::Instance\r\n        CreationPolicy:\r\n          ResourceSignal:\r\n            Timeout: PT60M\r\n            Count: 1\r\n        Properties:\r\n          BlockDeviceMappings:\r\n              - DeviceName: /dev/sda1\r\n                Ebs:\r\n                  VolumeSize: 60\r\n                  VolumeType: gp3\r\n                  Encrypted: true\r\n                  KmsKeyId: alias/aws/ebs\r\n                  DeleteOnTermination: true\r\n              - DeviceName: /dev/xvdf\r\n                Ebs:\r\n                  VolumeSize: 10\r\n                  VolumeType: gp3\r\n                  Encrypted: true\r\n                  KmsKeyId: alias/aws/ebs\r\n                  DeleteOnTermination: true\r\n          IamInstanceProfile: !Ref InstanceProfile\r\n          ImageId: !Ref AMI\r\n          InstanceType: m6i.large\r\n          KeyName: Baseline\r\n          SecurityGroupIds:\r\n            - !Ref SecurityGroupIds\r\n          SubnetId: !Ref SubnetId\r\n          Tags:\r\n            - Key: Name\r\n              Value: MAD-MGMT01\r\n            - Key: Domain\r\n              Value: !Ref MadDomainName\r\n            - Key: Role\r\n              Value: Enterpise CA\r\n          UserData:\r\n            Fn::Base64: !Sub\r\n              - |\r\n                  \u003cpowershell\u003e\r\n                  If ('${DeployMadPki}' -eq 'true'){\r\n                    $DeployPki = 'Yes'\r\n                    $DeploymentType = 'EnterpriseCAManagementInstance'\r\n                    $ServerRole = 'CertificateAuthority'\r\n                  } Else{\r\n                    $DeployPki = 'No'\r\n                    $DeploymentType = 'ManagementInstance'\r\n                    $ServerRole = 'Default'\r\n                  }\r\n                  $Params = @{\r\n                      DeployPki = $DeployPki\r\n                      DeploymentType = $DeploymentType\r\n                      DomainDNSName = '${DomainDNSName}'\r\n                      DomainNetBIOSName = '${DomainNetBIOSName}'\r\n                      DomainType = 'AWSManagedAD'\r\n                      LogicalResourceId = 'MADMgmtInstance'\r\n                      MadDirectoryID = '${MadDirectoryID}'\r\n                      OnpremDomainDNSName = '${OnpremDomainDNSName}'\r\n                      AdministratorSecretName = '${AdministratorSecretName}'\r\n                      ServerNetBIOSName = 'MAD-MGMT01'\r\n                      ServerRole = $ServerRole\r\n                      StackName = 'instance-mad-mgmt-7ebugdhf'\r\n                      TrustDirection = '${TrustDirection}'\r\n                      VPCCIDR = '${VPCCIDR}'\r\n                  }\r\n                  Start-SSMAutomationExecution -DocumentName '${SsmAutoDocument}' -Parameter $Params\r\n                  \u003c/powershell\u003e\r\n              - AdministratorSecretName: !Ref MadAdminSecret \r\n                DeployMadPki: !Ref DeployMadPki\r\n                DomainDNSName: !Ref MadDomainName\r\n                DomainNetBIOSName: !Ref MadNetBiosName\r\n                MadDirectoryID: !Ref MadDirectoryId\r\n                OnpremDomainDNSName: !Ref OnpremDomainName\r\n                TrustDirection: !Ref TrustDirection\r\n                VPCCIDR: !Ref VPCCIDR\r\n    Outputs:\r\n      MADMgmtInstanceID:\r\n        Description: MAD Mgmt Instance ID\r\n        Value: !Ref MADMgmtInstance\r\n      MADMgmtInstancePrivateIP:\r\n        Description: MAD Mgmt Instance Private IP\r\n        Value: !GetAtt MADMgmtInstance.PrivateIp\r\n",
            "template_url": null,
            "timeout_in_minutes": 0,
            "timeouts": {
              "create": "120m",
              "delete": null,
              "update": null
            }
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo3MjAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudformation_stack.instance_root_dc",
            "aws_directory_service_directory.mad",
            "aws_iam_instance_profile.ec2",
            "aws_iam_role.ec2",
            "aws_route53_resolver_endpoint.r53_outbound_resolver",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_mad",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_onprem",
            "aws_route53_resolver_rule_association.r53_outbound_resolver_rule_mad_association",
            "aws_route53_resolver_rule_association.r53_outbound_resolver_rule_onprem_association",
            "aws_secretsmanager_secret.secret_mad",
            "aws_secretsmanager_secret.secret_onprem",
            "aws_security_group.onprem_ad_sg",
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_ssm_document.ssm_auditpol",
            "aws_ssm_document.ssm_baseline",
            "aws_ssm_document.ssm_pki",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_ami.windows_2022",
            "data.aws_availability_zones.available",
            "data.aws_caller_identity.main",
            "data.aws_iam_policy_document.ec2",
            "data.aws_iam_policy_document.ec2_instance_assume_role_policy",
            "data.aws_kms_alias.secret",
            "data.aws_partition.main",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "instance_root_dc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "capabilities": null,
            "disable_rollback": false,
            "iam_role_arn": "",
            "id": "arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-dc-7ebugdhf/2537fb90-0a0a-11ed-a439-0a907e1b9e1a",
            "name": "instance-root-dc-7ebugdhf",
            "notification_arns": null,
            "on_failure": null,
            "outputs": {
              "OnpremDomainControllerInstanceID": "i-0929c3f7ba37f60b8",
              "OnpremDomainControllerInstancePrivateIP": "10.0.0.54"
            },
            "parameters": {
              "AMI": "ami-07be268ff83bedbfa",
              "FsxOnpremParentOu": "DC=onpremises,DC=local",
              "InstanceProfile": "EC2-Instance-IAM-Role-7ebugdhf",
              "IntegrateFsxOnprem": "false",
              "MadAdminSecret": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
              "MadDomainName": "corp.example.com",
              "OnPremAdministratorSecret": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav",
              "OnpremDomainName": "onpremises.local",
              "OnpremNetBiosName": "ONPREMISES",
              "SecurityGroupIds": "sg-03e23ba22e0118525",
              "SsmAutoDocument": "SSM-Baseline-7ebugdhf",
              "SubnetId": "subnet-097c86194d63f66eb",
              "TrustDirection": "Two-Way",
              "VPCCIDR": "10.0.0.0/24"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": null,
            "tags_all": {},
            "template_body": "    AWSTemplateFormatVersion: '2010-09-09'\r\n    Parameters:\r\n      AMI:\r\n        #Default: /aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base\r\n        Description: System Manager parameter value for latest Windows Server AMI\r\n        Type: String\r\n      IntegrateFsxOnprem:\r\n        AllowedValues:\r\n          - 'true'\r\n          - 'false'\r\n        Description: Deploy \u0026 Integrate Amazon FSX for Windows with On-Premises AD\r\n        Type: String\r\n      FsxOnpremParentOu:\r\n        Default: DC=onpremises,DC=local\r\n        Description: Parent DN for Amazon FSX for Windows OU (Only used when deployment with On-Premises AD)\r\n        Type: String\r\n      InstanceProfile:\r\n        Description: Instance profile and role to allow instances to use SSM Automation\r\n        Type: String  \r\n      MadAdminSecret:\r\n        Description: Secret containing the random password of the AWS Managed Microsoft AD Admin account\r\n        Type: String  \r\n      MadDomainName:\r\n        AllowedPattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}$\r\n        Description: Fully qualified domain name (FQDN) of the AWS Managed Microsoft AD domain e.g. corp.example.com\r\n        MaxLength: '255'\r\n        MinLength: '2'\r\n        Type: String\r\n      OnPremAdministratorSecret:\r\n        Description: Secret containing the random password of the onpremises Microsoft AD Administrator account\r\n        Type: String  \r\n      OnpremDomainName:\r\n        AllowedPattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}$\r\n        Description: Fully qualified domain name (FQDN) of the On-Premises domain e.g. onpremises.local\r\n        MaxLength: '255'\r\n        MinLength: '2'\r\n        Type: String\r\n      OnpremNetBiosName:\r\n        AllowedPattern: ^[^\\\\/:*?\"\u003c\u003e|.]+[^\\\\/:*?\"\u003c\u003e|]*$\r\n        Description: NetBIOS name of the On-Premises domain (up to 15 characters) e.g. ONPREMISES\r\n        MaxLength: '15'\r\n        MinLength: '1'\r\n        Type: String\r\n      SecurityGroupIds:\r\n        Description: Security Group Id\r\n        Type: AWS::EC2::SecurityGroup::Id\r\n      SubnetId:\r\n        Description: Subnet Id\r\n        Type: AWS::EC2::Subnet::Id\r\n      SsmAutoDocument:\r\n        Description: SSM Automation Document used to configure the instances\r\n        Type: String\r\n      TrustDirection:\r\n        AllowedValues:\r\n          - Two-Way\r\n          - 'One-Way: Incoming'\r\n          - 'One-Way: Outgoing'\r\n        Description: Trust Direction from AWS Managed Microsoft AD to on-premises domain\r\n        Type: String\r\n      VPCCIDR:\r\n        Description: VPC CIDR where instance will be deployed to\r\n        Type: String\r\n    Resources:\r\n      OnPremDomainController:\r\n        Type: AWS::EC2::Instance\r\n        CreationPolicy:\r\n          ResourceSignal:\r\n            Count: 1\r\n            Timeout: PT60M\r\n        Properties:\r\n          BlockDeviceMappings:\r\n            - DeviceName: /dev/sda1\r\n              Ebs:\r\n                DeleteOnTermination: true\r\n                Encrypted: true\r\n                KmsKeyId: alias/aws/ebs\r\n                VolumeSize: 60\r\n                VolumeType: gp3\r\n            - DeviceName: /dev/xvdf\r\n              Ebs:\r\n                DeleteOnTermination: true\r\n                Encrypted: true\r\n                KmsKeyId: alias/aws/ebs\r\n                VolumeSize: 10\r\n                VolumeType: gp3\r\n          IamInstanceProfile: !Ref InstanceProfile\r\n          ImageId: !Ref AMI\r\n          InstanceType: m6i.large\r\n          KeyName: Baseline\r\n          SecurityGroupIds:\r\n            - Ref: SecurityGroupIds\r\n          SubnetId: !Ref SubnetId\r\n          Tags:\r\n              - Key: Domain\r\n                Value: !Ref OnpremDomainName\r\n              - Key: Name\r\n                Value: ONPREM-DC01\r\n              - Key: Role\r\n                Value: Domain Controller\r\n          UserData:\r\n            Fn::Base64: !Sub\r\n              - |\r\n                  \u003cpowershell\u003e\r\n                  $Params = @{\r\n                      TrustSecretName = '${TrustSecretName}'\r\n                      DeployPki = 'No'\r\n                      DeploymentType = 'RootDomainController'\r\n                      DomainDNSName = '${DomainDNSName}'\r\n                      DomainNetBIOSName = '${OnpremNetBiosName}'\r\n                      FsxOnpremParentOu = '${FsxOnpremParentOu}'\r\n                      IntegrateFsxOnprem = '${IntegrateFsxOnprem}'\r\n                      LogicalResourceId = 'OnPremDomainController'\r\n                      MadDNSName = '${MadDNSName}'\r\n                      AdministratorSecretName = '${AdministratorSecretName}'\r\n                      ServerNetBIOSName = 'ONPREM-DC01'\r\n                      ServerRole = 'DomainController'\r\n                      StackName = 'instance-root-dc-7ebugdhf'\r\n                      TrustDirection = '${TrustDirection}'\r\n                      VPCCIDR = '${VPCCIDR}'\r\n                  }\r\n                  Start-SSMAutomationExecution -DocumentName '${SsmAutoDocument}' -Parameter $Params\r\n                  \u003c/powershell\u003e\r\n              - TrustSecretName: !Ref MadAdminSecret\r\n                DomainDNSName: !Ref OnpremDomainName\r\n                FsxOnpremParentOu: !Ref FsxOnpremParentOu\r\n                IntegrateFsxOnprem: !Ref IntegrateFsxOnprem\r\n                MadDNSName: !Ref MadDomainName\r\n                AdministratorSecretName: !Ref OnPremAdministratorSecret\r\n                TrustDirection: !Ref TrustDirection\r\n                VPCCIDR: !Ref VPCCIDR\r\n    Outputs:\r\n      OnpremDomainControllerInstanceID:\r\n        Description: Onprem Domain Controller Instance ID\r\n        Value: !Ref OnPremDomainController\r\n      OnpremDomainControllerInstancePrivateIP:\r\n        Description: Onprem Domain Controller Instance Private IP\r\n        Value: !GetAtt OnPremDomainController.PrivateIp\r\n",
            "template_url": null,
            "timeout_in_minutes": 0,
            "timeouts": {
              "create": "120m",
              "delete": null,
              "update": null
            }
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo3MjAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_directory_service_directory.mad",
            "aws_iam_instance_profile.ec2",
            "aws_iam_role.ec2",
            "aws_route53_resolver_endpoint.r53_outbound_resolver",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_mad",
            "aws_route53_resolver_rule_association.r53_outbound_resolver_rule_mad_association",
            "aws_secretsmanager_secret.secret_mad",
            "aws_secretsmanager_secret.secret_onprem",
            "aws_security_group.onprem_ad_sg",
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_ssm_document.ssm_auditpol",
            "aws_ssm_document.ssm_baseline",
            "aws_ssm_document.ssm_pki",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_ami.windows_2022",
            "data.aws_availability_zones.available",
            "data.aws_caller_identity.main",
            "data.aws_iam_policy_document.ec2",
            "data.aws_iam_policy_document.ec2_instance_assume_role_policy",
            "data.aws_kms_alias.secret",
            "data.aws_partition.main",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "address": "demo-rds-mad.cstnyie7hyzn.us-east-2.rds.amazonaws.com",
            "allocated_storage": 20,
            "allow_major_version_upgrade": null,
            "apply_immediately": null,
            "arn": "arn:aws:rds:us-east-2:156285977455:db:demo-rds-mad",
            "auto_minor_version_upgrade": true,
            "availability_zone": "us-east-2a",
            "backup_retention_period": 0,
            "backup_window": "08:25-08:55",
            "ca_cert_identifier": "rds-ca-2019",
            "character_set_name": "SQL_Latin1_General_CP1_CI_AS",
            "copy_tags_to_snapshot": false,
            "customer_owned_ip_enabled": false,
            "db_name": "",
            "db_subnet_group_name": "rds-subnet-group-7ebugdhf",
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "d-9a67198522",
            "domain_iam_role_name": "RDS-Domain-IAM-Role-7ebugdhf",
            "enabled_cloudwatch_logs_exports": null,
            "endpoint": "demo-rds-mad.cstnyie7hyzn.us-east-2.rds.amazonaws.com:1433",
            "engine": "sqlserver-se",
            "engine_version": "15.00.4198.2.v1",
            "engine_version_actual": "15.00.4198.2.v1",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "Z2XHWR1WZ565X2",
            "iam_database_authentication_enabled": false,
            "id": "demo-rds-mad",
            "identifier": "demo-rds-mad",
            "identifier_prefix": "",
            "instance_class": "db.t3.xlarge",
            "iops": 0,
            "kms_key_id": "arn:aws:kms:us-east-2:156285977455:key/5941f9ce-21e0-43cb-b150-d6f5985ed2a4",
            "latest_restorable_time": "0001-01-01T00:00:00Z",
            "license_model": "license-included",
            "maintenance_window": "fri:09:29-fri:09:59",
            "max_allocated_storage": 0,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "name": "",
            "nchar_character_set_name": "",
            "option_group_name": "default:sqlserver-se-15-00",
            "parameter_group_name": "default.sqlserver-se-15.0",
            "password": "Vf{%D)M7XXw5T#M{y3Rbfz7QQgE}Z81O",
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 1433,
            "publicly_accessible": false,
            "replica_mode": "",
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-WPPTOFTBY2CD3ZQZDKULZ3KRYE",
            "restore_to_point_in_time": [],
            "s3_import": [],
            "security_group_names": null,
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": true,
            "storage_type": "gp2",
            "tags": {
              "Name": "DemoRDSMad-7ebugdhf"
            },
            "tags_all": {
              "Name": "DemoRDSMad-7ebugdhf"
            },
            "timeouts": null,
            "timezone": "",
            "username": "admin",
            "vpc_security_group_ids": [
              "sg-0aeca5b1fece9670d"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6NDgwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_db_subnet_group.rds",
            "aws_directory_service_directory.mad",
            "aws_iam_role.rds",
            "aws_security_group.rds",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "data.aws_iam_policy_document.rds_instance_assume_role_policy",
            "data.aws_kms_alias.rds",
            "data.aws_partition.main",
            "random_password.secret_mad",
            "random_password.secret_rds",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_db_subnet_group",
      "name": "rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:rds:us-east-2:156285977455:subgrp:rds-subnet-group-7ebugdhf",
            "description": "Managed by Terraform",
            "id": "rds-subnet-group-7ebugdhf",
            "name": "rds-subnet-group-7ebugdhf",
            "name_prefix": null,
            "subnet_ids": [
              "subnet-028aafaca8c829d7c",
              "subnet-097c86194d63f66eb"
            ],
            "tags": {
              "Name": "RDS-Subnet-Group"
            },
            "tags_all": {
              "Name": "RDS-Subnet-Group"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_default_route_table",
      "name": "network",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:route-table/rtb-035e7a19a2625ea0a",
            "default_route_table_id": "rtb-035e7a19a2625ea0a",
            "id": "rtb-035e7a19a2625ea0a",
            "owner_id": "156285977455",
            "propagating_vgws": null,
            "route": [
              {
                "cidr_block": "0.0.0.0/0",
                "core_network_arn": "",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-07592fa3ebe119265",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Name": "Demo-VPC-Default-RT-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Default-RT-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_internet_gateway.network",
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_directory_service_directory",
      "name": "mad",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_url": "d-9a67198522.awsapps.com",
            "alias": "d-9a67198522",
            "connect_settings": [],
            "description": "",
            "dns_ip_addresses": [
              "10.0.0.103",
              "10.0.0.49"
            ],
            "edition": "Enterprise",
            "enable_sso": false,
            "id": "d-9a67198522",
            "name": "corp.example.com",
            "password": "MXwX%k!))(x164m?thfW8m}Z(AAu\u003c$?\u003c",
            "security_group_id": "sg-00c3e5a0614b8d89d",
            "short_name": "CORP",
            "size": "Large",
            "tags": {
              "Name": "corp.example.com-MAD-7ebugdhf"
            },
            "tags_all": {
              "Name": "corp.example.com-MAD-7ebugdhf"
            },
            "type": "MicrosoftAD",
            "vpc_settings": [
              {
                "availability_zones": [
                  "us-east-2a",
                  "us-east-2b"
                ],
                "subnet_ids": [
                  "subnet-028aafaca8c829d7c",
                  "subnet-097c86194d63f66eb"
                ],
                "vpc_id": "vpc-0592fd80e91a2065b"
              }
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::156285977455:instance-profile/EC2-Instance-IAM-Role-7ebugdhf",
            "create_date": "2022-07-22T21:34:33Z",
            "id": "EC2-Instance-IAM-Role-7ebugdhf",
            "name": "EC2-Instance-IAM-Role-7ebugdhf",
            "name_prefix": null,
            "path": "/",
            "role": "EC2-Instance-IAM-Role-7ebugdhf",
            "tags": null,
            "tags_all": {},
            "unique_id": "AIPASIY26YNXR64KFMPTE"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.ec2",
            "aws_secretsmanager_secret.secret_mad",
            "aws_secretsmanager_secret.secret_onprem",
            "aws_ssm_document.ssm_auditpol",
            "aws_ssm_document.ssm_baseline",
            "aws_ssm_document.ssm_pki",
            "data.aws_caller_identity.main",
            "data.aws_iam_policy_document.ec2",
            "data.aws_iam_policy_document.ec2_instance_assume_role_policy",
            "data.aws_kms_alias.secret",
            "data.aws_partition.main",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::156285977455:role/EC2-Instance-IAM-Role-7ebugdhf",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2022-07-22T21:34:32Z",
            "description": "",
            "force_detach_policies": false,
            "id": "EC2-Instance-IAM-Role-7ebugdhf",
            "inline_policy": [
              {
                "name": "policy-8675309",
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:GetSecretValue\",\n        \"secretsmanager:DescribeSecret\"\n      ],\n      \"Resource\": [\n        \"arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav\",\n        \"arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv\"\n      ]\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ssm:ListCommands\",\n        \"ssm:ListCommandInvocations\",\n        \"ssm:GetAutomationExecution\",\n        \"ssm:DescribeInstanceInformation\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeInstances\",\n        \"ds:VerifyTrust\",\n        \"ds:DescribeTrusts\",\n        \"ds:CreateTrust\",\n        \"ds:CreateConditionalForwarder\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:StartAutomationExecution\",\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-Pki-7ebugdhf:$DEFAULT\",\n        \"arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-Baseline-7ebugdhf:$DEFAULT\",\n        \"arn:aws:ssm:us-east-2:156285977455:automation-definition/SSM-AuditPol-7ebugdhf:$DEFAULT\"\n      ]\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:SendCommand\",\n      \"Resource\": [\n        \"arn:aws:ssm:us-east-2:*:document/AWS-RunRemoteScript\",\n        \"arn:aws:ssm:us-east-2:*:document/AWS-RunPowerShellScript\"\n      ]\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:SendCommand\",\n      \"Resource\": \"arn:aws:ec2:us-east-2:156285977455:instance/*\",\n      \"Condition\": {\n        \"ForAnyValue:StringEquals\": {\n          \"ssm:ResourceTag/aws:cloudformation:stack-name\": [\n            \"instance-root-dc-7ebugdhf\",\n            \"instance-child_dc-7ebugdhf\",\n            \"instance-root-pki-7ebugdhf\",\n            \"instance-mad-mgmt-7ebugdhf\"\n          ]\n        }\n      }\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"cloudformation:SignalResource\",\n      \"Resource\": [\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-pki-7ebugdhf/*\",\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-root-dc-7ebugdhf/*\",\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-mad-mgmt-7ebugdhf/*\",\n        \"arn:aws:cloudformation:us-east-2:156285977455:stack/instance-child-dc-7ebugdhf/*\"\n      ]\n    }\n  ]\n}"
              }
            ],
            "managed_policy_arns": [
              "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
              "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
            ],
            "max_session_duration": 3600,
            "name": "EC2-Instance-IAM-Role-7ebugdhf",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": {
              "Name": "EC2-Instance-IAM-Role-7ebugdhf"
            },
            "tags_all": {
              "Name": "EC2-Instance-IAM-Role-7ebugdhf"
            },
            "unique_id": "AROASIY26YNXR7PNHEEBU"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_secretsmanager_secret.secret_mad",
            "aws_secretsmanager_secret.secret_onprem",
            "aws_ssm_document.ssm_auditpol",
            "aws_ssm_document.ssm_baseline",
            "aws_ssm_document.ssm_pki",
            "data.aws_caller_identity.main",
            "data.aws_iam_policy_document.ec2",
            "data.aws_iam_policy_document.ec2_instance_assume_role_policy",
            "data.aws_kms_alias.secret",
            "data.aws_partition.main",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::156285977455:role/RDS-Domain-IAM-Role-7ebugdhf",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"rds.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2022-07-22T21:34:31Z",
            "description": "",
            "force_detach_policies": false,
            "id": "RDS-Domain-IAM-Role-7ebugdhf",
            "inline_policy": [
              {
                "name": "",
                "policy": ""
              }
            ],
            "managed_policy_arns": [
              "arn:aws:iam::aws:policy/service-role/AmazonRDSDirectoryServiceAccess"
            ],
            "max_session_duration": 3600,
            "name": "RDS-Domain-IAM-Role-7ebugdhf",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": {
              "Name": "RDS-Domain-IAM-Role-7ebugdhf"
            },
            "tags_all": {
              "Name": "RDS-Domain-IAM-Role-7ebugdhf"
            },
            "unique_id": "AROASIY26YNXSKPMCTN5Q"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.aws_iam_policy_document.rds_instance_assume_role_policy",
            "data.aws_partition.main",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "network",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:internet-gateway/igw-07592fa3ebe119265",
            "id": "igw-07592fa3ebe119265",
            "owner_id": "156285977455",
            "tags": {
              "Name": "Demo-VPC-IGW-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-IGW-7ebugdhf"
            },
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_resolver_endpoint",
      "name": "r53_outbound_resolver",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:route53resolver:us-east-2:156285977455:resolver-endpoint/rslvr-out-798f7446ef164096b",
            "direction": "OUTBOUND",
            "host_vpc_id": "vpc-0592fd80e91a2065b",
            "id": "rslvr-out-798f7446ef164096b",
            "ip_address": [
              {
                "ip": "10.0.0.12",
                "ip_id": "rni-6c7797125d9c4e1d9",
                "subnet_id": "subnet-097c86194d63f66eb"
              },
              {
                "ip": "10.0.0.121",
                "ip_id": "rni-618ce0ab073546b08",
                "subnet_id": "subnet-028aafaca8c829d7c"
              }
            ],
            "name": "Demo-VPC-Outbound-Resolver-7ebugdhf",
            "security_group_ids": [
              "sg-0e887e8d497e1aafc"
            ],
            "tags": {
              "Name": "Demo-VPC-Outbound-Resolver-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Outbound-Resolver-7ebugdhf"
            },
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_resolver_rule",
      "name": "r53_outbound_resolver_rule_mad",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:route53resolver:us-east-2:156285977455:resolver-rule/rslvr-rr-c41addd05dd140c6a",
            "domain_name": "corp.example.com",
            "id": "rslvr-rr-c41addd05dd140c6a",
            "name": "CORP-7ebugdhf",
            "owner_id": "156285977455",
            "resolver_endpoint_id": "rslvr-out-798f7446ef164096b",
            "rule_type": "FORWARD",
            "share_status": "NOT_SHARED",
            "tags": {
              "Name": "Demo-VPC-Outbound-Resolver-Rule-MAD-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Outbound-Resolver-Rule-MAD-7ebugdhf"
            },
            "target_ip": [
              {
                "ip": "10.0.0.103",
                "port": 53
              },
              {
                "ip": "10.0.0.49",
                "port": 53
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_directory_service_directory.mad",
            "aws_route53_resolver_endpoint.r53_outbound_resolver",
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_resolver_rule",
      "name": "r53_outbound_resolver_rule_onprem",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:route53resolver:us-east-2:156285977455:resolver-rule/rslvr-rr-46deb465dedf4a5ca",
            "domain_name": "onpremises.local",
            "id": "rslvr-rr-46deb465dedf4a5ca",
            "name": "ONPREMISES-7ebugdhf",
            "owner_id": "156285977455",
            "resolver_endpoint_id": "rslvr-out-798f7446ef164096b",
            "rule_type": "FORWARD",
            "share_status": "NOT_SHARED",
            "tags": {
              "Name": "Demo-VPC-Outbound-Resolver-Rule-Onprem-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Outbound-Resolver-Rule-Onprem-7ebugdhf"
            },
            "target_ip": [
              {
                "ip": "10.0.0.54",
                "port": 53
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_cloudformation_stack.instance_root_dc",
            "aws_directory_service_directory.mad",
            "aws_iam_instance_profile.ec2",
            "aws_iam_role.ec2",
            "aws_route53_resolver_endpoint.r53_outbound_resolver",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_mad",
            "aws_route53_resolver_rule_association.r53_outbound_resolver_rule_mad_association",
            "aws_secretsmanager_secret.secret_mad",
            "aws_secretsmanager_secret.secret_onprem",
            "aws_security_group.onprem_ad_sg",
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_ssm_document.ssm_auditpol",
            "aws_ssm_document.ssm_baseline",
            "aws_ssm_document.ssm_pki",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_ami.windows_2022",
            "data.aws_availability_zones.available",
            "data.aws_caller_identity.main",
            "data.aws_iam_policy_document.ec2",
            "data.aws_iam_policy_document.ec2_instance_assume_role_policy",
            "data.aws_kms_alias.secret",
            "data.aws_partition.main",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_resolver_rule_association",
      "name": "r53_outbound_resolver_rule_mad_association",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "rslvr-rrassoc-2a93ad78f08941bcb",
            "name": "Demo-VPC-Outbound-Resolver-Rule-Assoc-MAD-7ebugdhf",
            "resolver_rule_id": "rslvr-rr-c41addd05dd140c6a",
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_directory_service_directory.mad",
            "aws_route53_resolver_endpoint.r53_outbound_resolver",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_mad",
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_resolver_rule_association",
      "name": "r53_outbound_resolver_rule_onprem_association",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "rslvr-rrassoc-68c464c449c4433eb",
            "name": "Demo-VPC-Outbound-Resolver-Rule-Assoc-Onprem-7ebugdhf",
            "resolver_rule_id": "rslvr-rr-46deb465dedf4a5ca",
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_cloudformation_stack.instance_root_dc",
            "aws_directory_service_directory.mad",
            "aws_iam_instance_profile.ec2",
            "aws_iam_role.ec2",
            "aws_route53_resolver_endpoint.r53_outbound_resolver",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_mad",
            "aws_route53_resolver_rule.r53_outbound_resolver_rule_onprem",
            "aws_route53_resolver_rule_association.r53_outbound_resolver_rule_mad_association",
            "aws_secretsmanager_secret.secret_mad",
            "aws_secretsmanager_secret.secret_onprem",
            "aws_security_group.onprem_ad_sg",
            "aws_security_group.r53_outbound_resolver_sg",
            "aws_ssm_document.ssm_auditpol",
            "aws_ssm_document.ssm_baseline",
            "aws_ssm_document.ssm_pki",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_ami.windows_2022",
            "data.aws_availability_zones.available",
            "data.aws_caller_identity.main",
            "data.aws_iam_policy_document.ec2",
            "data.aws_iam_policy_document.ec2_instance_assume_role_policy",
            "data.aws_kms_alias.secret",
            "data.aws_partition.main",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "secret_mad",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
            "description": "",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
            "kms_key_id": "arn:aws:kms:us-east-2:156285977455:alias/aws/secretsmanager",
            "name": "corp.example.com-MAD-Secret-7ebugdhf",
            "name_prefix": "",
            "policy": "",
            "recovery_window_in_days": 30,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {
              "Name": "corp.example.com-MAD-Secret-7ebugdhf"
            },
            "tags_all": {
              "Name": "corp.example.com-MAD-Secret-7ebugdhf"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.aws_kms_alias.secret",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "secret_onprem",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav",
            "description": "",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav",
            "kms_key_id": "arn:aws:kms:us-east-2:156285977455:alias/aws/secretsmanager",
            "name": "onpremises.local-Onprem-Secret-7ebugdhf",
            "name_prefix": "",
            "policy": "",
            "recovery_window_in_days": 30,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {
              "Name": "onpremises.local-Onprem-Secret-7ebugdhf"
            },
            "tags_all": {
              "Name": "onpremises.local-Onprem-Secret-7ebugdhf"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.aws_kms_alias.secret",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "secret_rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-2:156285977455:secret:RDS-Admin-Secret-7ebugdhf-J33Mav",
            "description": "",
            "force_overwrite_replica_secret": false,
            "id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:RDS-Admin-Secret-7ebugdhf-J33Mav",
            "kms_key_id": "arn:aws:kms:us-east-2:156285977455:alias/aws/secretsmanager",
            "name": "RDS-Admin-Secret-7ebugdhf",
            "name_prefix": "",
            "policy": "",
            "recovery_window_in_days": 30,
            "replica": [],
            "rotation_enabled": false,
            "rotation_lambda_arn": "",
            "rotation_rules": [],
            "tags": {
              "Name": "RDS-Admin-Secret-7ebugdhf"
            },
            "tags_all": {
              "Name": "RDS-Admin-Secret-7ebugdhf"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.aws_kms_alias.secret",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "secret_mad",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
            "id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv|2A180D93-933B-463F-A77F-854296C6452E",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:corp.example.com-MAD-Secret-7ebugdhf-i3TtOv",
            "secret_string": "{\"password\":\"MXwX%k!))(x164m?thfW8m}Z(AAu\\u003c$?\\u003c\",\"username\":\"admin\"}",
            "version_id": "2A180D93-933B-463F-A77F-854296C6452E",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_secretsmanager_secret.secret_mad",
            "data.aws_kms_alias.secret",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "secret_onprem",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav",
            "id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav|42DCDBCC-EBE8-4BCF-BD41-40B27CC2A171",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:onpremises.local-Onprem-Secret-7ebugdhf-J33Mav",
            "secret_string": "{\"password\":\"(fvskUDlFMvJw:SbpRfvlaL*7UkL3FxA\",\"username\":\"Administrator\"}",
            "version_id": "42DCDBCC-EBE8-4BCF-BD41-40B27CC2A171",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_secretsmanager_secret.secret_onprem",
            "data.aws_kms_alias.secret",
            "random_password.secret_onprem",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret_version",
      "name": "secret_rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:secretsmanager:us-east-2:156285977455:secret:RDS-Admin-Secret-7ebugdhf-J33Mav",
            "id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:RDS-Admin-Secret-7ebugdhf-J33Mav|ACA7F8CF-03B9-4451-A3A9-C5F96FB7FD45",
            "secret_binary": "",
            "secret_id": "arn:aws:secretsmanager:us-east-2:156285977455:secret:RDS-Admin-Secret-7ebugdhf-J33Mav",
            "secret_string": "{\"password\":\"Vf{%D)M7XXw5T#M{y3Rbfz7QQgE}Z81O\",\"username\":\"admin\"}",
            "version_id": "ACA7F8CF-03B9-4451-A3A9-C5F96FB7FD45",
            "version_stages": [
              "AWSCURRENT"
            ]
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "secret_string"
              }
            ]
          ],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_secretsmanager_secret.secret_rds",
            "data.aws_kms_alias.secret",
            "random_password.secret_rds",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "fsx",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:security-group/sg-02726fd5dab0f76e3",
            "description": "FSx Security Group",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "All outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-02726fd5dab0f76e3",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "SMB",
                "from_port": 445,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 445
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "WinRM",
                "from_port": 5985,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5986
              }
            ],
            "name": "FSx-Security-Group-7ebugdhf",
            "name_prefix": "",
            "owner_id": "156285977455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "FSx-Security-Group-7ebugdhf"
            },
            "tags_all": {
              "Name": "FSx-Security-Group-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "ms_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:security-group/sg-0f34eb516079abce5",
            "description": "Member Server Security Group",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "All outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0f34eb516079abce5",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "RDP",
                "from_port": 3389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 3389
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "WinRM",
                "from_port": 5985,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5986
              }
            ],
            "name": "Member-Server-Security-Group-7ebugdhf",
            "name_prefix": "",
            "owner_id": "156285977455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "Member-Server-Security-Group-7ebugdhf"
            },
            "tags_all": {
              "Name": "Member-Server-Security-Group-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "onprem_ad_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:security-group/sg-03e23ba22e0118525",
            "description": "Domain Controller Security Group",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "All outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-03e23ba22e0118525",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": " SOAP ADWS",
                "from_port": 9389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 9389
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "DNS",
                "from_port": 53,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 53
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "DNS",
                "from_port": 53,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 53
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Kerberos Set \u0026 Change Password",
                "from_port": 464,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 464
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Kerberos Set \u0026 Change Password",
                "from_port": 464,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 464
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Kerberos",
                "from_port": 88,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 88
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Kerberos",
                "from_port": 88,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 88
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "LDAP Global Catalog \u0026 GC with SSL",
                "from_port": 3268,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 3269
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "LDAP over SSL",
                "from_port": 636,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 636
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "LDAP",
                "from_port": 389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 389
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "LDAP",
                "from_port": 389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 389
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Netlogon",
                "from_port": 138,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 138
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "RDP",
                "from_port": 3389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 3389
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "RPC",
                "from_port": 135,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 135
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Random RPC",
                "from_port": 49152,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 65535
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Random RPC",
                "from_port": 49152,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 65535
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "SMB",
                "from_port": 445,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 445
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "SMB",
                "from_port": 445,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 445
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "WinRM",
                "from_port": 5985,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5986
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Windows Time",
                "from_port": 123,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 123
              }
            ],
            "name": "Domain-Controller-Security-Group-7ebugdhf",
            "name_prefix": "",
            "owner_id": "156285977455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "Domain-Controller-Security-Group-7ebugdhf"
            },
            "tags_all": {
              "Name": "Domain-Controller-Security-Group-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "pki_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:security-group/sg-09a9b5ef57b7c54c2",
            "description": "PKI Security Group",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "All outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-09a9b5ef57b7c54c2",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "RDP",
                "from_port": 3389,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 3389
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "RPC",
                "from_port": 135,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 135
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "Random RPC",
                "from_port": 49152,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 65535
              },
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "WinRM",
                "from_port": 5985,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 5986
              }
            ],
            "name": "PKI-Security-Group-7ebugdhf",
            "name_prefix": "",
            "owner_id": "156285977455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "PKI-Security-Group-7ebugdhf"
            },
            "tags_all": {
              "Name": "PKI-Security-Group-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "r53_outbound_resolver_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:security-group/sg-0e887e8d497e1aafc",
            "description": "Demo-VPC-Outbound-Resolver-SG-7ebugdhf",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "DNS",
                "from_port": 53,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 53
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "DNS",
                "from_port": 53,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 53
              }
            ],
            "id": "sg-0e887e8d497e1aafc",
            "ingress": [],
            "name": "Demo-VPC-Outbound-Resolver-SG-7ebugdhf",
            "name_prefix": "",
            "owner_id": "156285977455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "Demo-VPC-Outbound-Resolver-SG-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Outbound-Resolver-SG-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:security-group/sg-0aeca5b1fece9670d",
            "description": "RDS Security Group",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "All outbound",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0aeca5b1fece9670d",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.0.0.0/24"
                ],
                "description": "SQL Inbound from VPC",
                "from_port": 1433,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 1433
              }
            ],
            "name": "RDS-Security-Group-7ebugdhf",
            "name_prefix": "",
            "owner_id": "156285977455",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "RDS-Security-Group-7ebugdhf"
            },
            "tags_all": {
              "Name": "RDS-Security-Group-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.network",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "mad",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 0,
            "id": "sgrule-3593845486",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "-1",
            "security_group_id": "sg-00c3e5a0614b8d89d",
            "self": false,
            "source_security_group_id": null,
            "to_port": 0,
            "type": "egress"
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "aws_directory_service_directory.mad",
            "aws_subnet.network_subnet1",
            "aws_subnet.network_subnet2",
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_password.secret_mad",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ssm_auditpol",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:us-east-2:156285977455:document/SSM-AuditPol-7ebugdhf",
            "attachments_source": [],
            "content": "    {\r\n      \"schemaVersion\": \"0.3\",\r\n      \"description\": \"Configure Kinesis Agent for Windows, Windows Auditing Policy, and deployment cleanup using SSM Automation\",\r\n      \"parameters\": {\r\n        \"ServerNetBIOSName\": {\r\n          \"description\": \"NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"ServerRole\": {\r\n          \"description\": \"Role server will be (DomainController or CertificateAuthority)\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"VPCCIDR\": {\r\n          \"description\": \"CIDR Block for the VPC\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"StackName\": {\r\n          \"description\": \"Stack Name Input for cfn resource signal\",\r\n          \"type\": \"String\"\r\n        }\r\n      },\r\n      \"mainSteps\": [\r\n        {\r\n          \"outputs\": [\r\n            {\r\n              \"Type\": \"String\",\r\n              \"Name\": \"InstanceId\",\r\n              \"Selector\": \"$.Reservations[0].Instances[0].InstanceId\"\r\n            }\r\n          ],\r\n          \"inputs\": {\r\n            \"Filters\": [\r\n              {\r\n                \"Values\": [\r\n                  \"{{ServerNetBIOSName}}\"\r\n                ],\r\n                \"Name\": \"tag:Name\"\r\n              },\r\n              {\r\n                \"Values\": [\r\n                  \"{{StackName}}\"\r\n                ],\r\n                \"Name\": \"tag:aws:cloudformation:stack-name\"\r\n              },\r\n              {\r\n                \"Values\": [\r\n                  \"running\"\r\n                ],\r\n                \"Name\": \"instance-state-name\"\r\n              }\r\n            ],\r\n            \"Service\": \"ec2\",\r\n            \"Api\": \"DescribeInstances\"\r\n          },\r\n          \"name\": \"InstanceId\",\r\n          \"action\": \"aws:executeAwsApi\",\r\n          \"nextStep\": \"configureInstance\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Parameters\": {\r\n              \"commands\": \"Function Invoke-Cleanup {\\n    [CmdletBinding()]\\n    Param (\\n        [Parameter(Mandatory = $true)][String]$VPCCIDR\\n    )\\n\\n    Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'\\n    Try {\\n        Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed allow WinRM Traffic from VPC CIDR $_\\\"\\n    }\\n\\n    Write-Output 'Removing DSC Configuration'\\n    Try {\\n        Remove-DscConfigurationDocument -Stage 'Current' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed build DSC Configuration $_\\\"\\n    }\\n\\n    Write-Output 'Re-enabling Windows Firewall'\\n    Try {\\n        Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled 'True' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed re-enable firewall $_\\\"\\n    }\\n\\n    Write-Output 'Removing build files'\\n    Try {\\n        Remove-Item -Path 'C:\\\\Temp' -Recurse -Force -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed remove build files $_\\\"\\n    }\\n\\n    Write-Output 'Removing self signed cert'\\n    Try {\\n        $SelfSignedThumb = Get-ChildItem -Path 'cert:\\\\LocalMachine\\\\My\\\\' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'\\n        Remove-Item -Path \\\"cert:\\\\LocalMachine\\\\My\\\\$SelfSignedThumb\\\" -DeleteKey -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed remove self signed cert $_\\\"\\n    }\\n}\\n\\nFunction Set-DscConfiguration {\\n    [CmdletBinding()]\\n    Param (\\n        [Parameter(Mandatory = $true)][String]$ServerRole\\n    )\\n    Configuration ConfigInstance {\\n        Import-DscResource -ModuleName 'AuditPolicyDsc', 'SChannelDsc'\\n        Node LocalHost {\\n            AuditPolicySubcategory CredentialValidationSuccess {\\n                Name      = 'Credential Validation'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory CredentialValidationFailure {\\n                Name      = 'Credential Validation'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherAccountLogonEventsSuccess {\\n                Name      = 'Other Account Logon Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory OtherAccountLogonEventsFailure {\\n                Name      = 'Other Account Logon Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ApplicationGroupManagementSuccess {\\n                Name      = 'Application Group Management'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ApplicationGroupManagementFailure {\\n                Name      = 'Application Group Management'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ComputerAccountManagementFailure {\\n                Name      = 'Computer Account Management'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory DistributionGroupManagementFailure {\\n                Name      = 'Distribution Group Management'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory OtherAccountManagementEventsSuccess {\\n                Name      = 'Other Account Management Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherAccountManagementEventsFailure {\\n                Name      = 'Other Account Management Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory SecurityGroupManagementSuccess {\\n                Name      = 'Security Group Management'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SecurityGroupManagementFailure {\\n                Name      = 'Security Group Management'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory UserAccountManagementSuccess {\\n                Name      = 'User Account Management'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory UserAccountManagementFailure {\\n                Name      = 'User Account Management'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory DPAPIActivitySuccess {\\n                Name      = 'DPAPI Activity'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory DPAPIActivityFailure {\\n                Name      = 'DPAPI Activity'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory PNPActivitySuccess {\\n                Name      = 'Plug and Play Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory PNPActivityFailure {\\n                Name      = 'Plug and Play Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ProcessCreationSuccess {\\n                Name      = 'Process Creation'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory ProcessCreationFailure {\\n                Name      = 'Process Creation'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ProcessTerminationSuccess {\\n                Name      = 'Process Termination'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory ProcessTerminationFailure {\\n                Name      = 'Process Termination'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory RPCEventsSuccess {\\n                Name      = 'RPC Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory RPCEventsFailure {\\n                Name      = 'RPC Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory TokenRightAdjustedSuccess {\\n                Name      = 'Token Right Adjusted Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory TokenRightAdjustedFailure {\\n                Name      = 'Token Right Adjusted Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory DirectoryServiceAccessSuccess {\\n                Name      = 'Directory Service Access'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory DirectoryServiceChangesFailure {\\n                Name      = 'Directory Service Changes'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory AccountLockoutSuccess {\\n                Name      = 'Account Lockout'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory AccountLockoutFailure {\\n                Name      = 'Account Lockout'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory UserDeviceClaimsSuccess {\\n                Name      = 'User / Device Claims'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory UserDeviceClaimsFailure {\\n                Name      = 'User / Device Claims'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory GroupMembershipSuccess {\\n                Name      = 'Group Membership'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory GroupMembershipFailure {\\n                Name      = 'Group Membership'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory IPsecExtendedModeSuccess {\\n                Name      = 'IPsec Extended Mode'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecExtendedModeFailure {\\n                Name      = 'IPsec Extended Mode'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecMainModeSuccess {\\n                Name      = 'IPsec Main Mode'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecMainModeFailure {\\n                Name      = 'IPsec Main Mode'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecQuickModeSuccess {\\n                Name      = 'IPsec Quick Mode'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecQuickModeFailure {\\n                Name      = 'IPsec Quick Mode'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory LogoffSuccess {\\n                Name      = 'Logoff'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory Logoffailure {\\n                Name      = 'Logoff'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory LogonSuccess {\\n                Name      = 'Logon'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory LogonFailure {\\n                Name      = 'Logon'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory NetworkPolicyServerSuccess {\\n                Name      = 'Network Policy Server'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory NetworkPolicyServerFailure {\\n                Name      = 'Network Policy Server'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherLogonLogoffEventsSuccess {\\n                Name      = 'Other Logon/Logoff Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherLogonLogoffEventsFailure {\\n                Name      = 'Other Logon/Logoff Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SpecialLogonSuccess {\\n                Name      = 'Special Logon'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SpecialLogonFailure {\\n                Name      = 'Special Logon'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ApplicationGeneratedSuccess {\\n                Name      = 'Application Generated'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory ApplicationGeneratedFailure {\\n                Name      = 'Application Generated'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory DetailedFileShareFailure {\\n                Name      = 'Detailed File Share'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FileShareSuccess {\\n                Name      = 'File Share'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FileShareFailure {\\n                Name      = 'File Share'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FileSystemSuccess {\\n                Name      = 'File System'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FileSystemFailure {\\n                Name      = 'File System'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FilteringPlatformConnectionSuccess {\\n                Name      = 'Filtering Platform Connection'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FilteringPlatformConnectionFailure {\\n                Name      = 'Filtering Platform Connection'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory FilteringPlatformPacketDropSuccess {\\n                Name      = 'Filtering Platform Packet Drop'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory FilteringPlatformPacketDropFailure {\\n                Name      = 'Filtering Platform Packet Drop'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory HandleManipulationSuccess {\\n                Name      = 'Handle Manipulation'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory HandleManipulationFailure {\\n                Name      = 'Handle Manipulation'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory KernelObjectSuccess {\\n                Name      = 'Kernel Object'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory KernelObjectFailure {\\n                Name      = 'Kernel Object'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory OtherObjectAccessEventsSuccess {\\n                Name      = 'Other Object Access Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherObjectAccessEventsFailure {\\n                Name      = 'Other Object Access Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory RegistrySuccess {\\n                Name      = 'Registry'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory RegistryFailure {\\n                Name      = 'Registry'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory RemovableStorageSuccess {\\n                Name      = 'Removable Storage'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory RemovableStorageFailure {\\n                Name      = 'Removable Storage'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory CentralAccessPolicyStagingSuccess {\\n                Name      = 'Central Policy Staging'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory CentralAccessPolicyStagingFailure {\\n                Name      = 'Central Policy Staging'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory AuditPolicyChangeSuccess {\\n                Name      = 'Audit Policy Change'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory AuditPolicyChangeFailure {\\n                Name      = 'Audit Policy Change'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory AuthenticationPolicyChangeSuccess {\\n                Name      = 'Authentication Policy Change'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory AuthenticationPolicyChangeFailure {\\n                Name      = 'Authentication Policy Change'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory AuthorizationPolicyChangeSuccess {\\n                Name      = 'Authorization Policy Change'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory AuthorizationPolicyChangeFailure {\\n                Name      = 'Authorization Policy Change'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory MPSSVCRule-LevelPolicyChangeSuccess {\\n                Name      = 'MPSSVC Rule-Level Policy Change'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory MPSSVCRule-LevelPolicyChangeFailure {\\n                Name      = 'MPSSVC Rule-Level Policy Change'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherPolicyChangeEventsSuccess {\\n                Name      = 'Other Policy Change Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory OtherPolicyChangeEventsFailure {\\n                Name      = 'Other Policy Change Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory NonSensitivePrivilegeUseSuccess {\\n                Name      = 'Non Sensitive Privilege Use'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory NonSensitivePrivilegeUseFailure {\\n                Name      = 'Non Sensitive Privilege Use'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory OtherPrivilegeUseEventsSuccess {\\n                Name      = 'Other Privilege Use Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory OtherPrivilegeUseEventsFailure {\\n                Name      = 'Other Privilege Use Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory SensitivePrivilegeUseSuccess {\\n                Name      = 'Sensitive Privilege Use'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SensitivePrivilegeUseFailure {\\n                Name      = 'Sensitive Privilege Use'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecDriverSuccess {\\n                Name      = 'IPsec Driver'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory IPsecDriverFailure {\\n                Name      = 'IPsec Driver'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherSystemEventsSuccess {\\n                Name      = 'Other System Events'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory OtherSystemEventsFailure {\\n                Name      = 'Other System Events'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SecurityStateChangeSuccess {\\n                Name      = 'Security State Change'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SecurityStateChangeFailure {\\n                Name      = 'Security State Change'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory SecuritySystemExtensionSuccess {\\n                Name      = 'Security System Extension'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SecuritySystemExtensionFailure {\\n                Name      = 'Security System Extension'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Absent'\\n            }\\n            AuditPolicySubcategory SystemIntegritySuccess {\\n                Name      = 'System Integrity'\\n                AuditFlag = 'Success'\\n                Ensure    = 'Present'\\n            }\\n            AuditPolicySubcategory SystemIntegrityFailure {\\n                Name      = 'System Integrity'\\n                AuditFlag = 'Failure'\\n                Ensure    = 'Present'\\n            }\\n            Protocol DisableSSLv3 {\\n                Protocol           = 'SSL 3.0'\\n                IncludeClientSide  = $true\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Protocol DisableTLS1 {\\n                Protocol           = 'TLS 1.0' \\n                IncludeClientSide  = $true\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Protocol DisableTLS11 {\\n                Protocol           = 'TLS 1.1'\\n                IncludeClientSide  = $true\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Protocol EnableTLS12 {\\n                Protocol           = 'TLS 1.2'\\n                IncludeClientSide  = $true\\n                State              = 'Enabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Protocol EnableTLS13 {\\n                Protocol           = 'TLS 1.3'\\n                IncludeClientSide  = $true\\n                State              = 'Enabled'\\n                #RebootWhenRequired = $true\\n            }    \\n            Cipher DisableRC4-40 {\\n                Cipher             = 'RC4 40/128'\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Cipher DisableRC4-56 {\\n                Cipher             = 'RC4 56/128'\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Cipher DisableRC4-64 {\\n                Cipher             = 'RC4 64/128'\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Cipher DisableRC4-128 {\\n                Cipher             = 'RC4 128/128'\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Cipher Disable3Des {\\n                Cipher             = 'Triple DES 168'\\n                State              = 'Disabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Cipher EnableAES128 {\\n                Cipher             = 'AES 128/128'\\n                State              = 'Enabled'\\n                #RebootWhenRequired = $true\\n            }\\n            Cipher EnableAES256 {\\n                Cipher             = 'AES 256/256'\\n                State              = 'Enabled'\\n                #RebootWhenRequired = $true\\n            }\\n            CipherSuites 3DESCipher {\\n                IsSingleInstance   = 'Yes'\\n                CipherSuitesOrder  = 'TLS_RSA_WITH_3DES_EDE_CBC_SHA'\\n                Ensure             = 'Absent'\\n                #RebootWhenRequired = $true\\n            }\\n            SChannelSettings 'ConfigureSChannel' {\\n                IsSingleInstance              = 'Yes'\\n                TLS12State                    = 'Enabled'\\n                WinHttpDefaultSecureProtocols = @('TLS1.2')\\n                #RebootWhenRequired            = $true\\n            }\\n            If ($ServerRole -eq 'DomainController') {\\n                AuditPolicySubcategory KerberosAuthenticationServiceSuccess {\\n                    Name = 'Kerberos Authentication Service'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory KerberosAuthenticationServiceFailure {\\n                    Name = 'Kerberos Authentication Service'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory KerberosServiceTicketOperationsSuccess {\\n                    Name = 'Kerberos Service Ticket Operations'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory KerberosServiceTicketOperationsFailure {\\n                    Name = 'Kerberos Service Ticket Operations'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory ComputerAccountManagementSuccess {\\n                    Name = 'Computer Account Management'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DistributionGroupManagementSuccess {\\n                    Name = 'Distribution Group Management'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DetailedDirectoryServiceReplicationSuccess {\\n                    Name = 'Detailed Directory Service Replication'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DetailedDirectoryServiceReplicationFailure {\\n                    Name = 'Detailed Directory Service Replication'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DirectoryServiceAccessFailure {\\n                    Name = 'Directory Service Access'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DirectoryServiceChangesSuccess {\\n                    Name = 'Directory Service Changes'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DirectoryServiceReplicationSuccess {\\n                    Name = 'Directory Service Replication'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory DirectoryServiceReplicationFailure {\\n                    Name = 'Directory Service Replication'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Present'\\n                }\\n                \\n                AuditPolicySubcategory DetailedFileShareSuccess {\\n                    Name = 'Detailed File Share'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n            } Else {\\n                AuditPolicySubcategory KerberosAuthenticationServiceSuccess {\\n                    Name = 'Kerberos Authentication Service'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory KerberosAuthenticationServiceFailure {\\n                    Name = 'Kerberos Authentication Service'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory KerberosServiceTicketOperationsSuccess {\\n                    Name = 'Kerberos Service Ticket Operations'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory KerberosServiceTicketOperationsFailure {\\n                    Name = 'Kerberos Service Ticket Operations'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory ComputerAccountManagementSuccess {\\n                    Name = 'Computer Account Management'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DistributionGroupManagementSuccess {\\n                    Name = 'Distribution Group Management'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DetailedDirectoryServiceReplicationSuccess {\\n                    Name = 'Detailed Directory Service Replication'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DetailedDirectoryServiceReplicationFailure {\\n                    Name = 'Detailed Directory Service Replication'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DirectoryServiceAccessFailure {\\n                    Name = 'Directory Service Access'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DirectoryServiceChangesSuccess {\\n                    Name = 'Directory Service Changes'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DirectoryServiceReplicationSuccess {\\n                    Name = 'Directory Service Replication'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DirectoryServiceReplicationFailure {\\n                    Name = 'Directory Service Replication'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory DetailedFileShareSuccess {\\n                    Name = 'Detailed File Share'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n            }\\n            If ($ServerRole -eq 'CertificateAuthority') {\\n                AuditPolicySubcategory CertificationServicesSuccess {\\n                    Name = 'Certification Services'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Present'\\n                }\\n                AuditPolicySubcategory CertificationServicesFailure {\\n                    Name = 'Certification Services'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Present'\\n                }    \\n            } Else { \\n                AuditPolicySubcategory CertificationServicesSuccess {\\n                    Name = 'Certification Services'\\n                    AuditFlag = 'Success'\\n                    Ensure = 'Absent'\\n                }\\n                AuditPolicySubcategory CertificationServicesFailure {\\n                    Name = 'Certification Services'\\n                    AuditFlag = 'Failure'\\n                    Ensure = 'Absent'\\n                }\\n            }\\n        }\\n    }\\n    Write-Output 'Generating MOF file'\\n    $Null = ConfigInstance -OutputPath 'C:\\\\Temp\\\\AuditConfigInstance' -ConfigurationData $ConfigurationData\\n}\\n\\nFunction Invoke-DscStatusCheck {\\n    $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'\\n    If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {\\n        Exit 3010\\n    } Else {\\n        Write-Output 'DSC Config Completed'\\n    }\\n}\\n\\n$AuditConfigPresent = Test-Path -Path 'C:\\\\Temp\\\\AuditConfigInstance'\\nSet-DscConfiguration -ServerRole '{{ServerRole}}'\\n\\nIf ($AuditConfigPresent) {\\n    Start-DscConfiguration -UseExisting -Wait -Verbose -Force\\n} Else {\\n    Start-DscConfiguration 'C:\\\\Temp\\\\AuditConfigInstance' -Wait -Verbose -Force\\n}\\n\\nInvoke-DscStatusCheck\\n\\nTry {\\n    $Version = (Invoke-WebRequest 'https://s3-us-west-2.amazonaws.com/kinesis-agent-windows/downloads/packages.json' -Headers @{\\\"Accept\\\"=\\\"application/json\\\"} -UseBasicParsing | Select-Object -ExpandProperty 'Content' | ConvertFrom-Json | Select-Object -ExpandProperty 'Packages').Version[0]\\n} Catch [System.Exception] {\\n    Write-Output \\\"Failed to get latest KTAP version $_\\\"\\n    Exit 1\\n}\\n\\n(New-Object -TypeName 'System.Net.WebClient').DownloadFile(\\\"https://s3-us-west-2.amazonaws.com/kinesis-agent-windows/downloads/AWSKinesisTap.$Version.msi\\\", 'C:\\\\Temp\\\\AWSKinesisTap.msi')\\n\\nWrite-Output 'Installing KinesisTap'\\n$Process = Start-Process -FilePath 'msiexec.exe' -ArgumentList '/I C:\\\\Temp\\\\AWSKinesisTap.msi /quiet /l C:\\\\Temp\\\\ktap-install-log.txt' -NoNewWindow -PassThru -Wait -ErrorAction Stop\\n\\nIf ($Process.ExitCode -ne 0) {\\n    Write-Output \\\"Error installing KinesisTap -exit code $($Process.ExitCode)\\\"\\n    Exit 1\\n}\\n\\nIf ($ServerRole -eq 'DomainController') {\\n    $DcCategories = @(\\n        @{\\n            'Category' = 'ADWS'\\n            'Counters' = @(\\n                @{\\n                    'Counter' = 'Active Web Service Sessions'\\n                    'Unit'    = 'Count'\\n                },\\n                @{\\n                    'Counter' = 'ChangePassword Operations Per Second'\\n                    'Unit'    = 'Count/Second'\\n                }\\n                @{\\n                    'Counter' = 'Delete Operations Per Second'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'SetPassword Operations Per Second'\\n                    'Unit'    = 'Count/Second'\\n                }\\n            )\\n        },\\n        @{\\n            'Category'  = 'Database ==\u003e Instances'\\n            'Instances' = 'NTDSA'\\n            'Counters'  = @(\\n                @{\\n                    'Counter' = 'Database Cache % Hit'\\n                    'Unit'    = 'Percent'\\n                },\\n                @{\\n                    'Counter' = 'Database Cache Size (MB)'\\n                    'Unit'    = 'Megabytes'\\n                },\\n                @{\\n                    'Counter' = 'I/O Database Reads Average Latency'\\n                    'Unit'    = 'Milliseconds'\\n                },\\n                @{\\n                    'Counter' = 'I/O Database Reads/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'I/O Log Writes Average Latency'\\n                    'Unit'    = 'Milliseconds'\\n                },\\n                @{\\n                    'Counter' = 'I/O Database Writes/sec'\\n                    'Unit'    = 'Count/Second'\\n                }\\n            )\\n        },\\n        @{\\n            'Category'  = 'DFS Replication Service Volumes'\\n            'Instances' = '*'\\n            'Counters'  = @(\\n                @{\\n                    'Counter' = 'USN Journal Unread Percentage'\\n                    'Unit'    = 'Percent'\\n                }\\n            )\\n        },\\n        @{\\n            'Category' = 'DNS'\\n            'Counters' = @(\\n                @{\\n                    'Counter' = 'Dynamic Update Rejected'\\n                    'Unit'    = 'Count'\\n                },\\n                @{\\n                    'Counter' = 'Recursive Queries/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'Recursive Query Failure/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'Secure Update Failure'\\n                    'Unit'    = 'Count'\\n                },\\n                @{\\n                    'Counter' = 'TCP Query Received/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'Total Query Received/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'Total Response Sent/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'UDP Query Received/sec'\\n                    'Unit'    = 'Count/Second'\\n                }\\n            )\\n        },\\n        @{\\n            'Category' = 'NTDS'\\n            'Counters' = @(\\n                @{\\n                    'Counter' = 'ATQ Estimated Queue Delay'\\n                    'Unit'    = 'Milliseconds'\\n                },\\n                @{\\n                    'Counter' = 'ATQ Request Latency'\\n                    'Unit'    = 'Milliseconds'\\n                },\\n                @{\\n                    'Counter' = 'DRA Pending Replication Operations'\\n                    'Unit'    = 'Count'\\n                },\\n                @{\\n                    'Counter' = 'DRA Pending Replication Synchronizations'\\n                    'Unit'    = 'Count'\\n                },\\n                @{\\n                    'Counter' = 'DS Directory Reads/Sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'DS Directory Searches/Sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'DS Directory Writes/Sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'LDAP Bind Time'\\n                    'Unit'    = 'Milliseconds'\\n                },\\n                @{\\n                    'Counter' = 'LDAP Client Sessions'\\n                    'Unit'    = 'Count'\\n                },\\n                @{\\n                    'Counter' = 'LDAP Searches/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'LDAP Successful Binds/sec'\\n                    'Unit'    = 'Count/Second'\\n                }\\n            )\\n        },\\n        @{\\n            'Category' = 'Security System-Wide Statistics'\\n            'Counters' = @(\\n                @{\\n                    'Counter' = 'Kerberos Authentications'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'NTLM Authentications'\\n                    'Unit'    = 'Count/Second'\\n                }\\n            )\\n        }\\n    )\\n\\n    $DcSources = @(\\n        @{\\n            'Id'         = 'DFSReplicationLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'DFS Replication'\\n        },\\n        @{\\n            'Id'         = 'DirectoryServiceLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Directory Service'\\n        },\\n        @{\\n            'Id'         = 'DNSServerLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'DNS Server'\\n        },\\n        @{\\n            'Id'         = 'DNSServerAuditLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Microsoft-Windows-DNSServer/Audit'\\n        },\\n        @{\\n            'Id'         = 'KerberosOperationalLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Microsoft-Windows-Kerberos/Operational'\\n        },\\n        @{\\n            'Id'         = 'Kerberos-Key-Distribution-CenterOperationalLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Microsoft-Windows-Kerberos-Key-Distribution-Center/Operational'\\n        },\\n        @{\\n            'Id'         = 'NTLMOperationalLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Microsoft-Windows-NTLM/Operational'\\n        },\\n        @{\\n            'Id'         = 'Security-NetlogonOperationalLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Microsoft-Windows-Security-Netlogon/Operational'\\n        },\\n        @{\\n            'Id'             = 'DNSLogs'\\n            'SourceType'     = 'DirectorySource'\\n            'Directory'      = 'C:\\\\DnsLogs'\\n            'FileNameFilter' = '*.log|*.txt'\\n            'RecordParser'   = 'SingleLine'\\n        }\\n    )\\n\\n    $DcSinks = @(\\n        @{\\n            'Id'             = 'DFSReplicationLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'DFSReplicationLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'DirectoryServiceLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'DirectoryServiceLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'DNSServerLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'DNSServerLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'DNSServerAuditLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'DNSServerAuditLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'KerberosOperationalLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'KerberosOperationalLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'Kerberos-Key-Distribution-CenterOperationalLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'Kerberos-Key-Distribution-CenterOperationalLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'NTLMOperationalLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'NTLMOperationalLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'Security-NetlogonOperationalLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'Security-NetlogonOperationalLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'DNSLogs-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'DNSLogs-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        }\\n    )\\n\\n    $DcPipes = @(\\n        @{\\n            'Id'        = 'DFSReplicationLogToCloudWatch'\\n            'SourceRef' = 'DFSReplicationLog'\\n            'SinkRef'   = 'DFSReplicationLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'DirectoryServiceLogToCloudWatch'\\n            'SourceRef' = 'DirectoryServiceLog'\\n            'SinkRef'   = 'DirectoryServiceLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'DNSServerLogToCloudWatch'\\n            'SourceRef' = 'DNSServerLog'\\n            'SinkRef'   = 'DNSServerLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'DNSServerAuditLogToCloudWatch'\\n            'SourceRef' = 'DNSServerAuditLog'\\n            'SinkRef'   = 'DNSServerAuditLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'KerberosOperationalLogToCloudWatch'\\n            'SourceRef' = 'KerberosOperationalLog'\\n            'SinkRef'   = 'KerberosOperationalLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'Kerberos-Key-Distribution-CenterOperationalLogToCloudWatch'\\n            'SourceRef' = 'Kerberos-Key-Distribution-CenterOperationalLog'\\n            'SinkRef'   = 'Kerberos-Key-Distribution-CenterOperationalLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'NTLMOperationalLogToCloudWatch'\\n            'SourceRef' = 'NTLMOperationalLog'\\n            'SinkRef'   = 'NTLMOperationalLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'Security-NetlogonOperationalLogToCloudWatch'\\n            'SourceRef' = 'Security-NetlogonOperationalLog'\\n            'SinkRef'   = 'Security-NetlogonOperationalLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'DNSLogsToCloudWatch'\\n            'SourceRef' = 'DNSLogs'\\n            'SinkRef'   = 'DNSLogs-CloudWatchLogsSink'\\n        }\\n    )\\n}\\n\\nIf ($ServerRole -eq 'CertificateAuthority') {\\n    $CaCategories = @(\\n        @{\\n            'Category'  = 'Certification Authority'\\n            'Instances' = '*'\\n            'Counters'  = @(\\n                @{\\n                    'Counter' = 'Failed Request/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'Request/sec'\\n                    'Unit'    = 'Count/Second'\\n                },\\n                @{\\n                    'Counter' = 'Request processing time (ms)'\\n                    'Unit'    = 'Milliseconds'\\n                }\\n            )\\n        },\\n        @{\\n            'Category'  = 'Certification Authority Connections'\\n            'Instances' = '*'\\n            'Counters'  = @(\\n                @{\\n                    'Counter' = 'Active connections'\\n                    'Unit'    = 'Count'\\n                }\\n            )\\n        }\\n    )\\n}\\n\\n$KenesisAgentSettings = @{\\n    'Sources'    = @(\\n        @{\\n            'Id'         = 'PerformanceCounter'\\n            'SourceType' = 'WindowsPerformanceCounterSource'\\n            'Categories' = @(\\n                @{\\n                    'Category'  = 'ENA Packets Shaping'\\n                    'Instances' = 'ENA #1'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = 'Aggregate inbound BW allowance exceeded'\\n                            'Unit'    = 'Count'\\n                        },\\n                        @{\\n                            'Counter' = 'Aggregate outbound BW allowance exceeded'\\n                            'Unit'    = 'Count'\\n                        },\\n                        @{\\n                            'Counter' = 'Connection tracking allowance exceeded'\\n                            'Unit'    = 'Count'\\n                        },\\n                        @{\\n                            'Counter' = 'Link local packet rate allowance exceeded'\\n                            'Unit'    = 'Count'\\n                        },\\n                        @{\\n                            'Counter' = 'PPS allowance exceeded'\\n                            'Unit'    = 'Count'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category'  = 'LogicalDisk'\\n                    'Instances' = 'D:'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = '% Free Space'\\n                            'Unit'    = 'Percent'\\n                        },\\n                        @{\\n                            'Counter' = 'Avg. Disk Queue Length'\\n                            'Unit'    = 'Count'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category'  = 'LogicalDisk'\\n                    'Instances' = 'C:'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = '% Free Space'\\n                            'Unit'    = 'Percent'\\n                        },\\n                        @{\\n                            'Counter' = 'Avg. Disk Queue Length'\\n                            'Unit'    = 'Count'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category' = 'Memory'\\n                    'Counters' = @(\\n                        @{\\n                            'Counter' = '% Committed Bytes in Use'\\n                            'Unit'    = 'Percent'\\n                        },\\n                        @{\\n                            'Counter' = 'Available MBytes'\\n                            'Unit'    = 'Megabytes'\\n                        },\\n                        @{\\n                            'Counter' = 'Long-Term Average Standby Cache Lifetime (s)'\\n                            'Unit'    = 'Seconds'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category'  = 'Network Interface'\\n                    'Instances' = 'Amazon Elastic Network Adapter'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = 'Bytes Received/sec'\\n                            'Unit'    = 'Count/Second'\\n                        },\\n                        @{\\n                            'Counter' = 'Bytes Sent/sec'\\n                            'Unit'    = 'Count/Second'\\n                        },\\n                        @{\\n                            'Counter' = 'Current Bandwidth'\\n                            'Unit'    = 'Bits/Second'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category'  = 'PhysicalDisk'\\n                    'Instances' = '0 C:'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = 'Avg. Disk Queue Length'\\n                            'Unit'    = 'Count'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category'  = 'PhysicalDisk'\\n                    'Instances' = '1 D:'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = 'Avg. Disk Queue Length'\\n                            'Unit'    = 'Count'\\n                        }\\n                    )\\n                },\\n                @{\\n                    'Category'  = 'Processor'\\n                    'Instances' = '*'\\n                    'Counters'  = @(\\n                        @{\\n                            'Counter' = '% Processor Time'\\n                            'Unit'    = 'Percent'\\n                        }\\n                    )\\n                }\\n                $DcCategories\\n                $CaCategories\\n            )\\n        },\\n        @{\\n            'Id'         = 'ApplicationLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Application'\\n        },\\n        @{\\n            'Id'         = 'SecurityLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Security'\\n        },\\n        @{\\n            'Id'         = 'SystemLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'System'\\n        },\\n        @{\\n            'Id'         = 'CertificateServicesClient-Lifecycle-SystemOperationalLog'\\n            'SourceType' = 'WindowsEventLogSource'\\n            'LogName'    = 'Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational'\\n        }\\n        $DcSources\\n    )\\n    'Sinks'      = @(\\n        @{\\n            'Namespace' = 'EC2-Domain-Member-Metrics'\\n            'Region'    = 'ReplaceMe'\\n            'Id'        = 'CloudWatchSink'\\n            'Interval'  = '60'\\n            'SinkType'  = 'CloudWatch'\\n        },\\n        @{\\n            'Id'             = 'ApplicationLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'ApplicationLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'SecurityLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'SecurityLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'SystemLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'SystemLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        },\\n        @{\\n            'Id'             = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-CloudWatchLogsSink'\\n            'SinkType'       = 'CloudWatchLogs'\\n            'BufferInterval' = '60'\\n            'LogGroup'       = '{ComputerName}-Log-Group'\\n            'LogStream'      = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-Stream'\\n            'Region'         = 'ReplaceMe'\\n            'Format'         = 'json'\\n        }\\n        $DcSinks\\n    )\\n    'Pipes'      = @(\\n        @{\\n            'Id'        = 'PerformanceCounterToCloudWatch'\\n            'SourceRef' = 'PerformanceCounter'\\n            'SinkRef'   = 'CloudWatchSink'\\n        },\\n        @{\\n            'Id'        = 'ApplicationLogToCloudWatch'\\n            'SourceRef' = 'ApplicationLog'\\n            'SinkRef'   = 'ApplicationLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'SecurityLogToCloudWatch'\\n            'SourceRef' = 'SecurityLog'\\n            'SinkRef'   = 'SecurityLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'SystemLogToCloudWatch'\\n            'SourceRef' = 'SystemLog'\\n            'SinkRef'   = 'SystemLog-CloudWatchLogsSink'\\n        },\\n        @{\\n            'Id'        = 'CertificateServicesClient-Lifecycle-SystemOperationalLogToCloudWatch'\\n            'SourceRef' = 'CertificateServicesClient-Lifecycle-SystemOperationalLog'\\n            'SinkRef'   = 'CertificateServicesClient-Lifecycle-SystemOperationalLog-CloudWatchLogsSink'\\n        }\\n        $DcPipes\\n    )\\n    'SelfUpdate' = 0\\n}\\n\\nWrite-Output 'Getting region'\\nTry {\\n    [string]$Token = Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token-ttl-seconds' = '3600' } -Method 'PUT' -Uri 'http://169.254.169.254/latest/api/token' -UseBasicParsing -ErrorAction Stop\\n    $Region = (Invoke-RestMethod -Headers @{'X-aws-ec2-metadata-token' = $Token } -Method 'GET' -Uri 'http://169.254.169.254/latest/dynamic/instance-identity/document' -UseBasicParsing -ErrorAction Stop | Select-Object -ExpandProperty 'Region').ToUpper()\\n} Catch [System.Exception] {\\n    Write-Output \\\"Failed to get region $_\\\"\\n    Exit 1\\n}\\n\\n$KenesisAgentSettings.Sinks | Where-Object { $_.Region -eq 'ReplaceMe' } | ForEach-Object { $_.Region = $Region }\\n\\nWrite-Output 'Exporting appsettings.json content'\\nTry {\\n    $KenesisAgentSettings | ConvertTo-Json -Depth 10 -ErrorAction Stop | Out-File 'C:\\\\Program Files\\\\Amazon\\\\AWSKinesisTap\\\\appsettings.json' -Encoding 'ascii' -ErrorAction Stop\\n} Catch [System.Exception] {\\n    Write-Output \\\"Unable to export appsettings.json $_\\\"\\n    Exit 1\\n}\\n\\nWrite-Output 'Restarting AWSKinesisTap service'\\nTry {\\n    Restart-Service 'AWSKinesisTap' -Force\\n} Catch [System.Exception] {\\n    Write-Output \\\"Unable to restart AWSKinesisTap $_\\\"\\n    Exit 1\\n}\\n\\nInvoke-Cleanup -VPCCIDR '{{VPCCIDR}}'\"\r\n            },\r\n            \"CloudWatchOutputConfig\": {\r\n              \"CloudWatchOutputEnabled\": true,\r\n              \"CloudWatchLogGroupName\": \"/aws/Demo/SSM-AuditPol-7ebugdhf\"\r\n            },\r\n            \"InstanceIds\": [\r\n              \"{{InstanceId.InstanceId}}\"\r\n            ],\r\n            \"DocumentName\": \"AWS-RunPowerShellScript\"\r\n          },\r\n          \"name\": \"configureInstance\",\r\n          \"action\": \"aws:runCommand\"\r\n        }\r\n      ]\r\n    }\r\n",
            "created_date": "2022-07-22T21:34:31Z",
            "default_version": "1",
            "description": "Configure Kinesis Agent for Windows, Windows Auditing Policy, and deployment cleanup using SSM Automation",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "4d0d169c6915abf600bf141142b53953d30dd4e60ce96d6b29976876e34e2a96",
            "hash_type": "Sha256",
            "id": "SSM-AuditPol-7ebugdhf",
            "latest_version": "1",
            "name": "SSM-AuditPol-7ebugdhf",
            "owner": "156285977455",
            "parameter": [
              {
                "default_value": "",
                "description": "NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)",
                "name": "ServerNetBIOSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Role server will be (DomainController or CertificateAuthority)",
                "name": "ServerRole",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "CIDR Block for the VPC",
                "name": "VPCCIDR",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Stack Name Input for cfn resource signal",
                "name": "StackName",
                "type": "String"
              }
            ],
            "permissions": null,
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": null,
            "tags_all": {},
            "target_type": "",
            "version_name": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ssm_baseline",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:us-east-2:156285977455:document/SSM-Baseline-7ebugdhf",
            "attachments_source": [],
            "content": "    {\r\n      \"schemaVersion\": \"0.3\",\r\n      \"description\": \"Deploy AD with SSM Automation\",\r\n      \"parameters\": {\r\n        \"ServerRole\": {\r\n          \"description\": \"Role server will be (DomainController or CertificateAuthority)\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"TrustDirection\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Trust Direction from AWS Managed Microsoft AD to on-premises domain.\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DomainDNSName\": {\r\n          \"description\": \"Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"MadDirectoryID\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Directory ID of MAD domain\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DomainNetBIOSName\": {\r\n          \"description\": \"NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"FsxOnpremParentOu\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Parent OU DN for Amazon FSX for Windows deployment with On-Premises AD\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DeploymentType\": {\r\n          \"description\": \"Type of workload being deployed\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"TrustSecretName\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"AWS Secrets Parameter Name\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"ServerNetBIOSName\": {\r\n          \"description\": \"NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"LogicalResourceId\": {\r\n          \"description\": \"CloudFormation Resource ID\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DomainType\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Type of domain PKI will be integrated with\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"MadDNSName\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Fully qualified domain name (FQDN) of the MAD domain e.g. corp.example.com\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"VPCCIDR\": {\r\n          \"description\": \"CIDR Block for the VPC\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"ParentDomainDNSName\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"AdministratorSecretName\": {\r\n          \"description\": \"AWS Secrets Parameter Name\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"IntegrateFsxOnprem\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Deploy \u0026 Integrate Amazon FSX for Windows with On-Premises AD\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DeployPki\": {\r\n          \"description\": \"Deploy an Enterprise CA\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"OnpremDomainDNSName\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"Fully qualified domain name (FQDN) of the forest root domain e.g. example.com\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"StackName\": {\r\n          \"description\": \"Stack Name Input for cfn resource signal\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"ParentInstanceIP\": {\r\n          \"default\": \"placeholder\",\r\n          \"description\": \"IP Address of the forest root domain controller\",\r\n          \"type\": \"String\"\r\n        }\r\n      },\r\n      \"mainSteps\": [\r\n        {\r\n          \"outputs\": [\r\n            {\r\n              \"Type\": \"String\",\r\n              \"Name\": \"InstanceId\",\r\n              \"Selector\": \"$.Reservations[0].Instances[0].InstanceId\"\r\n            }\r\n          ],\r\n          \"inputs\": {\r\n            \"Filters\": [\r\n              {\r\n                \"Values\": [\r\n                  \"{{ServerNetBIOSName}}\"\r\n                ],\r\n                \"Name\": \"tag:Name\"\r\n              },\r\n              {\r\n                \"Values\": [\r\n                  \"{{StackName}}\"\r\n                ],\r\n                \"Name\": \"tag:aws:cloudformation:stack-name\"\r\n              },\r\n              {\r\n                \"Values\": [\r\n                  \"running\"\r\n                ],\r\n                \"Name\": \"instance-state-name\"\r\n              }\r\n            ],\r\n            \"Service\": \"ec2\",\r\n            \"Api\": \"DescribeInstances\"\r\n          },\r\n          \"name\": \"InstanceId\",\r\n          \"action\": \"aws:executeAwsApi\",\r\n          \"onFailure\": \"step:signalFailure\",\r\n          \"nextStep\": \"intializeInstance\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Parameters\": {\r\n              \"commands\": \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\\n\\n$RegistryItems = @(\\n    @{\\n        Name         = 'SchUseStrongCrypto'\\n        Path         = 'Registry::HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\.NETFramework\\\\v4.0.30319'\\n        Value        = '1'\\n        PropertyType = 'DWORD'\\n    },\\n    @{\\n        Name         = 'SchUseStrongCrypto'\\n        Path         = 'Registry::HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\.NETFramework\\\\v4.0.30319'\\n        Value        = '1'\\n        PropertyType = 'DWORD'\\n    }\\n)\\n\\nForeach ($RegistryItem in $RegistryItems) {\\n    Try {\\n        $Null = New-ItemProperty @RegistryItem -Force -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to create Registry key named $($RegistryItem.Name) at $($RegistryItem.Path) $_\\\"\\n        Exit 1\\n    }\\n}\\n\\n$Modules = @(\\n    @{\\n        Name    = 'NetworkingDsc'\\n        Version = '9.0.0'\\n    },\\n    @{\\n        Name    = 'ActiveDirectoryDsc'\\n        Version = '6.2.0'\\n    },\\n    @{\\n        Name    = 'ComputerManagementDsc'\\n        Version = '8.5.0'\\n    },\\n    @{\\n        Name    = 'DnsServerDsc'\\n        Version = '3.0.0'\\n    },\\n    @{\\n        Name    = 'AuditPolicyDsc'\\n        Version = '1.4.0.0'\\n    },\\n    @{\\n        Name    = 'SChannelDsc'\\n        Version = '1.4.0'\\n    }\\n)\\n\\nFunction New-VolumeFromRawDisk {\\n    Write-Output 'Finding RAW Disk'\\n    $Counter = 0\\n    Do {\\n        Try {\\n            $BlankDisks = Get-Disk -ErrorAction Stop | Where-Object { $_.PartitionStyle -eq 'RAW' } | Select-Object -ExpandProperty 'Number'\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get disk $_\\\"\\n            $BlankDisks = $Null\\n        }\\n        If (-not $BlankDisks) {\\n            $Counter ++\\n            Write-Output 'RAW Disk not found sleeping 10 seconds and will try again.'\\n            Start-Sleep -Seconds 10\\n        }\\n    } Until ($BlankDisks -or $Counter -eq 12)\\n\\n    If ($Counter -ge 12) {\\n        Write-Output 'RAW Disk not found exiting'\\n        Return\\n    }\\n\\n    Foreach ($BlankDisk in $BlankDisks) {\\n        Write-Output 'Data Volume not initialized attempting to bring online'\\n        Try {\\n            Initialize-Disk -Number $BlankDisk -PartitionStyle 'GPT' -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed attempting to bring online Data Volume $_\\\"\\n            Exit 1\\n        }\\n\\n        Start-Sleep -Seconds 5\\n\\n        Write-Output 'Data Volume creating new partition'\\n        Try {\\n            $DriveLetter = New-Partition -Alignment '4096000' -DiskNumber $BlankDisk -AssignDriveLetter -UseMaximumSize -ErrorAction Stop | Select-Object -ExpandProperty 'DriveLetter'\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed creating new partition $_\\\"\\n            Exit 1\\n        }\\n\\n        Start-Sleep -Seconds 5\\n\\n        Write-Output 'Data Volume formatting partition'\\n        Try {\\n            $Null = Format-Volume -DriveLetter $DriveLetter -FileSystem 'NTFS' -NewFileSystemLabel 'Data' -Confirm:$false -Force -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed formatting partition $_\\\"\\n            Exit 1\\n        }\\n\\n        Try {\\n            $Null = Get-CimInstance -ClassName 'Win32_Volume' -Filter \\\"DriveLetter='$($DriveLetter):'\\\" -ErrorAction Stop | Set-CimInstance -Arguments @{ IndexingEnabled = $False }\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to turn off indexing $_\\\"\\n            Exit 1\\n        }\\n    }\\n}\\n\\nFunction Invoke-PreConfig {\\n    Write-Output 'Temporarily disabling Windows Firewall'\\n    Try {\\n        Get-NetFirewallProfile -ErrorAction Stop | Set-NetFirewallProfile -Enabled False -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to disable Windows Firewall $_\\\"\\n        Exit 1\\n    }\\n\\n    $Dirs = @(\\n        'C:\\\\Temp\\\\publickeys',\\n        'C:\\\\DnsLogs'\\n    )\\n\\n    Foreach ($Dir in $Dirs) {\\n        Write-Output \\\"Creating file directory $Dir\\\"\\n        Try {\\n            $Null = New-Item -Path $Dir -ItemType 'Directory' -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create directory $Dir $_\\\"\\n            Exit 1\\n        }\\n    }\\n\\n    Write-Output 'Creating certificate to encrypt credentials in MOF file'\\n    Try {\\n        $cert = New-SelfSignedCertificate -Type 'DocumentEncryptionCertLegacyCsp' -DnsName 'DscEncryptCert' -HashAlgorithm 'SHA256' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to create self signed cert $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Exporting the self signed public key certificate'\\n    Try {\\n        $Null = $cert | Export-Certificate -FilePath 'C:\\\\Temp\\\\publickeys\\\\DscPublicKey.cer' -Force -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to copy self signed cert to publickeys directory $_\\\"\\n        Exit 1\\n    }\\n}\\n\\nFunction Invoke-LcmConfig {\\n    Write-Output 'Getting the DSC cert thumbprint to secure the MOF file'\\n    Try {\\n        $DscCertThumbprint = Get-ChildItem -Path 'cert:\\\\LocalMachine\\\\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get DSC cert thumbprint $_\\\"\\n        Exit 1\\n    }\\n\\n    [DSCLocalConfigurationManager()]\\n    Configuration LCMConfig\\n    {\\n        Node 'localhost' {\\n            Settings {\\n                RefreshMode                    = 'Push'\\n                ConfigurationModeFrequencyMins = 15\\n                ActionAfterReboot              = 'StopConfiguration'\\n                RebootNodeIfNeeded             = $false\\n                ConfigurationMode              = 'ApplyAndAutoCorrect'\\n                CertificateId                  = $DscCertThumbprint\\n            }\\n        }\\n    }\\n\\n    Write-Output 'Generating MOF file for LCM'\\n    $Null = LCMConfig -OutputPath 'C:\\\\Temp\\\\LCMConfig'\\n\\n    Write-Output 'Sets LCM configuration to MOF generated in previous command'\\n    Try {\\n        Set-DscLocalConfigurationManager -Path 'C:\\\\Temp\\\\LCMConfig' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to set LCM configuration $_\\\"\\n        Exit 1\\n    }\\n}\\n\\nWrite-Output 'Installing NuGet Package Provider'\\nTry {\\n    $Null = Install-PackageProvider -Name 'NuGet' -MinimumVersion '2.8.5' -Force -ErrorAction Stop\\n} Catch [System.Exception] {\\n    Write-Output \\\"Failed to install NuGet Package Provider $_\\\"\\n    Exit 1\\n}\\n\\nWrite-Output 'Setting PSGallery Respository to trusted'\\nTry {\\n    Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -ErrorAction Stop\\n} Catch [System.Exception] {\\n    Write-Output \\\"Failed to set PSGallery Respository to trusted $_\\\"\\n    Exit 1\\n}\\n\\nWrite-Output 'Installing the needed Powershell DSC modules'\\nForeach ($Module in $Modules) {\\n    Try {\\n        Install-Module -Name $Module.Name -RequiredVersion $Module.Version -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to Import Modules $_\\\"\\n        #Exit 1\\n    }\\n}\\n\\nWrite-Output 'Getting certificate AutoEnrollment policy'\\nTry {\\n    $CertEnrollmentActive = Get-CertificateAutoEnrollmentPolicy -context 'Machine' -Scope 'Local' | Select-Object -ExpandProperty 'PolicyState' -ErrorAction Stop\\n} Catch [System.Exception] {\\n    Write-Output \\\"Failed to get certificate AutoEnrollment policy $_\\\"\\n    Exit 1\\n}\\n\\nIf ($CertEnrollmentActive -ne 'Enabled') {\\n    Write-Output 'Setting certificate AutoEnrollment policy'\\n    Try {\\n        Set-CertificateAutoEnrollmentPolicy -ExpirationPercentage 10 -PolicyState 'Enabled' -EnableTemplateCheck -EnableMyStoreManagement -StoreName 'MY' -context 'Machine' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to set certificate AutoEnrollment policy $_\\\"\\n        Exit 1\\n    }\\n}\\n\\nNew-VolumeFromRawDisk\\nInvoke-PreConfig\\nInvoke-LcmConfig\\n\\nIf ('{{DeploymentType}}' -eq 'Management') {\\n    Write-Output 'Installing SQL Server Management Studio'\\n(New-Object -TypeName 'System.Net.WebClient').DownloadFile('https://aka.ms/ssmsfullsetup', 'C:\\\\Temp\\\\SSMS-Setup.exe')\\n    $ArgumentList = '/Quiet'\\n    Try {\\n        $Process = Start-Process -FilePath 'C:\\\\Temp\\\\SSMS-Setup.exe' -ArgumentList $ArgumentList -NoNewWindow -PassThru -Wait -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to install SQL Server Management Studio $_\\\"\\n        #Exit 1\\n    }\\n}\"\r\n            },\r\n            \"CloudWatchOutputConfig\": {\r\n              \"CloudWatchOutputEnabled\": true,\r\n              \"CloudWatchLogGroupName\": \"/aws/Demo/SSM-Baseline-7ebugdhf\"\r\n            },\r\n            \"InstanceIds\": [\r\n              \"{{InstanceId.InstanceId}}\"\r\n            ],\r\n            \"DocumentName\": \"AWS-RunPowerShellScript\"\r\n          },\r\n          \"name\": \"intializeInstance\",\r\n          \"action\": \"aws:runCommand\",\r\n          \"onFailure\": \"step:signalFailure\",\r\n          \"nextStep\": \"configureInstance\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Parameters\": {\r\n              \"commands\": \"Function Get-SecretInfo {\\n    [CmdletBinding()]\\n    Param (\\n        [Parameter(Mandatory = $True)][String]$Domain,\\n        [Parameter(Mandatory = $True)][String]$SecretArn\\n    )\\n\\n    Write-Output \\\"Getting $SecretArn Secret\\\"\\n    Try {\\n        $SecretContent = Get-SECSecretValue -SecretId $SecretArn -ErrorAction Stop | Select-Object -ExpandProperty 'SecretString' | ConvertFrom-Json -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get $SecretArn Secret $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Creating PSCredential object from Secret'\\n    $Username = $SecretContent.username\\n    $UserPassword = ConvertTo-SecureString ($SecretContent.password) -AsPlainText -Force\\n    $DomainCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' (\\\"$Domain\\\\$Username\\\", $UserPassword)\\n    $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ($Username, $UserPassword)\\n\\n    $Output = [PSCustomObject][Ordered]@{\\n        'Credentials'       = $Credentials\\n        'DomainCredentials' = $DomainCredentials\\n        'Username'          = $Username\\n        'UserPassword'      = $UserPassword\\n    }\\n\\n    Return $Output\\n}\\n\\nFunction Get-EniConfig {\\n    Write-Output 'Getting network configuration'\\n    Try {\\n        $NetIpConfig = Get-NetIPConfiguration -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get network configuration $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Grabbing the current gateway address in order to static IP correctly'\\n    $GatewayAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4DefaultGateway' | Select-Object -ExpandProperty 'NextHop'\\n\\n    Write-Output 'Formatting IP address in format needed for IPAdress DSC resource'\\n    $IpAddress = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'IpAddress'\\n    $Prefix = $NetIpConfig | Select-Object -ExpandProperty 'IPv4Address' | Select-Object -ExpandProperty 'PrefixLength'\\n    $InterfaceAlias = $NetIpConfig | Select-Object -ExpandProperty 'InterfaceAlias'\\n    $IpAddr = 'IP/CIDR' -replace 'IP', $IpAddress -replace 'CIDR', $Prefix\\n\\n    Write-Output 'Getting MAC address'\\n    Try {\\n        $MacAddress = Get-NetAdapter -ErrorAction Stop | Select-Object -ExpandProperty 'MacAddress'\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get MAC address $_\\\"\\n        Exit 1\\n    }\\n\\n    $Output = [PSCustomObject][Ordered]@{\\n        'GatewayAddress' = $GatewayAddress\\n        'IpAddress'      = $IpAddr\\n        'DnsIpAddress'   = $IpAddress\\n        'MacAddress'     = $MacAddress\\n        'InterfaceAlias' = $InterfaceAlias\\n    }\\n\\n    Return $Output\\n}\\n\\nFunction Set-DscConfiguration {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][PSCredential]$DaCredentials,\\n        [Parameter(Mandatory = $false)][PSCredential]$EaCredentials,\\n        [Parameter(Mandatory = $true)][string]$DeploymentType,\\n        [Parameter(Mandatory = $false)][string]$DnsInstanceIP,\\n        [Parameter(Mandatory = $true)][string]$DomainDNSName,\\n        [Parameter(Mandatory = $true)][string]$DomainNetBIOSName,\\n        [Parameter(Mandatory = $false)][string]$DomainType,\\n        [Parameter(Mandatory = $true)][string]$GatewayAddress,\\n        [Parameter(Mandatory = $false)][string]$InterfaceAlias,\\n        [Parameter(Mandatory = $true)][string]$InstanceIP,\\n        [Parameter(Mandatory = $true)][string]$InstanceNetBIOSName,\\n        [Parameter(Mandatory = $false)][PSCredential]$LaCredentials,\\n        [Parameter(Mandatory = $true)][string]$MacAddress,\\n        [Parameter(Mandatory = $false)][string]$MadDNSName,\\n        [Parameter(Mandatory = $false)][string]$ParentDomainDNSName,\\n        [Parameter(Mandatory = $false)][string]$ParentInstanceIP,\\n        [Parameter(Mandatory = $false)][PSCredential]$RestoreModeCredentials,\\n        [Parameter(Mandatory = $false)][string]$SiteName,\\n        [Parameter(Mandatory = $false)][string]$VPCCIDR\\n    )\\n\\n    $VPCDNS = '169.254.169.253'\\n\\n    If ($DeploymentType -eq 'RootDomainController') {\\n        $AClass = 0..8\\n        $BClass = 9..16\\n        $CClass = 17..24\\n        $DClass = 25..32\\n        $IP = $VPCCIDR.Split('/')[0]\\n        [System.Collections.ArrayList]$IPArray = $IP -Split \\\"\\\\.\\\"\\n        $Range = $VPCCIDR.Split('/')[1]\\n        If ($AClass -contains $Range) {\\n            [System.Array]$Number = $IPArray[0]\\n        } Elseif ($BClass -contains $Range) {\\n            [System.Array]$Number = $IPArray[0, 1]\\n        } Elseif ($CClass -contains $Range) {\\n            [System.Array]$Number = $IPArray[0, 1, 2]\\n        } Elseif ($DClass -contains $Range) {\\n            [System.Array]$Number = $IPArray[0, 1, 2, 3]\\n        }\\n        [System.Array]::Reverse($Number)\\n        $IpRev = $Number -Join \\\".\\\"\\n        $ZoneName = $IpRev + '.in-addr.arpa'\\n    }\\n\\n    Write-Output 'Getting the DSC encryption thumbprint to secure the MOF file'\\n    Try {\\n        $DscCertThumbprint = Get-ChildItem -Path 'cert:\\\\LocalMachine\\\\My' -ErrorAction Stop | Where-Object { $_.Subject -eq 'CN=DscEncryptCert' } | Select-Object -ExpandProperty 'Thumbprint'\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get DSC cert thumbprint $_\\\"\\n        Exit 1\\n    }\\n\\n    If ($DeploymentType -eq 'RootDomainController' -or $DeploymentType -eq 'ChildDomainController') {\\n        Write-Output \\\"Setting DNS client $_\\\"\\n        Try {\\n            Set-DnsClientServerAddress -InterfaceAlias $InterfaceAlias -ServerAddresses ($VPCDNS) -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to set DNS client $_\\\"\\n            Exit 1\\n        }\\n    }\\n\\n    Write-Output 'Creating configuration data block that has the certificate information for DSC configuration processing'\\n    $ConfigurationData = @{\\n        AllNodes = @(\\n            @{\\n                NodeName             = '*'\\n                #CertificateFile      = 'C:\\\\Temp\\\\publickeys\\\\DscPublicKey.cer'\\n                #Thumbprint           = $DscCertThumbprint\\n                PSDscAllowDomainUser = $true\\n                PsDscAllowPlainTextPassword = $true\\n            },\\n            @{\\n                NodeName = 'localhost'\\n            }\\n        )\\n    }\\n\\n    Switch ($DeploymentType) {\\n        'RootDomainController' {\\n            $Address = @(\\n                $DnsInstanceIP,\\n                '127.0.0.1',\\n                $VPCDNS\\n            )\\n        }\\n        'ChildDomainController' {\\n            $Address = @(\\n                $ParentInstanceIP,\\n                '127.0.0.1',\\n                $VPCDNS\\n            )\\n        }\\n        Default {\\n            $Address = @(\\n                $VPCDNS\\n            )\\n        }\\n    }\\n\\n    Configuration ConfigInstance {\\n        Import-DscResource -ModuleName 'PSDesiredStateConfiguration', 'NetworkingDsc', 'ComputerManagementDsc', 'DnsServerDsc', 'ActiveDirectoryDsc', 'AuditPolicyDsc', 'SChannelDsc'\\n        Node LocalHost {\\n            NetAdapterName RenameNetAdapterPrimary {\\n                NewName    = 'Primary'\\n                MacAddress = $MacAddress\\n            }\\n            PowerPlan SetPlanHighPerformance {\\n                IsSingleInstance = 'Yes'\\n                Name             = 'High performance'\\n            }\\n            NetAdapterAdvancedProperty JumboPacket {\\n                NetworkAdapterName = 'Primary'\\n                RegistryKeyword    = '*JumboPacket'\\n                RegistryValue      = 9015\\n                DependsOn          = '[NetAdapterName]RenameNetAdapterPrimary'\\n            }\\n            NetAdapterAdvancedProperty ReceiveBuffers {\\n                NetworkAdapterName = 'Primary'\\n                RegistryKeyword    = '*ReceiveBuffers'\\n                RegistryValue      = 8192\\n                DependsOn          = '[NetAdapterName]RenameNetAdapterPrimary'\\n            }\\n            NetAdapterAdvancedProperty TransmitBuffers {\\n                NetworkAdapterName = 'Primary'\\n                RegistryKeyword    = '*TransmitBuffers'\\n                RegistryValue      = 1024\\n                DependsOn          = '[NetAdapterName]RenameNetAdapterPrimary'\\n            }\\n            NetBios DisableNetBios {\\n                InterfaceAlias = 'Primary'\\n                Setting        = 'Disable'\\n            }\\n            NetIPInterface DisableDhcp {\\n                Dhcp           = 'Disabled'\\n                InterfaceAlias = 'Primary'\\n                AddressFamily  = 'IPv4'\\n                DependsOn      = '[NetAdapterName]RenameNetAdapterPrimary'\\n            }\\n            IPAddress SetIP {\\n                IPAddress      = $InstanceIP\\n                InterfaceAlias = 'Primary'\\n                AddressFamily  = 'IPv4'\\n                DependsOn      = '[NetIPInterface]DisableDhcp'\\n            }\\n            DefaultGatewayAddress SetDefaultGateway {\\n                Address        = $GatewayAddress\\n                InterfaceAlias = 'Primary'\\n                AddressFamily  = 'IPv4'\\n                DependsOn      = '[IPAddress]SetIP'\\n            }\\n            DnsServerAddress DnsServerAddress {\\n                Address        = $Address\\n                InterfaceAlias = 'Primary'\\n                AddressFamily  = 'IPv4'\\n                DependsOn      = '[DefaultGatewayAddress]SetDefaultGateway'\\n            }\\n            DnsConnectionSuffix DnsConnectionSuffix {\\n                InterfaceAlias                 = 'Primary'\\n                ConnectionSpecificSuffix       = $DomainDNSName\\n                RegisterThisConnectionsAddress = $True\\n                UseSuffixWhenRegistering       = $False\\n                DependsOn                      = '[DnsServerAddress]DnsServerAddress'\\n            }\\n            WindowsFeature DnsTools {\\n                Ensure    = 'Present'\\n                Name      = 'RSAT-DNS-Server'\\n                DependsOn = '[DnsConnectionSuffix]DnsConnectionSuffix'\\n            }\\n            WindowsFeature RSAT-AD-Tools {\\n                Ensure    = 'Present'\\n                Name      = 'RSAT-AD-Tools'\\n                DependsOn = '[WindowsFeature]DnsTools'\\n            }\\n            WindowsFeature RSAT-ADDS {\\n                Ensure    = 'Present'\\n                Name      = 'RSAT-ADDS'\\n                DependsOn = '[WindowsFeature]RSAT-AD-Tools'\\n            }\\n            WindowsFeature GPMC {\\n                Ensure    = 'Present'\\n                Name      = 'GPMC'\\n                DependsOn = '[WindowsFeature]RSAT-ADDS'\\n            }\\n            If ($DeploymentType -eq 'RootDomainController' -or $DeploymentType -eq 'ChildDomainController' -or $DeploymentType -eq 'AdditionalDomainController') {\\n                WindowsFeature DNS {\\n                    Ensure    = 'Present'\\n                    Name      = 'DNS'\\n                    DependsOn = '[WindowsFeature]GPMC'\\n                }\\n                WindowsFeature AD-Domain-Services {\\n                    Ensure    = 'Present'\\n                    Name      = 'AD-Domain-Services'\\n                    DependsOn = '[WindowsFeature]DNS'\\n                }\\n                Service ActiveDirectoryWebServices {\\n                    Name        = 'ADWS'\\n                    StartupType = 'Automatic'\\n                    State       = 'Running'\\n                    DependsOn   = '[WindowsFeature]AD-Domain-Services'\\n                }\\n                Computer Rename {\\n                    Name      = $InstanceNetBIOSName\\n                    DependsOn = '[WindowsFeature]AD-Domain-Services'\\n                }\\n                User AdministratorPassword {\\n                    UserName  = 'Administrator'\\n                    Password  = $LaCredentials\\n                    DependsOn = '[Computer]Rename'\\n                }\\n                Switch ($DeploymentType) {\\n                    'RootDomainController' {\\n                        ADDomain PrimaryDC {\\n                            DomainName                    = $DomainDnsName\\n                            DomainNetBIOSName             = $DomainNetBIOSName\\n                            Credential                    = $DaCredentials\\n                            SafemodeAdministratorPassword = $RestoreModeCredentials\\n                            DatabasePath                  = 'D:\\\\NTDS'\\n                            LogPath                       = 'D:\\\\NTDS'\\n                            SysvolPath                    = 'D:\\\\SYSVOL'\\n                            DependsOn                     = '[User]AdministratorPassword'\\n                        }\\n                    }    \\n                    'ChildDomainController' {\\n                        ADDomain PrimaryDC {\\n                            DomainName                    = $DomainNetBIOSName.ToLower()\\n                            DomainNetBIOSName             = $DomainNetBIOSName\\n                            ParentDomainName              = $ParentDomainDNSName\\n                            Credential                    = $EaCredentials\\n                            SafemodeAdministratorPassword = $RestoreModeCredentials\\n                            DatabasePath                  = 'D:\\\\NTDS'\\n                            LogPath                       = 'D:\\\\NTDS'\\n                            SysvolPath                    = 'D:\\\\SYSVOL'\\n                            DependsOn                     = '[User]AdministratorPassword'\\n                        }\\n                    }\\n                    'AdditionalDomainController' {\\n                        ADDomainController  PrimaryDC {\\n                            DomainName                    = $DomainNetBIOSName.ToLower()\\n                            Credential                    = $DaCredentials\\n                            SafemodeAdministratorPassword = $RestoreModeCredentials\\n                            DatabasePath                  = 'D:\\\\NTDS'\\n                            LogPath                       = 'D:\\\\NTDS'\\n                            SysvolPath                    = 'D:\\\\SYSVOL'\\n                            DependsOn                     = '[User]AdministratorPassword'\\n                        }\\n                    }\\n                }\\n                WaitForADDomain WaitForPrimaryDC {\\n                    DomainName  = $DomainDnsName\\n                    WaitTimeout = 600\\n                    DependsOn   = '[ADDomain]PrimaryDC'\\n                }\\n                ADGroup AddAdminToDomainAdminsGroup {\\n                    Ensure           = 'Present'\\n                    GroupName        = 'Domain Admins'\\n                    GroupScope       = 'Global'\\n                    Category         = 'Security'\\n                    MembersToInclude = @('Administrator')\\n                    Credential       = $DaCredentials\\n                    DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'\\n                }\\n                If ($DeploymentType -eq 'RootDomainController') {\\n                    ADForestProperties TSL {\\n                        ForestName        = $DomainDnsName\\n                        TombStoneLifetime = 60\\n                        DependsOn         = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    ADReplicationSite RegionSite {\\n                        Name                       = $SiteName\\n                        RenameDefaultFirstSiteName = $true\\n                        DependsOn                  = '[WaitForADDomain]WaitForPrimaryDC', '[Service]ActiveDirectoryWebServices'\\n                    }\\n                    ADReplicationSubnet VPCCIDR {\\n                        Name      = $VPCCIDR\\n                        Site      = $SiteName\\n                        DependsOn = '[ADReplicationSite]RegionSite'\\n                    }                    \\n                    ADGroup AddAdminToEnterpriseAdminsGroup {\\n                        Ensure           = 'Present'\\n                        GroupName        = 'Enterprise Admins'\\n                        GroupScope       = 'Universal'\\n                        Category         = 'Security'\\n                        MembersToInclude = @('Administrator')\\n                        Credential       = $DaCredentials\\n                        DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    ADGroup AddAdminToSchemaAdminsGroup {\\n                        Ensure           = 'Present'\\n                        GroupName        = 'Schema Admins'\\n                        GroupScope       = 'Universal'\\n                        Category         = 'Security'\\n                        MembersToExclude = @('Administrator')\\n                        Credential       = $DaCredentials\\n                        DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    ADOptionalFeature RecycleBin {\\n                        FeatureName                       = 'Recycle Bin Feature'\\n                        EnterpriseAdministratorCredential = $DaCredentials\\n                        ForestFQDN                        = $DomainDnsName\\n                        DependsOn                         = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    DnsServerConditionalForwarder MADForwarder {\\n                        Name             = $MadDNSName \\n                        MasterServers    = @($VPCDNS)\\n                        ReplicationScope = 'Forest'\\n                        Ensure           = 'Present'\\n                        DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    DnsServerADZone CreateReverseLookupZone {\\n                        Ensure           = 'Present'\\n                        Name             = $ZoneName\\n                        DynamicUpdate    = 'Secure'\\n                        ReplicationScope = 'Forest'\\n                        DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    DnsServerZoneAging DnsServerZoneAging-FL {\\n                        Name              = $DomainDnsName\\n                        Enabled           = $true\\n                        RefreshInterval   = 168\\n                        NoRefreshInterval = 168\\n                        DependsOn         = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                    DnsServerZoneAging DnsServerZoneAging-RL {\\n                        Name              = $ZoneName\\n                        Enabled           = $true\\n                        RefreshInterval   = 168\\n                        NoRefreshInterval = 168\\n                        DependsOn         = '[DnsServerADZone]CreateReverseLookupZone'\\n                    }                                     \\n                }\\n                DnsServerForwarder ForwardtoVPCDNS {\\n                    IsSingleInstance = 'Yes'\\n                    IPAddresses      = $VPCDNS\\n                    DependsOn        = '[WaitForADDomain]WaitForPrimaryDC'\\n                }\\n                If ($DeploymentType -eq 'RootDomainController' -or $DeploymentType -eq 'ChildDomainController') {\\n                    ADKDSKey KdsKey {\\n                        Ensure                   = 'Present'\\n                        EffectiveTime            = ((Get-Date).addhours(-10))\\n                        AllowUnsafeEffectiveTime = $True\\n                        DependsOn                = '[WaitForADDomain]WaitForPrimaryDC'\\n                    }\\n                }\\n                ADServicePrincipalName WSMAN-FQDN {\\n                    ServicePrincipalName = \\\"WSMAN/$InstanceNetBIOSName.$DomainDnsName\\\"\\n                    Account              = \\\"$InstanceNetBIOSName$\\\"\\n                    DependsOn            = '[WaitForADDomain]WaitForPrimaryDC'\\n                }\\n                ADServicePrincipalName WSMAN-SN {\\n                    ServicePrincipalName = \\\"WSMAN/$InstanceNetBIOSName\\\"\\n                    Account              = \\\"$InstanceNetBIOSName$\\\"\\n                    DependsOn            = '[WaitForADDomain]WaitForPrimaryDC'\\n                }\\n                DnsServerScavenging SetServerScavenging {\\n                    DnsServer          = 'localhost'\\n                    ScavengingState    = $true\\n                    ScavengingInterval = '7.00:00:00'\\n                    RefreshInterval    = '7.00:00:00'\\n                    NoRefreshInterval  = '7.00:00:00'\\n                    DependsOn          = '[WaitForADDomain]WaitForPrimaryDC'\\n                }\\n                DnsServerDiagnostics Diagnostics {\\n                    DnsServer                            = 'localhost'\\n                    Answers                              = $true\\n                    EnableLogFileRollover                = $true\\n                    EnableLoggingForLocalLookupEvent     = $true\\n                    EnableLoggingForPluginDllEvent       = $true\\n                    EnableLoggingForRecursiveLookupEvent = $true\\n                    EnableLoggingForRemoteServerEvent    = $true\\n                    EnableLoggingForServerStartStopEvent = $true\\n                    EnableLoggingForTombstoneEvent       = $true\\n                    EnableLoggingForZoneDataWriteEvent   = $true\\n                    EnableLoggingForZoneLoadingEvent     = $true\\n                    EnableLoggingToFile                  = $true\\n                    EventLogLevel                        = 7\\n                    FullPackets                          = $true\\n                    LogFilePath                          = 'C:\\\\DnsLogs\\\\dns.log'\\n                    MaxMBFileSize                        = 500000000\\n                    Notifications                        = $true\\n                    Queries                              = $true\\n                    QuestionTransactions                 = $true\\n                    ReceivePackets                       = $true\\n                    SaveLogsToPersistentStorage          = $true\\n                    SendPackets                          = $true\\n                    TcpPackets                           = $true\\n                    UdpPackets                           = $true\\n                    UnmatchedResponse                    = $true\\n                    Update                               = $true\\n                    UseSystemEventLog                    = $true\\n                    WriteThrough                         = $true\\n                }\\n            } Else {\\n                Computer JoinDomain {\\n                    Name       = $InstanceNetBIOSName\\n                    DomainName = $DomainDnsName\\n                    Credential = $DaCredentials\\n                    DependsOn  = '[WindowsFeature]GPMC'\\n                }\\n            }\\n        }\\n    }\\n    Write-Output 'Generating MOF file'\\n    $Null = ConfigInstance -OutputPath 'C:\\\\Temp\\\\ConfigInstance' -ConfigurationData $ConfigurationData\\n}\\n\\nFunction Invoke-DscStatusCheck {\\n    $LCMState = Get-DscLocalConfigurationManager -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'LCMState'\\n    If ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {\\n        Exit 3010\\n    } Else {\\n        Write-Output 'DSC Config Completed'\\n    }\\n}\\n\\n$Secret = Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}'\\n$EniConfig = Get-EniConfig\\n$DeploymentType = '{{DeploymentType}}'\\n\\nSwitch ($DeploymentType) {\\n    'RootDomainController' {\\n        Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'RootDomainController' -DnsInstanceIP $EniConfig.DnsIpAddress -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -LaCredentials $Secret.Credentials -MacAddress $EniConfig.MacAddress -MadDNSName '{{MadDNSName}}'-RestoreModeCredentials $Secret.Credentials -SiteName '{{global:REGION}}' -VPCCIDR '{{VPCCIDR}}'\\n    }\\n    'ChildDomainController' {\\n        $EaSecret = Get-SecretInfo -Domain '{{ParentDomainDNSName}}' -SecretArn '{{AdministratorSecretName}}'\\n        Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'ChildDomainController' -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -EaCredentials $EaSecret.DomainCredentials -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -LaCredentials $Secret.Credentials -MacAddress $EniConfig.MacAddress -ParentDomainDNSName '{{ParentDomainDNSName}}' -ParentInstanceIP '{{ParentInstanceIP}}' -RestoreModeCredentials $Secret.Credentials -VPCCIDR '{{VPCCIDR}}'\\n    }\\n    'AdditionalDomainController' {\\n        Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'AdditionalDomainController' -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InterfaceAlias $EniConfig.InterfaceAlias -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -LaCredentials $Secret.Credentials -MacAddress $EniConfig.MacAddress  -ParentInstanceIP '{{ParentInstanceIP}}' -RestoreModeCredentials $Secret.Credentials -VPCCIDR '{{VPCCIDR}}'\\n    } \\n    default {\\n        Set-DscConfiguration -DaCredentials $Secret.DomainCredentials -DeploymentType 'Member' -DomainDNSName '{{DomainDNSName}}' -DomainNetBIOSName '{{DomainNetBIOSName}}' -GatewayAddress $EniConfig.GatewayAddress -InstanceIP $EniConfig.IpAddress -InstanceNetBIOSName '{{ServerNetBIOSName}}' -MacAddress $EniConfig.MacAddress\\n    }\\n}\\n\\nStart-DscConfiguration 'C:\\\\Temp\\\\ConfigInstance' -Wait -Verbose -Force\\nInvoke-DscStatusCheck\\n\\nIf ($DeploymentType -eq 'RootDomainController') {\\n    Function Get-SecretInfo {\\n        [CmdletBinding()]\\n        Param (\\n            [Parameter(Mandatory = $True)][String]$Domain,\\n            [Parameter(Mandatory = $True)][String]$SecretArn\\n        )\\n\\n        Write-Output \\\"Getting $SecretArn Secret\\\"\\n        Try {\\n            $SecretContent = Get-SECSecretValue -SecretId $SecretArn -ErrorAction Stop | Select-Object -ExpandProperty 'SecretString' | ConvertFrom-Json -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get $SecretArn Secret $_\\\"\\n            Exit 1\\n        }\\n\\n        Write-Output 'Creating PSCredential object from Secret'\\n        $Username = $SecretContent.username\\n        $UserPassword = ConvertTo-SecureString ($SecretContent.password) -AsPlainText -Force\\n        $DomainCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' (\\\"$Domain\\\\$Username\\\", $UserPassword)\\n        $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ($Username, $UserPassword)\\n\\n        $Output = [PSCustomObject][Ordered]@{\\n            'Credentials'       = $Credentials\\n            'DomainCredentials' = $DomainCredentials\\n            'Username'          = $Username\\n            'UserPassword'      = $UserPassword\\n        }\\n\\n        Return $Output\\n    }\\n\\n    Function Invoke-TrustAction {\\n        [CmdletBinding()]\\n        Param(\\n            [parameter(Mandatory = $true)][String]$RemoteFQDN,\\n            [parameter(Mandatory = $true)][String]$TrustDirection,\\n            [parameter(Mandatory = $true)][String]$TrustPassword\\n        )\\n\\n        $LocalForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest() \\n        $AdTrustDir = [System.DirectoryServices.ActiveDirectory.TrustDirection]::$TrustDirection\\n        $Null = Clear-DnsServerCache -Force -ErrorAction SilentlyContinue\\n        $Null = Clear-DnsClientCache -ErrorAction SilentlyContinue\\n        $LocalForest.CreateLocalSideOfTrustRelationship($RemoteFQDN, $AdTrustDir, $TrustPassword)\\n        $LocalForest.VerifyOutboundTrustRelationship($RemoteFQDN)\\n        \u0026 ksetup.exe /SetEncTypeAttr $RemoteFQDN 'RC4-HMAC-MD5' 'AES128-CTS-HMAC-SHA1-96' 'AES256-CTS-HMAC-SHA1-96'\\n    }\\n\\n    Function Add-FSxOuAcl {\\n        [CmdletBinding()]\\n        param(\\n            [Parameter(Mandatory = $true)][string]$AclPath,\\n            [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,\\n            [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,\\n            [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,\\n            [Parameter(Mandatory = $false)][Guid]$ObjectGuid,\\n            [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,\\n            [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid\\n        )\\n\\n        Import-Module -Name 'ActiveDirectory' -Force\\n\\n        [Security.Principal.SecurityIdentifier]$IdentityReference = $IdentityReference | Select-Object -ExpandProperty 'Value'\\n\\n        $ArgumentList = $IdentityReference, $ActiveDirectoryRights, $AccessControlType, $ObjectGuid, $ActiveDirectorySecurityInheritance, $InheritedObjectGuid\\n        $ArgumentList = $ArgumentList.Where({ $_ -ne $Null })\\n\\n        Write-Output 'Creating ACL object'\\n        Try {\\n            $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create ACL object $_\\\"\\n            Exit 1\\n        }\\n\\n        Write-Output \\\"Getting ACL for $AclPath\\\"\\n        Try {\\n            $ObjectAcl = Get-Acl -Path \\\"AD:\\\\$AclPath\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get ACL for $AclPath $_\\\"\\n            Exit 1\\n        }\\n\\n        $ObjectAcl.AddAccessRule($Rule) \\n\\n        Write-Output \\\"Setting ACL for $AclPath\\\"\\n        Try {\\n            Set-Acl -AclObject $ObjectAcl -Path \\\"AD:\\\\$AclPath\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to set ACL for $AclPath $_\\\"\\n            Exit 1\\n        }\\n    }\\n\\n    If ('{{IntegrateFsxOnprem}}' -eq 'true') {\\n        Write-Output 'Getting domain information'\\n        Try {\\n            $Domain = Get-ADDomain -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get domain information $_\\\"\\n            Exit 1\\n        }\\n\\n        $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'\\n\\n        $FsxOU = \\\"OU=FSx,{{FsxOnpremParentOu}}\\\"\\n\\n        Write-Output 'Creating OU FSx'\\n        Try {\\n            New-ADOrganizationalUnit -Name 'FSx' -Path '{{FsxOnpremParentOu}}' -ProtectedFromAccidentalDeletion $True -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create OU FSx $_\\\"\\n            Exit 1\\n        }\\n\\n        $UserPassword = (Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}').UserPassword\\n\\n        $User = @{\\n            AccountPassword        = $UserPassword\\n            Name                   = 'FSxServiceAccount'\\n            DisplayName            = 'FSxServiceAccount'\\n            SamAccountName         = 'FSxServiceAccount'\\n            UserPrincipalName      = \\\"FSxServiceAccount@$FQDN\\\"\\n            KerberosEncryptionType = 'AES128', 'AES256'\\n            PasswordNeverExpires   = $True\\n            Enabled                = $True\\n            Path                   = $FsxOU \\n        }\\n\\n        Write-Output 'Creating FSxServiceAccount'\\n        Try {\\n            New-ADUser @User\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create FSxServiceAccount $_\\\"\\n            Exit 1\\n        }\\n\\n        Write-Output 'Creating FSx Admins Group'\\n        Try {\\n            New-ADGroup -DisplayName 'FSxAdmins' -GroupCategory 'Security' -GroupScope 'DomainLocal' -Name 'FSxAdmins' -Path $FsxOU -SamAccountName 'FSxAdmins'\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create FSx Admins Group $_\\\"\\n            Exit 1\\n        }\\n\\n        Write-Output 'Getting RootDSE information'\\n        Try {\\n            $RootDse = Get-ADRootDSE -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get RootDSE information $_\\\"\\n            Exit 1\\n        }\\n\\n        Write-Output 'Getting computer SchemaNamingContext'\\n        Try {\\n            [System.GUID]$ComputerNameGuid = (Get-ADObject -SearchBase $RootDse.SchemaNamingContext -Filter { lDAPDisplayName -eq 'computer' } -Properties 'schemaIDGUID' -ErrorAction Stop).schemaIDGUID\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get computer SchemaNamingContext $_\\\"\\n            Exit 1\\n        }\\n\\n        $ExtendedRightsMap = @{ }\\n\\n        Write-Output 'Getting ExtendedRightsMap'\\n        Try {\\n            $ErNamingContexts = Get-ADObject -SearchBase $RootDse.ConfigurationNamingContext -LDAPFilter '(\u0026(objectclass=controlAccessRight)(rightsguid=*))' -Properties displayName, rightsGuid -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get ExtendedRightsMap $_\\\"\\n            Exit 1\\n        }\\n\\n        ForEach ($ErNamingContext in $ErNamingContexts) {\\n            $ExtendedRightsMap[$ErNamingContext.displayName] = [System.GUID]$ErNamingContext.rightsGuid\\n        }\\n\\n        $NullGuid = [guid]'00000000-0000-0000-0000-000000000000'\\n\\n        $AclRules = @(\\n            @{\\n                ActiveDirectoryRights              = 'CreateChild, DeleteChild'\\n                AccessControlType                  = 'Allow'\\n                ObjectGUID                         = $ComputerNameGuid\\n                ActiveDirectorySecurityInheritance = 'All'\\n                InheritedObjectGuid                = $NullGuid\\n            },\\n            @{\\n                ActiveDirectoryRights              = 'ExtendedRight'\\n                AccessControlType                  = 'Allow'\\n                ObjectGUID                         = $ExtendedRightsMap['Validated write to service principal name']\\n                ActiveDirectorySecurityInheritance = 'Descendents'\\n                InheritedObjectGuid                = $ComputerNameGuid\\n            },\\n            @{\\n                ActiveDirectoryRights              = 'ExtendedRight'\\n                AccessControlType                  = 'Allow'\\n                ObjectGUID                         = $ExtendedRightsMap['Account Restrictions']\\n                ActiveDirectorySecurityInheritance = 'Descendents'\\n                InheritedObjectGuid                = $ComputerNameGuid\\n            },\\n            @{\\n                ActiveDirectoryRights              = 'ExtendedRight'\\n                AccessControlType                  = 'Allow'\\n                ObjectGUID                         = $ExtendedRightsMap['Reset Password']\\n                ActiveDirectorySecurityInheritance = 'Descendents'\\n                InheritedObjectGuid                = $ComputerNameGuid\\n            },\\n            @{\\n                ActiveDirectoryRights              = 'ExtendedRight'\\n                AccessControlType                  = 'Allow'\\n                ObjectGUID                         = $ExtendedRightsMap['Validated write to DNS host name']\\n                ActiveDirectorySecurityInheritance = 'Descendents'\\n                InheritedObjectGuid                = $ComputerNameGuid\\n            }\\n        )\\n\\n        Write-Output 'Getting FSxServiceAccount SID'\\n        Try {\\n            $IdentityReference = Get-ADUser -Identity 'FSxServiceAccount' -ErrorAction Stop | Select-Object -ExpandProperty 'SID'\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get FSxServiceAccount SID $_\\\"\\n            Exit 1\\n        }\\n\\n        Foreach ($AclRule in $AclRules) {\\n            Add-FSxOuAcl -AclPath $FsxOU -IdentityReference $IdentityReference -ActiveDirectoryRights $AclRule.ActiveDirectoryRights -AccessControlType $AclRule.AccessControlType -ObjectGUID $AclRule.ObjectGUID -ActiveDirectorySecurityInheritance $AclRule.ActiveDirectorySecurityInheritance -InheritedObjectGuid $AclRule.InheritedObjectGuid\\n        }\\n    }\\n\\n    $TrustDirection = '{{TrustDirection}}'\\n    Switch ($TrustDirection) {\\n        'Two-Way' {\\n            $TrustDirOnprem = 'Bidirectional'\\n        }\\n        'One-Way: Outgoing' {\\n            $TrustDirOnprem = 'Inbound'\\n        }\\n        'One-Way: Incoming' {\\n            $TrustDirOnprem = 'Outbound'\\n        }\\n        Default { Throw 'InvalidArgument: Invalid value is passed for parameter TrustDirection' }\\n    }\\n\\n    $TrustPassword = (Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{TrustSecretName}}').UserPassword\\n\\n    Write-Output 'Creating Onprem side of trust.'\\n    Invoke-TrustAction -RemoteFQDN '{{MadDNSName}}' -TrustPassword $TrustPassword $TrustDirOnprem\\n}\\n\\nIf ($DeploymentType -eq 'EnterpriseCAManagementInstance' -or $DeploymentType -eq 'ManagementInstance') {\\n    $IP = '{{VPCCIDR}}'.Split('/')[0]\\n\\n    [System.Collections.ArrayList]$IPArray = $IP -Split \\\"\\\\.\\\"\\n\\n    $VPCDNS = $IPArray[0, 1, 2] + 2 -Join \\\".\\\"\\n\\n    $TrustDirection = '{{TrustDirection}}'\\n    Switch ($TrustDirection) {\\n        'Two-Way' {\\n            $TrustDirMAD = 'Two-Way'\\n        }\\n        'One-Way: Outgoing' {\\n            $TrustDirMAD = 'One-Way: Outgoing'\\n        }\\n        'One-Way: Incoming' {\\n            $TrustDirMAD = 'One-Way: Incoming'\\n        }\\n        Default { Throw 'InvalidArgument: Invalid value is passed for parameter TrustDirection' }\\n    }\\n\\n    $TrustTypeForest = New-Object -TypeName 'Amazon.DirectoryService.TrustType' -ArgumentList 'Forest'\\n    $TrustDir = New-Object -TypeName 'Amazon.DirectoryService.TrustDirection' -ArgumentList $TrustDirMAD\\n    $SelectiveAuthDis = New-Object -TypeName 'Amazon.DirectoryService.SelectiveAuth' -ArgumentList 'Disabled'\\n    $TrustPassword = (Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}').UserPassword\\n\\n    Write-Output 'Creating trust between MAD and Onprem.'\\n    Try {\\n        $Trust = New-DSTrust -DirectoryId '{{MadDirectoryID}}' -ConditionalForwarderIpAddr $VPCDNS -RemoteDomainName '{{OnpremDomainDNSName}}' -SelectiveAuth $SelectiveAuthDis -TrustDirection $TrustDir -TrustType $TrustTypeForest -TrustPassword $TrustPassword\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to create trust between MAD and Onprem. $_\\\"\\n        Exit 1\\n    }\\n\\n    $Counter = 0\\n    Do {\\n        Try {\\n            $Truststate = Get-DSTrust -DirectoryId '{{MadDirectoryID}}' -TrustId $Trust -ErrorAction SilentlyContinue | Select-Object -ExpandProperty 'TrustState' | Select-Object -ExpandProperty 'Value'\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get trust state $_\\\"\\n            $Truststate = $Null\\n        }\\n        If ($Truststate -ne 'Verified' -or $Truststate -eq 'Failed') {\\n            $Counter ++\\n            Write-Output 'Trust not Verified, sleeping 10 seconds and will try again.'\\n            Start-Sleep -Seconds 10\\n        }\\n    } Until ($Truststate -eq 'Verified' -or $Truststate -eq 'Failed' -or $Counter -eq 30)\\n\\n    If ($Truststate -eq 'Failed' -or $Counter -eq 30) {\\n        Write-Output 'Trust failed to create or never went Verified in 5 minutes'\\n        Exit 1\\n    }\\n}\"\r\n            },\r\n            \"CloudWatchOutputConfig\": {\r\n              \"CloudWatchOutputEnabled\": true,\r\n              \"CloudWatchLogGroupName\": \"/aws/Demo/SSM-Baseline-7ebugdhf\"\r\n            },\r\n            \"InstanceIds\": [\r\n              \"{{InstanceId.InstanceId}}\"\r\n            ],\r\n            \"DocumentName\": \"AWS-RunPowerShellScript\"\r\n          },\r\n          \"name\": \"configureInstance\",\r\n          \"action\": \"aws:runCommand\",\r\n          \"onFailure\": \"step:signalFailure\",\r\n          \"nextStep\": \"DeployPKI\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Choices\": [\r\n              {\r\n                \"StringEquals\": \"Yes\",\r\n                \"Variable\": \"{{DeployPki}}\",\r\n                \"NextStep\": \"runPkiSsmAuto\"\r\n              },\r\n              {\r\n                \"StringEquals\": \"No\",\r\n                \"Variable\": \"{{DeployPki}}\",\r\n                \"NextStep\": \"runAuditPolSsmAuto\"\r\n              }\r\n            ]\r\n          },\r\n          \"name\": \"DeployPKI\",\r\n          \"action\": \"aws:branch\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"RuntimeParameters\": {\r\n              \"ServerNetBIOSName\": [\r\n                \"{{ServerNetBIOSName}}\"\r\n              ],\r\n              \"DomainType\": [\r\n                \"{{DomainType}}\"\r\n              ],\r\n              \"DomainNetBIOSName\": [\r\n                \"{{DomainNetBIOSName}}\"\r\n              ],\r\n              \"VPCCIDR\": [\r\n                \"{{VPCCIDR}}\"\r\n              ],\r\n              \"AdministratorSecretName\": [\r\n                \"{{AdministratorSecretName}}\"\r\n              ],\r\n              \"DeploymentType\": [\r\n                \"{{DeploymentType}}\"\r\n              ],\r\n              \"StackName\": [\r\n                \"{{StackName}}\"\r\n              ]\r\n            },\r\n            \"DocumentName\": \"SSM-Pki-7ebugdhf\"\r\n          },\r\n          \"name\": \"runPkiSsmAuto\",\r\n          \"action\": \"aws:executeAutomation\",\r\n          \"onFailure\": \"step:signalFailure\",\r\n          \"nextStep\": \"runAuditPolSsmAuto\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"RuntimeParameters\": {\r\n              \"ServerNetBIOSName\": [\r\n                \"{{ServerNetBIOSName}}\"\r\n              ],\r\n              \"ServerRole\": [\r\n                \"{{ServerRole}}\"\r\n              ],\r\n              \"VPCCIDR\": [\r\n                \"{{VPCCIDR}}\"\r\n              ],\r\n              \"StackName\": [\r\n                \"{{StackName}}\"\r\n              ]\r\n            },\r\n            \"DocumentName\": \"SSM-AuditPol-7ebugdhf\"\r\n          },\r\n          \"name\": \"runAuditPolSsmAuto\",\r\n          \"action\": \"aws:executeAutomation\",\r\n          \"onFailure\": \"step:signalFailure\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Choices\": [\r\n              {\r\n                \"Not\": {\r\n                  \"StringEquals\": \"\",\r\n                  \"Variable\": \"{{StackName}}\"\r\n                },\r\n                \"NextStep\": \"signalSuccess\"\r\n              },\r\n              {\r\n                \"StringEquals\": \"\",\r\n                \"Variable\": \"{{StackName}}\",\r\n                \"NextStep\": \"sleepEnd\"\r\n              }\r\n            ]\r\n          },\r\n          \"name\": \"cfnSignalEnd\",\r\n          \"action\": \"aws:branch\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Status\": \"SUCCESS\",\r\n            \"UniqueId\": \"{{InstanceId.InstanceId}}\",\r\n            \"LogicalResourceId\": \"{{LogicalResourceId}}\",\r\n            \"Service\": \"cloudformation\",\r\n            \"Api\": \"SignalResource\",\r\n            \"StackName\": \"{{StackName}}\"\r\n          },\r\n          \"name\": \"signalSuccess\",\r\n          \"action\": \"aws:executeAwsApi\",\r\n          \"isEnd\": true\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Duration\": \"PT1S\"\r\n          },\r\n          \"name\": \"sleepEnd\",\r\n          \"action\": \"aws:sleep\",\r\n          \"isEnd\": true\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Status\": \"FAILURE\",\r\n            \"UniqueId\": \"{{InstanceId.InstanceId}}\",\r\n            \"LogicalResourceId\": \"{{LogicalResourceId}}\",\r\n            \"Service\": \"cloudformation\",\r\n            \"Api\": \"SignalResource\",\r\n            \"StackName\": \"{{StackName}}\"\r\n          },\r\n          \"name\": \"signalFailure\",\r\n          \"action\": \"aws:executeAwsApi\"\r\n        }\r\n      ]\r\n    }\r\n",
            "created_date": "2022-07-22T21:34:31Z",
            "default_version": "1",
            "description": "Deploy AD with SSM Automation",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "18ebc5209f934fec572ee793c3cf9c8fecb0c1f5f1cc069762c5f3743ad5a426",
            "hash_type": "Sha256",
            "id": "SSM-Baseline-7ebugdhf",
            "latest_version": "1",
            "name": "SSM-Baseline-7ebugdhf",
            "owner": "156285977455",
            "parameter": [
              {
                "default_value": "",
                "description": "Role server will be (DomainController or CertificateAuthority)",
                "name": "ServerRole",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Trust Direction from AWS Managed Microsoft AD to on-premises domain.",
                "name": "TrustDirection",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local",
                "name": "DomainDNSName",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Directory ID of MAD domain",
                "name": "MadDirectoryID",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES",
                "name": "DomainNetBIOSName",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Parent OU DN for Amazon FSX for Windows deployment with On-Premises AD",
                "name": "FsxOnpremParentOu",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Type of workload being deployed",
                "name": "DeploymentType",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "AWS Secrets Parameter Name",
                "name": "TrustSecretName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)",
                "name": "ServerNetBIOSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "CloudFormation Resource ID",
                "name": "LogicalResourceId",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Type of domain PKI will be integrated with",
                "name": "DomainType",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Fully qualified domain name (FQDN) of the MAD domain e.g. corp.example.com",
                "name": "MadDNSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "CIDR Block for the VPC",
                "name": "VPCCIDR",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Fully qualified domain name (FQDN) of the forest root domain e.g. onpremises.local",
                "name": "ParentDomainDNSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "AWS Secrets Parameter Name",
                "name": "AdministratorSecretName",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Deploy \u0026 Integrate Amazon FSX for Windows with On-Premises AD",
                "name": "IntegrateFsxOnprem",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Deploy an Enterprise CA",
                "name": "DeployPki",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
                "name": "OnpremDomainDNSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Stack Name Input for cfn resource signal",
                "name": "StackName",
                "type": "String"
              },
              {
                "default_value": "placeholder",
                "description": "IP Address of the forest root domain controller",
                "name": "ParentInstanceIP",
                "type": "String"
              }
            ],
            "permissions": null,
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": null,
            "tags_all": {},
            "target_type": "",
            "version_name": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_document",
      "name": "ssm_pki",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ssm:us-east-2:156285977455:document/SSM-Pki-7ebugdhf",
            "attachments_source": [],
            "content": "    {\r\n      \"schemaVersion\": \"0.3\",\r\n      \"description\": \"Deploy Enterpise CA\",\r\n      \"parameters\": {\r\n        \"ServerNetBIOSName\": {\r\n          \"description\": \"NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DomainType\": {\r\n          \"description\": \"Type of domain PKI will be integrated with\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DomainNetBIOSName\": {\r\n          \"description\": \"NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"VPCCIDR\": {\r\n          \"description\": \"CIDR Block for the VPC\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"AdministratorSecretName\": {\r\n          \"description\": \"AWS Secrets Parameter Name\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"DeploymentType\": {\r\n          \"description\": \"Type of workload being deployed\",\r\n          \"type\": \"String\"\r\n        },\r\n        \"StackName\": {\r\n          \"description\": \"Stack Name Input for cfn resource signal\",\r\n          \"type\": \"String\"\r\n        }\r\n      },\r\n      \"mainSteps\": [\r\n        {\r\n          \"outputs\": [\r\n            {\r\n              \"Type\": \"String\",\r\n              \"Name\": \"InstanceId\",\r\n              \"Selector\": \"$.Reservations[0].Instances[0].InstanceId\"\r\n            }\r\n          ],\r\n          \"inputs\": {\r\n            \"Filters\": [\r\n              {\r\n                \"Values\": [\r\n                  \"{{ServerNetBIOSName}}\"\r\n                ],\r\n                \"Name\": \"tag:Name\"\r\n              },\r\n              {\r\n                \"Values\": [\r\n                  \"{{StackName}}\"\r\n                ],\r\n                \"Name\": \"tag:aws:cloudformation:stack-name\"\r\n              },\r\n              {\r\n                \"Values\": [\r\n                  \"running\"\r\n                ],\r\n                \"Name\": \"instance-state-name\"\r\n              }\r\n            ],\r\n            \"Service\": \"ec2\",\r\n            \"Api\": \"DescribeInstances\"\r\n          },\r\n          \"name\": \"InstanceId\",\r\n          \"action\": \"aws:executeAwsApi\",\r\n          \"nextStep\": \"configureInstance\"\r\n        },\r\n        {\r\n          \"inputs\": {\r\n            \"Parameters\": {\r\n              \"commands\": \"Function Get-SecretInfo {\\n    [CmdletBinding()]\\n    Param (\\n        [Parameter(Mandatory = $True)][String]$Domain,\\n        [Parameter(Mandatory = $True)][String]$SecretArn\\n    )\\n\\n    Write-Output \\\"Getting $SecretArn Secret\\\"\\n    Try {\\n        $SecretContent = Get-SECSecretValue -SecretId $SecretArn -ErrorAction Stop | Select-Object -ExpandProperty 'SecretString' | ConvertFrom-Json -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get $SecretArn Secret $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Creating PSCredential object from Secret'\\n    $Username = $SecretContent.username\\n    $UserPassword = ConvertTo-SecureString ($SecretContent.password) -AsPlainText -Force\\n    $DomainCredentials = New-Object -TypeName 'System.Management.Automation.PSCredential' (\\\"$Domain\\\\$Username\\\", $UserPassword)\\n    $Credentials = New-Object -TypeName 'System.Management.Automation.PSCredential' ($Username, $UserPassword)\\n\\n    $Output = [PSCustomObject][Ordered]@{\\n        'Credentials'       = $Credentials\\n        'DomainCredentials' = $DomainCredentials\\n        'Username'          = $Username\\n        'UserPassword'      = $UserPassword\\n    }\\n\\n    Return $Output\\n}\\n\\nFunction Invoke-EnterpriseCaConfig {\\n    [CmdletBinding()]\\n    Param (\\n        [Parameter(Mandatory = $true)][System.Management.Automation.PSCredential]$Credentials,\\n        [Parameter(Mandatory = $true)][String]$DomainType,\\n        [Parameter(Mandatory = $true)][String]$EntCaCommonName,\\n        [Parameter(Mandatory = $true)][ValidateSet('SHA256', 'SHA384', 'SHA512')][String]$EntCaHashAlgorithm,\\n        [Parameter(Mandatory = $true)][ValidateSet('2048', '4096')][String]$EntCaKeyLength,\\n        [Parameter(Mandatory = $true)][String]$EntCaValidityPeriodUnits,\\n        [Parameter(Mandatory = $true)][String]$VPCCIDR\\n    )\\n\\n    $CompName = $env:COMPUTERNAME\\n    $Folders = @(\\n        'D:\\\\Pki\\\\Req',\\n        'D:\\\\ADCS\\\\DB',\\n        'D:\\\\ADCS\\\\Log'\\n    )\\n    $FilePath = 'D:\\\\Pki'\\n    $Principals = @(\\n        'ANONYMOUS LOGON',\\n        'EVERYONE'\\n    )\\n\\n    Write-Output 'Installing Windows Features'\\n    Try {\\n        Install-WindowsFeature -Name 'Adcs-Cert-Authority', 'RSAT-AD-Tools', 'RSAT-DNS-Server', 'Web-WebServer' -IncludeManagementTools -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to install Windows Features $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Getting AD domain'\\n    Try {\\n        $Domain = Get-ADDomain -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get AD domain $_\\\"\\n        Exit 1\\n    }\\n    $BaseDn = $Domain | Select-Object -ExpandProperty 'DistinguishedName'\\n    $FQDN = $Domain | Select-Object -ExpandProperty 'DNSRoot'\\n    $Netbios = $Domain | Select-Object -ExpandProperty 'NetBIOSName'\\n\\n    Write-Output 'Getting a domain controller to perform actions against'\\n    Try {\\n        $DC = Get-ADDomainController -Discover -ForceDiscover -ErrorAction Stop | Select-Object -ExpandProperty 'HostName'\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to get a domain controller $_\\\"\\n        Exit 1\\n    }\\n\\n    $Counter = 0\\n    Do {\\n        $ARecordPresent = Resolve-DnsName -Name \\\"$CompName.$FQDN\\\" -DnsOnly -Server $DC -ErrorAction SilentlyContinue\\n        If (-not $ARecordPresent) {\\n            $Counter ++\\n            Write-Output 'A record missing, registering it.'\\n            Register-DnsClient\\n            If ($Counter -gt '1') {\\n                Start-Sleep -Seconds 10\\n            }\\n        }\\n    } Until ($ARecordPresent -or $Counter -eq 12)\\n\\n    If ($Counter -ge 12) {\\n        Write-Output 'A record never created'\\n        Exit 1\\n    }\\n\\n    If ($DomainType -eq 'AWSManagedAD') {\\n        Set-CredSSP -Action 'Enable'\\n    }\\n\\n    Write-Output 'Creating PKI CNAME record'\\n    $Counter = 0\\n    Do {\\n        $CnameRecordPresent = Resolve-DnsName -Name \\\"PKI.$FQDN\\\" -DnsOnly -Server $DC -ErrorAction SilentlyContinue\\n        If (-not $CnameRecordPresent) {\\n            $Counter ++\\n            Write-Output 'CNAME record missing, creating it'\\n            $HostNameAlias = \\\"$CompName.$FQDN\\\"\\n            If ($DomainType -eq 'AWSManagedAD') {\\n                Invoke-Command -Authentication 'CredSSP' -ComputerName $env:COMPUTERNAME -Credential $Credentials -ScriptBlock { Add-DnsServerResourceRecordCName -Name 'PKI' -ComputerName $using:DC -HostNameAlias $using:HostNameAlias -ZoneName $using:FQDN }\\n            } Else {\\n                Invoke-Command -ComputerName $DC -Credential $Credentials -ScriptBlock { Add-DnsServerResourceRecordCName -Name 'PKI' -HostNameAlias $using:HostNameAlias -ZoneName $using:FQDN }\\n            }\\n\\n            If ($Counter -gt '1') {\\n                Start-Sleep -Seconds 10\\n            }\\n        }\\n    } Until ($CnameRecordPresent -or $Counter -eq 12)\\n\\n    If ($DomainType -eq 'AWSManagedAD') {  \\n        Set-CredSSP -Action 'Disable'\\n    }\\n\\n    If ($Counter -ge 12) {\\n        Write-Output 'CNAME record never created'\\n        Exit 1\\n    }\\n\\n    Write-Output 'Creating PKI folders'\\n    Foreach ($Folder in $Folders) {\\n        $PathPresent = Test-Path -Path $Folder -ErrorAction SilentlyContinue\\n        If (-not $PathPresent) {\\n            Try {\\n                $Null = New-Item -Path $Folder -Type 'Directory' -ErrorAction Stop\\n            } Catch [System.Exception] {\\n                Write-Output \\\"Failed to create $Folder directory $_\\\"\\n                Exit 1\\n            }\\n        } \\n    }\\n\\n    Write-Output 'Example CPS statement' | Out-File 'D:\\\\Pki\\\\cps.txt'\\n\\n    Write-Output 'Sharing PKI folder'\\n    $SharePresent = Get-SmbShare -Name 'Pki' -ErrorAction SilentlyContinue\\n    If (-not $SharePresent) {\\n        Try {\\n            $Null = New-SmbShare -Name 'Pki' -Path 'D:\\\\Pki' -FullAccess 'SYSTEM', \\\"$Netbios\\\\Domain Admins\\\" -ChangeAccess \\\"$Netbios\\\\Cert Publishers\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create PKI SMB Share $_\\\"\\n            Exit 1\\n        }\\n    }\\n\\n    Write-Output 'Creating PKI IIS virtual directory'\\n    $VdPresent = Get-WebVirtualDirectory -Name 'Pki'\\n    If (-not $VdPresent) {\\n        Try {\\n            $Null = New-WebVirtualDirectory -Site 'Default Web Site' -Name 'Pki' -PhysicalPath 'D:\\\\Pki' -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create PKI IIS virtual directory $_\\\"\\n            Exit 1\\n        }\\n    }\\n\\n    Write-Output 'Setting PKI IIS virtual directory requestFiltering'\\n    Try {\\n        Set-WebConfigurationProperty -Filter '/system.webServer/security/requestFiltering' -Name 'allowDoubleEscaping' -Value 'true' -PSPath 'IIS:\\\\Sites\\\\Default Web Site\\\\Pki' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to set PKI IIS virtual directory requestFiltering $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Setting PKI IIS virtual directory directoryBrowse'\\n    Try {\\n        Set-WebConfigurationProperty -Filter '/system.webServer/directoryBrowse' -Name 'enabled' -Value 'true' -PSPath 'IIS:\\\\Sites\\\\Default Web Site\\\\Pki' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to set PKI IIS virtual directory directoryBrowse $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Setting PKI folder file system ACLs'\\n    Foreach ($Princ in $Principals) {\\n        $Principal = New-Object -TypeName 'System.Security.Principal.NTAccount'($Princ)\\n        $Perms = [System.Security.AccessControl.FileSystemRights]'Read, ReadAndExecute, ListDirectory'\\n        $Inheritance = [System.Security.AccessControl.InheritanceFlags]::'ContainerInherit', 'ObjectInherit'\\n        $Propagation = [System.Security.AccessControl.PropagationFlags]::'None'\\n        $Access = [System.Security.AccessControl.AccessControlType]::'Allow'\\n        $AccessRule = New-Object -TypeName 'System.Security.AccessControl.FileSystemAccessRule'($Principal, $Perms, $Inheritance, $Propagation, $Access) \\n        Try {\\n            $Acl = Get-Acl -Path $FilePath -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get ACL for PKI directory $_\\\"\\n            Exit 1\\n        }\\n        $Acl.AddAccessRule($AccessRule)\\n        Try {\\n            Set-Acl -Path $FilePath -AclObject $Acl -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to set ACL for PKI directory $_\\\"\\n            Exit 1\\n        }\\n    }\\n\\n    Write-Output 'Resetting IIS service'\\n    Try {\\n        \u0026 iisreset.exe \u003e $null\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to reset IIS service $_\\\"\\n        Exit 1\\n    }\\n\\n    $URL = \\\"URL=http://$CompName.$FQDN/pki/cps.txt\\\"\\n\\n    $Inf = @(\\n        '[Version]',\\n        'Signature=\\\"$Windows NT$\\\"',\\n        '[PolicyStatementExtension]',\\n        'Policies=InternalPolicy',\\n        '[InternalPolicy]',\\n        'OID=1.2.3.4.1455.67.89.5', \\n        'Notice=\\\"Legal Policy Statement\\\"',\\n        $URL\\n        '[Certsrv_Server]',\\n        \\\"RenewalKeyLength=$EntCaKeyLength\\\",\\n        'RenewalValidityPeriod=Years',\\n        \\\"RenewalValidityPeriodUnits=$EntCaValidityPeriodUnits\\\",\\n        'CRLPeriod=Weeks',\\n        'CRLPeriodUnits=1',\\n        'CRLDeltaPeriod=Days',  \\n        'CRLDeltaPeriodUnits=0',\\n        'LoadDefaultTemplates=0',\\n        'AlternateSignatureAlgorithm=0',\\n        '[CRLDistributionPoint]',\\n        '[AuthorityInformationAccess]'\\n    )\\n\\n    Write-Output 'Creating CAPolicy.inf'\\n    Try {\\n        $Inf | Out-File -FilePath 'C:\\\\Windows\\\\CAPolicy.inf' -Encoding 'ascii'\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to create CAPolicy.inf $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Installing Enterprise Root CA'\\n    Try {\\n        $Null = Install-AdcsCertificationAuthority -CAType 'EnterpriseRootCA' -CACommonName $EntCaCommonName -KeyLength $EntCaKeyLength -HashAlgorithm $EntCaHashAlgorithm -CryptoProviderName 'RSA#Microsoft Software Key Storage Provider' -ValidityPeriod 'Years' -ValidityPeriodUnits $EntCaValidityPeriodUnits -DatabaseDirectory 'D:\\\\ADCS\\\\DB' -LogDirectory 'D:\\\\ADCS\\\\Log' -Force -ErrorAction Stop -Credential $Credentials\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to install Enterprise Root CA $_\\\"\\n        Exit 1\\n    }\\n\\n    $CDP = \\\"http://$CompName.$FQDN/pki/\u003cCaName\u003e\u003cCRLNameSuffix\u003e\u003cDeltaCRLAllowed\u003e.crl\\\"\\n    $AIA = \\\"http://$CompName.$FQDN/pki/\u003cServerDNSName\u003e_\u003cCaName\u003e\u003cCertificateName\u003e.crt\\\"\\n\\n    Write-Output 'Configuring CRL distro points'\\n    Try {\\n        $Null = Get-CACRLDistributionPoint | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CACRLDistributionPoint -Force -ErrorAction Stop\\n        $Null = Add-CACRLDistributionPoint -Uri $CDP -AddToCertificateCDP -Force -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to configure CRL Distro $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Configuring AIA distro points'\\n    Try {\\n        $Null = Get-CAAuthorityInformationAccess | Where-Object { $_.Uri -like '*ldap*' -or $_.Uri -like '*http*' -or $_.Uri -like '*file*' } -ErrorAction Stop | Remove-CAAuthorityInformationAccess -Force -ErrorAction Stop\\n        $Null = Add-CAAuthorityInformationAccess -AddToCertificateAia -Uri $AIA -Force -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to configure AIA Distro $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Configuring Enterprise CA'\\n    \u0026 certutil.exe -setreg CA\\\\CRLOverlapPeriodUnits '12' \u003e $null\\n    \u0026 certutil.exe -setreg CA\\\\CRLOverlapPeriod 'Hours' \u003e $null\\n    \u0026 certutil.exe -setreg CA\\\\ValidityPeriodUnits '5' \u003e $null\\n    \u0026 certutil.exe -setreg CA\\\\ValidityPeriod 'Years' \u003e $null\\n    \u0026 certutil.exe -setreg CA\\\\AuditFilter '127' \u003e $null\\n    \u0026 auditpol.exe /set /subcategory:'Certification Services' /failure:enable /success:enable \u003e $null\\n\\n    Write-Output 'Restarting CA service'\\n    Try {\\n        Restart-Service -Name 'certsvc' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to restart CA service $_\\\"\\n        Exit 1\\n    }\\n\\n    Start-Sleep -Seconds 10\\n\\n    Write-Output 'Publishing CRL'\\n    \u0026 certutil.exe -crl \u003e $null\\n\\n    Write-Output 'Copying CRL to PKI folder'\\n    Try {\\n        Copy-Item -Path 'C:\\\\Windows\\\\System32\\\\CertSrv\\\\CertEnroll\\\\*.cr*' -Destination 'D:\\\\Pki\\\\' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to copy CRL to PKI folder  $_\\\"\\n        Exit 1\\n    }\\n\\n    Write-Output 'Restarting CA service'\\n    Try {\\n        Restart-Service -Name 'certsvc' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to restart CA service $_\\\"\\n    }\\n\\n    Write-Output 'Creating LdapOverSSL certificate template'\\n    New-KerbCertTemplate -BaseDn $BaseDn -Credential $Credentials -Server $DC\\n\\n    If ($DomainType -eq 'SelfManagedAD') {  \\n        Write-Output 'Getting domain controllers'\\n        Try {\\n            $DomainControllers = Get-ADComputer -SearchBase \\\"OU=Domain Controllers,$BaseDn\\\" -Filter * | Select-Object -ExpandProperty 'DNSHostName'\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get domain controllers $_\\\"\\n        }\\n\\n        Write-Output 'Running Group Policy update on all domain controllers'\\n        Foreach ($DomainController in $DomainControllers) {\\n            Invoke-Command -ComputerName $DomainController -Credential $Credentials -ScriptBlock { Invoke-GPUpdate -RandomDelayInMinutes '0' -Force }\\n        }\\n    }\\n\\n    Write-Output 'Creating Update CRL scheduled task'\\n    Try {\\n        $ScheduledTaskAction = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument '\u0026 certutil.exe -crl; Copy-Item -Path C:\\\\Windows\\\\System32\\\\CertSrv\\\\CertEnroll\\\\*.cr* -Destination D:\\\\Pki\\\\'\\n        $ScheduledTaskTrigger = New-ScheduledTaskTrigger -Daily -DaysInterval '5' -At '12am' -ErrorAction Stop\\n        $ScheduledTaskPrincipal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType 'ServiceAccount' -RunLevel 'Highest' -ErrorAction Stop\\n        $ScheduledTaskSettingsSet = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -Compatibility 'Win8' -ExecutionTimeLimit (New-TimeSpan -Hours '1') -ErrorAction Stop\\n        $ScheduledTask = New-ScheduledTask -Action $ScheduledTaskAction -Principal $ScheduledTaskPrincipal -Trigger $ScheduledTaskTrigger -Settings $ScheduledTaskSettingsSet -Description 'Updates CRL to Local Pki Folder' -ErrorAction Stop\\n        $Null = Register-ScheduledTask 'Update CRL' -InputObject $ScheduledTask -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to register Update CRL scheduled task $_\\\"\\n    }\\n\\n    Write-Output 'Running CRL scheduled task'\\n    Try {\\n        Start-ScheduledTask -TaskName 'Update CRL' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to run CRL scheduled task $_\\\"\\n    }\\n\\n    Write-Output 'Restarting CA service'\\n    Try {\\n        Restart-Service -Name 'certsvc' -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to restart CA service $_\\\"\\n    }\\n\\n    Write-Output 'Setting Windows Firewall WinRM Public rule to allow VPC CIDR traffic'\\n    Try {\\n        Set-NetFirewallRule -Name 'WINRM-HTTP-In-TCP-PUBLIC' -RemoteAddress $VPCCIDR -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to allow WinRM traffic from VPC CIDR $_\\\"\\n    }\\n}\\n\\nFunction Set-CredSSP {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][ValidateSet('Enable', 'Disable')][string]$Action\\n    )\\n\\n    $RootKey = 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows'\\n    $CredDelKey = 'CredentialsDelegation'\\n    $FreshCredKey = 'AllowFreshCredentials'\\n    $FreshCredKeyNTLM = 'AllowFreshCredentialsWhenNTLMOnly'\\n\\n    Switch ($Action) {\\n        'Enable' {\\n            Write-Output 'Enabling CredSSP'\\n            $CredDelKeyPresent = Test-Path -Path (Join-Path -Path \\\"Registry::$RootKey\\\" -ChildPath $CredDelKey) -ErrorAction SilentlyContinue\\n            If (-not $CredDelKeyPresent) {\\n                Write-Output \\\"Setting CredSSP registry entry $CredDelKey\\\"\\n                Try {\\n                    $CredDelPath = New-Item -Path \\\"Registry::$RootKey\\\" -Name $CredDelKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'\\n                } Catch [System.Exception] {\\n                    Write-Output \\\"Failed to create CredSSP registry entry $CredDelKey $_\\\"\\n                    Remove-Item -Path (Join-Path -Path \\\"Registry::$RootKey\\\" -ChildPath $CredDelKey) -Force -Recurse\\n                    Exit 1\\n                }\\n            } Else {\\n                $CredDelPath = Join-Path -Path $RootKey -ChildPath $CredDelKey\\n            }\\n\\n            $FreshCredKeyPresent = Test-Path -Path (Join-Path -Path \\\"Registry::$CredDelPath\\\" -ChildPath $FreshCredKey) -ErrorAction SilentlyContinue\\n            If (-not $FreshCredKeyPresent) {\\n                Write-Output \\\"Setting CredSSP registry entry $FreshCredKey\\\"\\n                Try {\\n                    $FreshCredKeyPath = New-Item -Path \\\"Registry::$CredDelPath\\\" -Name $FreshCredKey -ErrorAction Stop | Select-Object -ExpandProperty 'Name'\\n                } Catch [System.Exception] {\\n                    Write-Output \\\"Failed to create CredSSP registry entry $FreshCredKey $_\\\"\\n                    Remove-Item -Path (Join-Path -Path \\\"Registry::$RootKey\\\" -ChildPath $CredDelKey) -Force -Recurse\\n                    Exit 1\\n                }\\n            } Else {\\n                $FreshCredKeyPath = Join-Path -Path $CredDelPath -ChildPath $FreshCredKey\\n            }\\n\\n            $FreshCredKeyNTLMPresent = Test-Path -Path (Join-Path -Path \\\"Registry::$CredDelPath\\\" -ChildPath $FreshCredKeyNTLM) -ErrorAction SilentlyContinue\\n            If (-not $FreshCredKeyNTLMPresent) {\\n                Write-Output \\\"Setting CredSSP registry entry $FreshCredKeyNTLM\\\"\\n                Try {\\n                    $FreshCredKeyNTLMPath = New-Item -Path \\\"Registry::$CredDelPath\\\" -Name $FreshCredKeyNTLM -ErrorAction Stop | Select-Object -ExpandProperty 'Name'\\n                } Catch [System.Exception] {\\n                    Write-Output \\\"Failed to create CredSSP registry entry $FreshCredKeyNTLM $_\\\"\\n                    Remove-Item -Path (Join-Path -Path \\\"Registry::$RootKey\\\" -ChildPath $CredDelKey) -Force -Recurse\\n                    Exit 1\\n                }\\n            } Else {\\n                $FreshCredKeyNTLMPath = Join-Path -Path $CredDelPath -ChildPath $FreshCredKeyNTLM\\n            }\\n\\n            Try {\\n                $Null = Set-ItemProperty -Path \\\"Registry::$CredDelPath\\\" -Name 'AllowFreshCredentials' -Value '1' -Type 'Dword' -Force -ErrorAction Stop\\n                $Null = Set-ItemProperty -Path \\\"Registry::$CredDelPath\\\" -Name 'ConcatenateDefaults_AllowFresh' -Value '1' -Type 'Dword' -Force -ErrorAction Stop\\n                $Null = Set-ItemProperty -Path \\\"Registry::$CredDelPath\\\" -Name 'AllowFreshCredentialsWhenNTLMOnly' -Value '1' -Type 'Dword' -Force -ErrorAction Stop\\n                $Null = Set-ItemProperty -Path \\\"Registry::$CredDelPath\\\" -Name 'ConcatenateDefaults_AllowFreshNTLMOnly' -Value '1' -Type 'Dword' -Force -ErrorAction Stop\\n                $Null = Set-ItemProperty -Path \\\"Registry::$FreshCredKeyPath\\\" -Name '1' -Value 'WSMAN/*' -Type 'String' -Force -ErrorAction Stop\\n                $Null = Set-ItemProperty -Path \\\"Registry::$FreshCredKeyNTLMPath\\\" -Name '1' -Value 'WSMAN/*' -Type 'String' -Force -ErrorAction Stop\\n            } Catch [System.Exception] {\\n                Write-Output \\\"Failed to create CredSSP registry properties $_\\\"\\n                Remove-Item -Path (Join-Path -Path \\\"Registry::$RootKey\\\" -ChildPath $CredDelKey) -Force -Recurse\\n                Exit 1\\n            }\\n\\n            Try {\\n                $Null = Enable-WSManCredSSP -Role 'Client' -DelegateComputer '*' -Force -ErrorAction Stop\\n                $Null = Enable-WSManCredSSP -Role 'Server' -Force -ErrorAction Stop\\n            } Catch [System.Exception] {\\n                Write-Output \\\"Failed to enable CredSSP $_\\\"\\n                $Null = Disable-WSManCredSSP -Role 'Client' -ErrorAction SilentlyContinue\\n                $Null = Disable-WSManCredSSP -Role 'Server' -ErrorAction SilentlyContinue\\n                Exit 1\\n            }\\n        }\\n        'Disable' {\\n            Write-Output 'Disabling CredSSP'\\n            Try {\\n                Disable-WSManCredSSP -Role 'Client' -ErrorAction Continue\\n                Disable-WSManCredSSP -Role 'Server' -ErrorAction Stop\\n            } Catch [System.Exception] {\\n                Write-Output \\\"Failed to disable CredSSP $_\\\"\\n                Exit 1\\n            }\\n\\n            Write-Output 'Removing CredSSP registry entries'\\n            Try {\\n                Remove-Item -Path (Join-Path -Path \\\"Registry::$RootKey\\\" -ChildPath $CredDelKey) -Force -Recurse -ErrorAction Stop\\n            } Catch [System.Exception] {\\n                Write-Output \\\"Failed to remove CredSSP registry entries $_\\\"\\n                Exit 1\\n            }\\n        }\\n        Default { \\n            Write-Output 'InvalidArgument: Invalid value is passed for parameter Action'\\n            Exit 1\\n        }\\n    }\\n}\\n\\nFunction New-TemplateOID {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][string]$Server,\\n        [Parameter(Mandatory = $true)][string]$ConfigNC\\n    )\\n\\n    $Hex = '0123456789ABCDEF'\\n\\n    Do {\\n        [string]$RandomHex = $null\\n        For ($i = 1; $i -le 32; $i++) {\\n            $RandomHex += $Hex.Substring((Get-Random -Minimum 0 -Maximum 16), 1)\\n        }\\n\\n        $OID_Part_1 = Get-Random -Minimum 1000000 -Maximum 99999999\\n        $OID_Part_2 = Get-Random -Minimum 10000000 -Maximum 99999999\\n        $OID_Part_3 = $RandomHex\\n        $OID_Forest = Get-ADObject -Server $Server -Identity \\\"CN=OID,CN=Public Key Services,CN=Services,$ConfigNC\\\" -Properties msPKI-Cert-Template-OID | Select-Object -ExpandProperty msPKI-Cert-Template-OID -ErrorAction SilentlyContinue\\n        $msPKICertTemplateOID = \\\"$OID_Forest.$OID_Part_1.$OID_Part_2\\\"\\n        $Name = \\\"$OID_Part_2.$OID_Part_3\\\"\\n        $Search = Get-ADObject -Server $Server -SearchBase \\\"CN=OID,CN=Public Key Services,CN=Services,$ConfigNC\\\" -Filter { cn -eq $Name -and msPKI-Cert-Template-OID -eq $msPKICertTemplateOID } -ErrorAction SilentlyContinue\\n        If ($Search) { \\n            $Unique = 'False'\\n        } Else { \\n            $Unique = 'True'\\n        }\\n    } Until ($Unique = 'True')\\n    Return @{\\n        TemplateOID  = $msPKICertTemplateOID\\n        TemplateName = $Name\\n    }\\n}\\n\\nFunction New-KerbCertTemplate {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][string]$BaseDn,\\n        [Parameter(Mandatory = $true)][PSCredential]$Credential,\\n        [Parameter(Mandatory = $true)][string]$Server\\n    )\\n\\n    $CA = $env:COMPUTERNAME\\n\\n    $OID = New-TemplateOID -Server $Server -ConfigNC \\\"CN=Configuration,$BaseDn\\\"\\n\\n    $TemplateOIDPath = \\\"CN=OID,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn\\\"\\n    $OidOtherAttributes = @{\\n        'DisplayName'             = 'LdapOverSSL'\\n        'flags'                   = [System.Int32]'1'\\n        'msPKI-Cert-Template-OID' = $OID.TemplateOID\\n    }\\n\\n    $OtherAttributes = @{\\n        'flags'                                = [System.Int32]'131168'\\n        'msPKI-Certificate-Application-Policy' = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')\\n        'msPKI-Certificate-Name-Flag'          = [System.Int32]'138412032'\\n        'msPKI-Enrollment-Flag'                = [System.Int32]'40'\\n        'msPKI-Minimal-Key-Size'               = [System.Int32]'2048'\\n        'msPKI-Private-Key-Flag'               = [System.Int32]'84279552'\\n        'msPKI-Template-Minor-Revision'        = [System.Int32]'1'\\n        'msPKI-Template-Schema-Version'        = [System.Int32]'4'\\n        'msPKI-RA-Signature'                   = [System.Int32]'0'\\n        'pKIMaxIssuingDepth'                   = [System.Int32]'0'\\n        'ObjectClass'                          = [System.String]'pKICertificateTemplate'\\n        'pKICriticalExtensions'                = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('2.5.29.17', '2.5.29.15')\\n        'pKIDefaultCSPs'                       = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1,Microsoft RSA SChannel Cryptographic Provider')\\n        'pKIDefaultKeySpec'                    = [System.Int32]'1'\\n        'pKIExpirationPeriod'                  = [System.Byte[]]@('0', '64', '57', '135', '46', '225', '254', '255')\\n        'pKIExtendedKeyUsage'                  = [Microsoft.ActiveDirectory.Management.ADPropertyValueCollection]@('1.3.6.1.5.2.3.5', '1.3.6.1.4.1.311.20.2.2', '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2')\\n        'pKIKeyUsage'                          = [System.Byte[]]@('160', '0')\\n        'pKIOverlapPeriod'                     = [System.Byte[]]@('0', '128', '166', '10', '255', '222', '255', '255')\\n        'revision'                             = [System.Int32]'100'\\n        'msPKI-Cert-Template-OID'              = $OID.TemplateOID\\n    }\\n\\n    Write-Output \\\"Creating new LdapOverSSL certificate template OID $_\\\"\\n    Try {\\n        New-ADObject -Path $TemplateOIDPath -OtherAttributes $OidOtherAttributes -Name $OID.TemplateName -Type 'msPKI-Enterprise-Oid' -Server $Server -Credential $Credential -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to create new LdapOverSSL certificate template OID $_\\\"\\n        Exit 1\\n    }\\n\\n    $TemplatePath = \\\"CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn\\\"\\n\\n    Write-Output \\\"Creating new LdapOverSSL certificate template $_\\\"\\n    Try {\\n        New-ADObject -Path $TemplatePath -OtherAttributes $OtherAttributes -Name 'LdapOverSSL' -DisplayName 'LdapOverSSL' -Type 'pKICertificateTemplate' -Server $Server -Credential $Credential -ErrorAction Stop\\n    } Catch [System.Exception] {\\n        Write-Output \\\"Failed to create new LdapOverSSL certificate template $_\\\"\\n        Exit 1\\n    }\\n\\n    $SidsToAdd = @(\\n        [Security.Principal.SecurityIdentifier]'S-1-5-9'\\n        (Get-ADGroup -Identity 'Domain Controllers' | Select-Object -ExpandProperty 'SID')\\n    )\\n\\n    $SidsToRemove = @(\\n        [Security.Principal.SecurityIdentifier]'S-1-5-18',\\n        (Get-ADGroup -Identity 'Domain Admins' | Select-Object -ExpandProperty 'SID')\\n    )\\n\\n    Set-CredSSP -Action 'Enable'\\n\\n    Write-Output 'Sleeping to ensure replication of certificate template has completed'\\n    Start-Sleep -Seconds 60\\n\\n    Write-Output 'Cleaning up ACLs on LdapOverSSL certificate template'\\n    $ExtendedRightGuids = @(\\n        [GUID]'0e10c968-78fb-11d2-90d4-00c04f79dc55',\\n        [GUID]'a05b8cc2-17bc-4802-a710-e7c15ab866a2'\\n    )\\n    Foreach ($SidToAdd in $SidsToAdd) {\\n        Add-CertTemplateAcl -Credential $Credential -Path \\\"CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn\\\" -IdentityReference $SidToAdd -ActiveDirectoryRights 'GenericRead,GenericWrite,WriteDacl,WriteOwner,Delete' -AccessControlType 'Allow' -ActiveDirectorySecurityInheritance 'None'\\n\\n        Foreach ($ExtendedRightGuid in $ExtendedRightGuids) {\\n            Add-CertTemplateAcl -Credential $Credential -Path \\\"CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn\\\" -IdentityReference $SidToAdd -ActiveDirectoryRights 'ExtendedRight' -AccessControlType 'Allow' -ObjectGuid $ExtendedRightGuid -ActiveDirectorySecurityInheritance 'None'\\n        }\\n    }\\n\\n    Set-CertTemplateAclInheritance -Credential $Credential -Path \\\"CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn\\\"\\n\\n    Foreach ($SidToRemove in $SidsToRemove) {\\n        Remove-CertTemplateAcl -Credential $Credential -Path \\\"CN=LdapOverSSL,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,$BaseDn\\\" -IdentityReference $SidToRemove -AccessControlType 'Allow'\\n    }\\n\\n    Write-Output \\\"Publishing LdapOverSSL template to allow enrollment\\\"\\n    $Counter = 0\\n    Do {\\n        $TempPresent = $Null\\n        Try {\\n            $TempPresent = Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock { \\n                Get-ADObject \\\"CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn\\\" -Partition \\\"CN=Configuration,$Using:BaseDn\\\" -Properties 'certificateTemplates' | Select-Object -ExpandProperty 'certificateTemplates' | Where-Object { $_ -contains 'LdapOverSSL' }\\n            }\\n        } Catch [System.Exception] {\\n            Write-Output \\\"LdapOverSSL Template missing\\\"\\n            $TempPresent = $Null\\n        }\\n        If (-not $TempPresent) {\\n            $Counter ++\\n            Write-Output \\\"LdapOverSSL Template missing adding it.\\\"\\n            Try {\\n                Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {\\n                    Set-ADObject \\\"CN=$Using:CA,CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,$Using:BaseDn\\\" -Partition \\\"CN=Configuration,$Using:BaseDn\\\" -Add @{ 'certificateTemplates' = 'LdapOverSSL' } \\n                }\\n            } Catch [System.Exception] {\\n                Write-Output \\\"Failed to add publish LdapOverSSL template $_\\\"\\n            }\\n            If ($Counter -gt '1') {\\n                Start-Sleep -Seconds 10\\n            }\\n        }\\n    } Until ($TempPresent -or $Counter -eq 12)\\n\\n    Write-Output 'Sleeping to ensure replication of certificate template publish has completed'\\n    Start-Sleep -Seconds 60\\n\\n    Set-CredSSP -Action 'Disable'\\n}\\n\\nFunction Add-CertTemplateAcl {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][PSCredential]$Credential,\\n        [Parameter(Mandatory = $true)][string]$Path,\\n        [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,\\n        [Parameter(Mandatory = $true)][System.DirectoryServices.ActiveDirectoryRights]$ActiveDirectoryRights,\\n        [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType,\\n        [Parameter(Mandatory = $false)][Guid]$ObjectGuid,\\n        [Parameter(Mandatory = $false)][System.DirectoryServices.ActiveDirectorySecurityInheritance]$ActiveDirectorySecurityInheritance,\\n        [Parameter(Mandatory = $false)][Guid]$InheritedObjectGuid\\n    )\\n\\n    Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {\\n        Import-Module -Name 'ActiveDirectory' -Force\\n\\n        [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'\\n\\n        $ArgumentList = $IdentityReference, $Using:ActiveDirectoryRights, $Using:AccessControlType, $Using:ObjectGuid, $Using:ActiveDirectorySecurityInheritance, $Using:InheritedObjectGuid\\n        $ArgumentList = $ArgumentList.Where({ $_ -ne $Null })\\n\\n        Write-Output 'Creating ACL object'\\n        Try {\\n            $Rule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' -ArgumentList $ArgumentList -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to create ACL object $_\\\"\\n            Exit 1\\n        }\\n\\n        Write-Output \\\"Getting ACL for $Using:Path\\\"\\n        Try {\\n            $ObjectAcl = Get-Acl -Path \\\"AD:\\\\$Using:Path\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get ACL for $Using:Path $_\\\"\\n            Exit 1\\n        }\\n\\n        $ObjectAcl.AddAccessRule($Rule) \\n\\n        Write-Output \\\"Setting ACL for $Using:Path\\\"\\n        Try {\\n            Set-Acl -AclObject $ObjectAcl -Path \\\"AD:\\\\$Using:Path\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to set ACL for $Using:Path $_\\\"\\n            Exit 1\\n        }\\n    }\\n}\\n\\nFunction Set-CertTemplateAclInheritance {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][PSCredential]$Credential,\\n        [Parameter(Mandatory = $true)][string]$Path\\n    )\\n\\n    Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {\\n        Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop\\n\\n        Write-Output \\\"Getting ACL for $Using:Path\\\"\\n        Try {\\n            $ObjectAcl = Get-Acl -Path \\\"AD:\\\\$Using:Path\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get ACL for $Using:Path $_\\\"\\n            Exit 1\\n        }\\n\\n        $ObjectAcl.SetAccessRuleProtection($true, $false)\\n\\n        Write-Output \\\"Setting ACL for $Using:Path\\\"\\n        Try {\\n            Set-Acl -AclObject $ObjectAcl -Path \\\"AD:\\\\$Using:Path\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to set ACL for $Using:Path $_\\\"\\n            Exit 1\\n        }\\n    }\\n}\\n\\nFunction Remove-CertTemplateAcl {\\n    [CmdletBinding()]\\n    param(\\n        [Parameter(Mandatory = $true)][PSCredential]$Credential,\\n        [Parameter(Mandatory = $true)][string]$Path,\\n        [Parameter(Mandatory = $true)][Security.Principal.SecurityIdentifier]$IdentityReference,\\n        [Parameter(Mandatory = $true)][System.Security.AccessControl.AccessControlType]$AccessControlType\\n    )\\n\\n    Invoke-Command -Authentication 'Credssp' -ComputerName $env:COMPUTERNAME -Credential $Credential -ScriptBlock {\\n        Import-Module -Name 'ActiveDirectory' -Force -ErrorAction Stop\\n\\n        Write-Output \\\"Getting ACL for $Using:Path\\\"\\n        Try {\\n            $ObjectAcl = Get-Acl -Path \\\"AD:\\\\$Using:Path\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to get ACL for $Using:Path $_\\\"\\n            Exit 1\\n        }\\n\\n        [Security.Principal.SecurityIdentifier]$IdentityReference = $Using:IdentityReference | Select-Object -ExpandProperty 'Value'\\n\\n        $ObjectAcl.RemoveAccess($IdentityReference, $Using:AccessControlType)\\n\\n        Write-Output \\\"Removing ACL for $Using:Path\\\"\\n        Try {\\n            Set-Acl -AclObject $ObjectAcl -Path \\\"AD:\\\\$Using:Path\\\" -ErrorAction Stop\\n        } Catch [System.Exception] {\\n            Write-Output \\\"Failed to remove ACL for $Using:Path $_\\\"\\n            Exit 1\\n        }\\n    }\\n}\\n\\n$Secret = Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecretName}}'\\n$DeploymentType = '{{DeploymentType}}'\\n\\nIf ($DeploymentType -eq 'EnterpriseCA' -or $DeploymentType -eq 'EnterpriseCAManagementInstance') {\\n    Invoke-EnterpriseCaConfig -Credentials $Secret.DomainCredentials -DomainType '{{DomainType}}' -EntCaCommonName '{{ServerNetBIOSName}}' -EntCaHashAlgorithm 'SHA256' -EntCaKeyLength '2048' -EntCaValidityPeriodUnits '5' -VPCCIDR '{{VPCCIDR}}'\\n}\"\r\n            },\r\n            \"CloudWatchOutputConfig\": {\r\n              \"CloudWatchOutputEnabled\": true,\r\n              \"CloudWatchLogGroupName\": \"/aws/Demo/SSM-Pki-7ebugdhf\"\r\n            },\r\n            \"InstanceIds\": [\r\n              \"{{InstanceId.InstanceId}}\"\r\n            ],\r\n            \"DocumentName\": \"AWS-RunPowerShellScript\"\r\n          },\r\n          \"name\": \"configureInstance\",\r\n          \"action\": \"aws:runCommand\"\r\n        }\r\n      ]\r\n    }\r\n",
            "created_date": "2022-07-22T21:34:31Z",
            "default_version": "1",
            "description": "Deploy Enterpise CA",
            "document_format": "JSON",
            "document_type": "Automation",
            "document_version": "1",
            "hash": "d125ffc81c37d72cdae341bde77926b9093952a5c69967388a77905f5f1418e2",
            "hash_type": "Sha256",
            "id": "SSM-Pki-7ebugdhf",
            "latest_version": "1",
            "name": "SSM-Pki-7ebugdhf",
            "owner": "156285977455",
            "parameter": [
              {
                "default_value": "",
                "description": "NetBIOS name of the first Active Directory Domain Controller (up to 15 characters)",
                "name": "ServerNetBIOSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Type of domain PKI will be integrated with",
                "name": "DomainType",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. ONPREMISES",
                "name": "DomainNetBIOSName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "CIDR Block for the VPC",
                "name": "VPCCIDR",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "AWS Secrets Parameter Name",
                "name": "AdministratorSecretName",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Type of workload being deployed",
                "name": "DeploymentType",
                "type": "String"
              },
              {
                "default_value": "",
                "description": "Stack Name Input for cfn resource signal",
                "name": "StackName",
                "type": "String"
              }
            ],
            "permissions": null,
            "platform_types": [
              "Windows",
              "Linux",
              "MacOS"
            ],
            "schema_version": "0.3",
            "status": "Active",
            "tags": null,
            "tags_all": {},
            "target_type": "",
            "version_name": ""
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "network_subnet1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:subnet/subnet-097c86194d63f66eb",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-2a",
            "availability_zone_id": "use2-az1",
            "cidr_block": "10.0.0.0/26",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-097c86194d63f66eb",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "156285977455",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "Demo-VPC-Subnet1-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Subnet1-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "network_subnet2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:subnet/subnet-028aafaca8c829d7c",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-2b",
            "availability_zone_id": "use2-az2",
            "cidr_block": "10.0.0.64/26",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-028aafaca8c829d7c",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": true,
            "outpost_arn": "",
            "owner_id": "156285977455",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "Demo-VPC-Subnet2-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-Subnet2-7ebugdhf"
            },
            "timeouts": null,
            "vpc_id": "vpc-0592fd80e91a2065b"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.network",
            "data.aws_availability_zones.available",
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "network",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-2:156285977455:vpc/vpc-0592fd80e91a2065b",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/24",
            "default_network_acl_id": "acl-057ff3f43303e0418",
            "default_route_table_id": "rtb-035e7a19a2625ea0a",
            "default_security_group_id": "sg-0ba44a85d8635997a",
            "dhcp_options_id": "dopt-48377323",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "id": "vpc-0592fd80e91a2065b",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-035e7a19a2625ea0a",
            "owner_id": "156285977455",
            "tags": {
              "Name": "Demo-VPC-7ebugdhf"
            },
            "tags_all": {
              "Name": "Demo-VPC-7ebugdhf"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "random_string.random_string"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_password",
      "name": "secret_mad",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "bcrypt_hash": "$2a$10$8c2yG0R2.rPj/lFb9yPynu7ChyzlmNvuSqCY0QihiNP3z309jZYXG",
            "id": "none",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
            "result": "MXwX%k!))(x164m?thfW8m}Z(AAu\u003c$?\u003c",
            "special": true,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_password",
      "name": "secret_onprem",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "bcrypt_hash": "$2a$10$SmZMT8DbIKsYag.fWvXJduaTZ/EqrE4x1b1rAfqvYI7PZimYsOXVq",
            "id": "none",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
            "result": "(fvskUDlFMvJw:SbpRfvlaL*7UkL3FxA",
            "special": true,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_password",
      "name": "secret_rds",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "bcrypt_hash": "$2a$10$iLdIQL2MDqzA0hhF9Ypg/e7hx9yUtMHv.qkUL4g97QEQ05EbXGLHy",
            "id": "none",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": "!#$%\u0026*()-_=+[]{}\u003c\u003e:?",
            "result": "Vf{%D)M7XXw5T#M{y3Rbfz7QQgE}Z81O",
            "special": true,
            "upper": true
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "random_string",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "7ebugdhf",
            "keepers": null,
            "length": 8,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "7ebugdhf",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ=="
        }
      ]
    }
  ]
}

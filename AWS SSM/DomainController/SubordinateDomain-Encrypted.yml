---
description: Creates a subordinate tree or child Microsoft AD Domain with 1 domain controller.
schemaVersion: '0.3'
parameters:
  AmiNameTag:
    default: Windows-Server-2019-Full-Template
    description: Image Name to launch EC2 instance with.
    type: String
  AutomationAssumeRole:
    default: ''
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this runbook.
    type: String
  DataVolumeSize:
    default: 10
    description: Size of the NTDS / SYSVOL drive
    type: Integer
  DeletedObjectLifetime:
    default: '30'
    description: The length of time before deleted objects are moved from the AD Recycle Bin to Tombstome
    type: String
  InstanceRoleName:
    default: SSMCore+CWL
    description: Instance Role Name to launch EC2 instance with
    type: String
  KeyName:
    default: Baseline
    description: PEM Keypair
    type: String
  KmsKeyId:
    default: alias/aws/ebs
    description: KMS Key for EBS Encryption 
    type: String
  ParentDCPrivateIp:
    default: 10.255.0.10
    description: Fixed private IP for the Parent domain Active Directory Domain Controller
    type: String
  ParentDomainDNSName:
    default: onpremises.local
    description: Fully qualified domain name (FQDN) of the Parent domain
    type: String
  ParentSecretArn:
    default: arn:aws:secretsmanager:us-west-2:820097935833:secret:DefaultCreds-IsuSDO
    description: ARN for the Parent domain Administrator credentials Secret used to join and promote domain controllers
    type: String
  RestoreModeSecretArn:
    default: arn:aws:secretsmanager:us-west-2:820097935833:secret:DefaultCreds-IsuSDO
    description: ARN for the Restore Mode credentials Secret used to promote domain controllers
    type: String
  SecurityGroupId:
    default:
      - sg-00925bfa64112a869
      - sg-08654c41fd3c9b0bf
    description: Security Group the Subordinate Active Directory Domain Controller will use
    type: StringList
  SubnetId:
    default: subnet-0ddc03361b9ad7b07
    description: Subnet ID where the Subordinate Active Directory Domain Controller will be deployed to
    type: String
  SubordinateDCInstanceType:
    default: t3a.large
    description: Instance type of the Subordinate domain Active Directory Domain Controller
    type: String
  SubordinateDCNetBIOSName:
    default: OpCh-DC01
    description: NetBIOS name of the Subordinate domain Active Directory Domain Controller (up to 15 characters)
    type: String
  SubordinateDCPrivateIp:
    default: 10.255.0.11
    description: Fixed private IP for the Subordinate domain Active Directory Domain Controller
    type: String
  SubordinateDomainDNSName:
    default: subordinate
    description: Fully qualified domain name (FQDN) of the Subordinate domain you would like to join and promote to e.g. example.com
    type: String
  SubordinateDomainNetBIOSName:
    default: Subordinate
    description: NetBIOS name of the Subordinate domain (up to 15 characters) you would like to join and promote to for users of earlier versions of Windows e.g. EXAMPLE
    type: String
  SubordinateDomainType:
    allowedValues:
      - Child
      - Tree
    default: Child
    description: Type of Subordinate domain
    type: String
  SubordinateSecretArn:
    default: arn:aws:secretsmanager:us-west-2:820097935833:secret:DefaultCreds-IsuSDO
    description: ARN for the Subordinate domain Administrator credentials Secret used to join and promote domain controllers
    type: String
  Tombstonelifetime:
    default: '30'
    description: The length of time before tombstoned objects are moved from the AD database.
    type: String
mainSteps:
  - name: putRolePolicy
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: iam
      Api: PutRolePolicy
      PolicyDocument: >-
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": [
                        "{{ParentSecretArn}}",
                        "{{SubordinateSecretArn}}",
                        "{{RestoreModeSecretArn}}"
                    ],
                    "Action": [
                        "secretsmanager:DescribeSecret",
                        "secretsmanager:GetSecretValue"
                    ]
                }
            ]
        }
      PolicyName: 'TempSecretAccess{{global:ACCOUNT_ID}}'
      RoleName: '{{InstanceRoleName}}'
    nextStep: getAmiId
  - name: getAmiId
    action: aws:executeAwsApi
    inputs:
      Service: ec2
      Api: DescribeImages
      Filters:
        - Name: 'tag:Name'
          Values:
            - '{{AmiNameTag}}'
    outputs:
      - Name: amiId
        Selector: '$.Images[0].ImageId'
        Type: 'String'
    nextStep: launchSubDC
  - name: launchSubDC
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: RunInstances
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: '{{KmsKeyId}}'
            VolumeSize: 45
            VolumeType: gp3
        - DeviceName: xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: '{{KmsKeyId}}'
            VolumeSize: '{{DataVolumeSize}}'
            VolumeType: gp3
      IamInstanceProfile:
        Name: '{{InstanceRoleName}}'
      ImageId: '{{getAmiId.amiId}}'
      InstanceType: '{{SubordinateDCInstanceType}}'
      KeyName: '{{KeyName}}'
      MaxCount: 1
      MinCount: 1
      PrivateIpAddress: '{{SubordinateDCPrivateIp}}'
      SecurityGroupIds:
        - '{{SecurityGroupId}}'
      SubnetId: '{{SubnetId}}'
      TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: '{{SubordinateDCNetBIOSName}}'
            - Key: Domain
              Value: '{{SubordinateDomainDNSName}}'
            - Key: OS
              Value: Windows Server 2019 Full
            - Key: Role
              Value: Domain Controller
        - ResourceType: network-interface
          Tags:
            - Key: Name
              Value: '{{SubordinateDCNetBIOSName}}'
        - ResourceType: volume
          Tags:
            - Key: Name
              Value: '{{SubordinateDCNetBIOSName}}'
    outputs:
      - Name: subInstanceId
        Selector: '$.Instances[0].InstanceId'
        Type: String
    nextStep: waitForSubDCBoot
  - name: waitForSubDCBoot
    action: aws:sleep
    inputs:
      Duration: PT2M
    nextStep: configureSubDC
  - name: configureSubDC
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: '/aws/SSMAutomation/SubDC/{{automation:EXECUTION_ID}}'
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchSubDC.subInstanceId}}'
      Parameters:
        commands: |-
          $Password = (Get-SecretCreds -DomainNetBIOSName '{{SubordinateDomainNetBIOSName}}' -SecretArn {{SubordinateSecretArn}}).UserPW
          Set-LabInstance -ComputerName '{{SubordinateDCNetBIOSName}}' -Role 'AdditionalDomainController' -ExistingDcIp '{{ParentDCPrivateIp}}' -Password $Password
    nextStep: waitForSubDCConfigReboot
  - name: waitForSubDCConfigReboot
    action: aws:sleep
    inputs:
      Duration: PT2M
    nextStep: promoteSubDC
  - name: promoteSubDC
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: '/aws/SSMAutomation/SubDC/{{automation:EXECUTION_ID}}'
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchSubDC.subInstanceId}}'
      Parameters:
        commands: |-
          $SafeModeAdministratorPassword = (Get-SecretCreds -DomainNetBIOSName '{{SubordinateDomainNetBIOSName}}' -SecretArn {{RestoreModeSecretArn}}).UserPW
          $Credentials = (Get-SecretCreds -DomainNetBIOSName '{{ParentDomainDNSName}}' -SecretArn {{ParentSecretArn}}).Credentials
          Set-DcPromo -Type '{{SubordinateDomainType}}' -DomainName '{{SubordinateDomainDNSName}}' -RootDomainName '{{ParentDomainDNSName}}' -SafeModeAdministratorPassword $SafeModeAdministratorPassword -Credentials $Credentials -NetbiosName '{{SubordinateDomainNetBIOSName}}' -Mode '7'
    nextStep: waitForSubDCPromo
  - name: waitForSubDCPromo
    action: aws:sleep
    inputs:
      Duration: PT10M
    nextStep: postSubDCPromo
  - name: postSubDCPromo
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: '/aws/SSMAutomation/SubDC/{{automation:EXECUTION_ID}}'
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchSubDC.subInstanceId}}'
      Parameters:
        commands: |-
          Set-PostDcPromo
          Set-PostDcPromoPdce -DeletedObjectLifetime '{{DeletedObjectLifetime}}' -Tombstonelifetime '{{Tombstonelifetime}}'
    nextStep: runDsc
  - name: runDsc
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/RootDC/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchSubDC.subInstanceId}}'
      Parameters:
        commands: |-
          & C:\Scripts\Set-DscConfiguration.ps1
          Invoke-DscStatusCheck
    nextStep: deleteRolePolicy
  - name: deleteRolePolicy
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: iam
      Api: DeleteRolePolicy
      PolicyName: 'TempSecretAccess{{global:ACCOUNT_ID}}'
      RoleName: '{{InstanceRoleName}}'
  - name: addPatchingTag
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: CreateTags
      Resources:
        - '{{launchSubDC.subInstanceId}}'
      Tags:
        - Key: PatchGroup
          Value: Patches-All-DailyCheck
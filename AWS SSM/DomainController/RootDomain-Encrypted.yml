---
description: Creates a root Microsoft AD Domain with 1 domain controller.
schemaVersion: '0.3'
parameters:
  AmiNameTag:
    default: Windows-Server-2022-Full-Template
    description: Image Name to launch EC2 instance with.
    type: String
  AutomationAssumeRole:
    default: ''
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this runbook.
    type: String
  DataVolumeSize:
    default: 10
    description: Size of the NTDS / SYSVOL drive
    type: Integer
  DeletedObjectLifetime:
    default: '30'
    description: The length of time before deleted objects are moved from the AD Recycle Bin to Tombstome
    type: String
  InstanceRoleName:
    default: SSMCore+CWL
    description: Instance Role Name to launch EC2 instance with
    type: String
  KeyName:
    default: Baseline
    description: PEM Keypair
    type: String
  KmsKeyId:
    default: alias/aws/ebs
    description: KMS Key for EBS Encryption 
    type: String
  RestoreModeSecretArn:
    default: arn:aws:secretsmanager:us-west-2:156285977455:secret:DefaultCreds-MItAmX
    description: ARN for the Restore Mode credentials Secret used to promote domain controllers
    type: String
  RootDCInstanceType:
    default: t3a.large
    description: Instance type of the Root Active Directory Domain Controller
    type: String
  RootDCNetBIOSName:
    default: OpRt-DC01
    description: NetBIOS name of the Root Active Directory Domain Controller (up to 15 characters)
    type: String
  RootDCPrivateIp:
    default: 10.255.0.10
    description: Fixed private IP for the Root Active Directory Domain Controller
    type: String
  RootDomainDNSName:
    default: onpremises.local
    description: Fully qualified domain name (FQDN) of the domain you would like to join and promote to e.g. example.com
    type: String
  RootDomainNetBIOSName:
    default: onpremises
    description: NetBIOS name of the domain (up to 15 characters) you would like to join and promote to for users of earlier versions of Windows e.g. EXAMPLE
    type: String
  RootSecretArn:
    default: arn:aws:secretsmanager:us-west-2:156285977455:secret:DefaultCreds-MItAmX
    description: ARN for the Administrator credentials Secret used to join and promote domain controllers
    type: String
  SecurityGroupId:
    default:
      - sg-00925bfa64112a869
      - sg-08654c41fd3c9b0bf
    description: Security Group the Root Active Directory Domain Controller will use
    type: StringList
  SubnetId:
    default: subnet-0ddc03361b9ad7b07
    description: Subnet ID where the Root Active Directory Domain Controller will be deployed to
    type: String
  Tombstonelifetime:
    default: '30'
    description: The length of time before tombstoned objects are moved from the AD database.
    type: String
mainSteps:
  - name: putRolePolicy
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: iam
      Api: PutRolePolicy
      PolicyDocument: >-
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": [
                        "{{RootSecretArn}}",
                        "{{RestoreModeSecretArn}}"
                    ],
                    "Action": [
                        "secretsmanager:DescribeSecret",
                        "secretsmanager:GetSecretValue"
                    ]
                }
            ]
        }
      PolicyName: 'TempSecretAccess{{global:ACCOUNT_ID}}'
      RoleName: '{{InstanceRoleName}}'
    nextStep: getAmiId
  - name: getAmiId
    action: aws:executeAwsApi
    inputs:
      Service: ec2
      Api: DescribeImages
      Filters:
        - Name: tag:Name
          Values:
            - '{{AmiNameTag}}'
    outputs:
      - Name: amiId
        Selector: $.Images[0].ImageId
        Type: String
    nextStep: launchRootDC
  - name: launchRootDC
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: RunInstances
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: '{{KmsKeyId}}'
            VolumeSize: 45
            VolumeType: gp3
        - DeviceName: xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: '{{KmsKeyId}}'
            VolumeSize: '{{DataVolumeSize}}'
            VolumeType: gp3
      IamInstanceProfile:
        Name: '{{InstanceRoleName}}'
      ImageId: '{{getAmiId.amiId}}'
      InstanceType: '{{RootDCInstanceType}}'
      KeyName: '{{KeyName}}'
      MaxCount: 1
      MinCount: 1
      Monitoring:
        Enabled: true
      PrivateIpAddress: '{{RootDCPrivateIp}}'
      SecurityGroupIds:
        - '{{SecurityGroupId}}'
      SubnetId: '{{SubnetId}}'
      TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: '{{RootDCNetBIOSName}}'
            - Key: Domain
              Value: '{{RootDomainDNSName}}'
            - Key: Environment
              Value: Production
            - Key: OS
              Value: Windows Server 2019 Full
            - Key: Role
              Value: Domain Controller
        - ResourceType: network-interface
          Tags:
            - Key: Name
              Value: '{{RootDCNetBIOSName}}'
        - ResourceType: volume
          Tags:
            - Key: Name
              Value: '{{RootDCNetBIOSName}}'
    outputs:
      - Name: rootInstanceId
        Selector: $.Instances[0].InstanceId
        Type: String
    nextStep: waitForRootDCBoot
  - name: waitForRootDCBoot
    action: aws:sleep
    inputs:
      Duration: PT2M
    nextStep: configureRootDC
  - name: configureRootDC
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/RootDC/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchRootDC.rootInstanceId}}'
      Parameters:
        commands: |-
          $Password = (Get-SecretCreds -DomainNetBIOSName '{{RootDomainNetBIOSName}}' -SecretArn '{{RootSecretArn}}').UserPW
          Set-LabInstance -ComputerName '{{RootDCNetBIOSName}}' -Role 'FirstRootDomainController' -Password $Password
    nextStep: waitForRootDCConfigReboot
  - name: waitForRootDCConfigReboot
    action: aws:sleep
    inputs:
      Duration: PT2M
    nextStep: promoteRootDC
  - name: promoteRootDC
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/RootDC/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchRootDC.rootInstanceId}}'
      Parameters:
        commands: |-
          $SafeModeAdministratorPassword = (Get-SecretCreds -DomainNetBIOSName '{{RootDomainNetBIOSName}}' -SecretArn '{{RestoreModeSecretArn}}').UserPW
          Set-DcPromo -Type 'First' -DomainName '{{RootDomainDNSName}}' -SafeModeAdministratorPassword $SafeModeAdministratorPassword -NetbiosName '{{RootDomainNetBIOSName}}' -Mode '7'
    nextStep: waitForRootDCPromo
  - name: waitForRootDCPromo
    action: aws:sleep
    inputs:
      Duration: PT10M
    nextStep: postRootDCPromo
  - name: postRootDCPromo
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/RootDC/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchRootDC.rootInstanceId}}'
      Parameters:
        commands: |-
          Set-PostDcPromo
          Set-PostDcPromoPdce -DeletedObjectLifetime '{{DeletedObjectLifetime}}' -Tombstonelifetime '{{Tombstonelifetime}}'
    nextStep: runDsc
  - name: runDsc
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/RootDC/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchRootDC.rootInstanceId}}'
      Parameters:
        commands: |-
          & C:\Scripts\Set-DscConfiguration.ps1
          Invoke-DscStatusCheck
    nextStep: deleteRolePolicy
  - name: deleteRolePolicy
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: iam
      Api: DeleteRolePolicy
      PolicyName: TempSecretAccess{{global:ACCOUNT_ID}}
      RoleName: '{{InstanceRoleName}}'
    nextStep: addPatchingTag
  - name: addPatchingTag
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: CreateTags
      Resources:
        - '{{launchRootDC.rootInstanceId}}'
      Tags:
        - Key: Patch Group
          Value: Patches-All-DailyCheck
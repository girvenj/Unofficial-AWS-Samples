---
description: Creates a Single Tier Enterpise CA.
schemaVersion: '0.3'
parameters:
  AmiNameTag:
    default: Windows-Server-2019-Full-Template
    description: Image Name to launch EC2 instance with.
    type: String
  AutomationAssumeRole:
    default: ''
    description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to run this runbook.
    type: String
  DCPrivateIp:
    default: '10.255.0.10, 10.255.0.2'
    description: IPs of existing Active Directory Domain Controller comma sepparate if more then one is listed 
    type: String
  DataVolumeSize:
    default: 10
    description: Size of the data drive
    type: Integer
  DirectoryType:
    allowedValues:
      - AWSManaged
      - SelfManaged
    default: SelfManaged
    description: Type of Active Directory Enterpise CA will be integrated with, AWS Managed Microsoft AD or Self Managed AD
    type: String
  DomainDNSName:
    default: onpremises.local
    description: Fully qualified domain name (FQDN) of the domain you would like to join to e.g. example.com
    type: String
  DomainNetBIOSName:
    default: onpremises
    description: NetBIOS name of the domain (up to 15 characters) you would like to join to for users of earlier versions of Windows e.g. EXAMPLE
    type: String
  EntCaSecretArn:
    default: arn:aws:secretsmanager:us-west-2:820097935833:secret:DefaultCreds-IsuSDO
    description: ARN for the Administrator credentials Secret used to deploy Enterpise CA
    type: String
  EntCaHashAlgorithm:
    allowedValues:
      - SHA256
      - SHA384
      - SHA512
    default: SHA512
    description: Enterpise CA Hash Algorithm for Siging Certificates
    type: String
  EntCaInstanceType:
    default: t3a.large
    description: Instance type of the Enterpise CA
    type: String
  EntCaKeyLength:
    allowedValues:
      - '2048'
      - '4096'
    default: '4096'
    description: Enterpise CA Cryptographic Provider Key Length
    type: String
  EntCaNetBIOSName:
    default: OpRt-ECA01
    description: NetBIOS name of the Enterpise CA (up to 15 characters)
    type: String
  EntCaPrivateIp:
    default: 10.255.0.11
    description: Fixed private IP for the Enterpise CA
    type: String
  EntCaValidityPeriodUnits:
    default: '5'
    description: Length in years for the Enterpise CA Ceritificate
    type: String
  InstanceRoleName:
    default: SSMCore
    description: Instance Role Name to launch EC2 instance with
    type: String
  KeyName:
    default: Girven-Base
    description: PEM Keypair
    type: String
  KmsKeyId:
    default: alias/aws/ebs
    description: KMS Key for EBS Encryption 
    type: String
  S3CRLBucketName:
    default: example-local
    description: S3 bucket name for Enterpise CA CRL storage
    type: String
  SecurityGroupId:
    default:
      - sg-0482d7dc863da9114
      - sg-092eae60d142c5076
    description: Security Group the Root Active Directory Domain Controller will use
    type: StringList
  SubnetId:
    default: subnet-0f3d40ba8e84edeee
    description: Subnet ID where Enterpise CA will be deployed to
    type: String
  UseS3ForCRL:
    allowedValues:
      - 'Yes'
      - 'No'
    default: 'Yes'
    description: Store CA CRL in an S3 bucket?
    type: String
mainSteps:
  - name: getVpcId
    action: aws:executeAwsApi
    inputs:
      Service: ec2
      Api: DescribeSubnets
      SubnetIds:
        - '{{SubnetId}}'
    outputs:
      - Name: vpcId
        Selector: '$.Subnets[0].VpcId'
        Type: String
    nextStep: getVpcCidr
  - name: getVpcCidr
    action: aws:executeAwsApi
    inputs:
      Service: ec2
      Api: DescribeVpcs
      VpcIds:
        - '{{getVpcId.vpcId}}'
    outputs:
      - Name: vpcCidr
        Selector: '$.Vpcs[0].CidrBlock'
        Type: String
    nextStep: putRolePolicy
  - name: putRolePolicy
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: iam
      Api: PutRolePolicy
      PolicyDocument: >-
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Resource": [
                        "{{EntCaSecretArn}}"
                    ],
                    "Action": [
                        "secretsmanager:DescribeSecret",
                        "secretsmanager:GetSecretValue"
                    ]
                }
            ]
        }
      PolicyName: 'TempSecretAccess{{global:ACCOUNT_ID}}'
      RoleName: '{{InstanceRoleName}}'
    nextStep: getAmiId
  - name: getAmiId
    action: aws:executeAwsApi
    inputs:
      Service: ec2
      Api: DescribeImages
      Filters:  
      - Name: tag:Name
        Values: 
        - '{{AmiNameTag}}'
    outputs:
      - Name: amiId
        Selector: '$.Images[0].ImageId'
        Type: String
    nextStep: launchEntCa
  - name: launchEntCa
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: RunInstances
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: '{{KmsKeyId}}'
            VolumeSize: 45
            VolumeType: gp3
        - DeviceName: xvdf
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: '{{KmsKeyId}}'
            VolumeSize: '{{DataVolumeSize}}'
            VolumeType: gp3
      IamInstanceProfile:
        Name: '{{InstanceRoleName}}'
      ImageId: '{{getAmiId.amiId}}'
      InstanceType: '{{EntCaInstanceType}}'
      KeyName: '{{KeyName}}'
      MaxCount: 1
      MinCount: 1
      Monitoring:
        Enabled: true
      PrivateIpAddress: '{{EntCaPrivateIp}}'
      SecurityGroupIds:
        - '{{SecurityGroupId}}'
      SubnetId: '{{SubnetId}}'
      TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: '{{EntCaNetBIOSName}}'
            - Key: Domain
              Value: '{{DomainDNSName}}'
            - Key: Environment
              Value: Production
            - Key: OS
              Value: Windows Server 2019 Full
            - Key: Role
              Value: Enterprise CA
        - ResourceType: network-interface 
          Tags:
            - Key: Name
              Value: '{{EntCaNetBIOSName}}'
        - ResourceType: volume 
          Tags:
            - Key: Name
              Value: '{{EntCaNetBIOSName}}'
    outputs:
      - Name: entCaInstanceId
        Selector: '$.Instances[0].InstanceId'
        Type: String
    nextStep: waitForEntCaBoot
  - name: waitForEntCaBoot
    action: aws:sleep
    inputs:
      Duration: PT2M
    nextStep: configureEntCaOs
  - name: configureEntCaOs
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/EntCa/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{ launchEntCa.entCaInstanceId }}'
      Parameters:
        commands: |-
          $Password = (Get-SecretCreds -DomainNetBIOSName '{{DomainNetBIOSName}}' -SecretArn '{{EntCaSecretArn}}').UserPW
          Set-LabInstance -ComputerName '{{EntCaNetBIOSName}}' -ExistingDcIp '{{DCPrivateIp}}' -Password $Password -Role 'MemberServer' 
    nextStep: waitForEntCaConfigReboot
  - name: waitForEntCaConfigReboot
    action: aws:sleep
    inputs:
      Duration: PT2M
    nextStep: joinEntCa
  - name: joinEntCa
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/EntCa/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{ launchEntCa.entCaInstanceId }}'
      Parameters:
        commands: |-
          $Credentials = (Get-SecretCreds -DomainNetBIOSName '{{DomainNetBIOSName}}' -SecretArn '{{EntCaSecretArn}}').Credentials
          Invoke-JoinDomain -Credentials $Credentials -FQDN '{{DomainDNSName}}'
    nextStep: waitForEntCaJoin
  - name: waitForEntCaJoin
    action: aws:sleep
    inputs:
      Duration: PT5M
    nextStep: configureEntCa
  - name: configureEntCa
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/EntCa/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchEntCa.entCaInstanceId}}'
      Parameters:
        commands: |-
          $Credentials = (Get-SecretCreds -DomainNetBIOSName '{{DomainNetBIOSName}}' -SecretArn '{{EntCaSecretArn}}').Credentials
          Invoke-EnterpriseCaConfig -Credentials $Credentials -DirectoryType '{{DirectoryType}}' -EntCaCommonName '{{EntCaNetBIOSName}}' -EntCaHashAlgorithm '{{EntCaHashAlgorithm}}' -EntCaKeyLength '{{EntCaKeyLength}}' -EntCaValidityPeriodUnits '{{EntCaValidityPeriodUnits}}' -S3CRLBucketName '{{S3CRLBucketName}}' -UseS3ForCRL '{{UseS3ForCRL}}' -VPCCIDR '{{getVpcCidr.vpcCidr}}'
    nextStep: runDsc
  - name: runDsc
    action: aws:runCommand
    inputs:
      CloudWatchOutputConfig:
        CloudWatchLogGroupName: /aws/SSMAutomation/RootDC/{{automation:EXECUTION_ID}}
        CloudWatchOutputEnabled: true
      DocumentName: AWS-RunPowerShellScript
      InstanceIds:
        - '{{launchEntCa.entCaInstanceId}}'
      Parameters:
        commands: |-
          & C:\Scripts\Set-DscConfiguration.ps1
          Invoke-DscStatusCheck
    nextStep: deleteRolePolicy
  - name: deleteRolePolicy
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: iam
      Api: DeleteRolePolicy
      PolicyName: TempSecretAccess{{global:ACCOUNT_ID}}
      RoleName: '{{InstanceRoleName}}'
    nextStep: addPatchingTag
  - name: addPatchingTag
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: CreateTags
      Resources:
        - '{{launchEntCa.entCaInstanceId}}'
      Tags:
        - Key: Patch Group
          Value: Patches-All-DailyCheck